<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright Singapore-MIT Alliance for Research and Technology -->

<config>
    <!-- Groupings of stored procedures, used for loading network data from certain tables. -->
    <db_proc_groups>
        <!-- Entire singapore network with scaled activity_schedules from preday-->
        <proc_map id="withinday" format="aimsun">
            <mapping name="node" procedure="get_updated_node_sg()"/>
            <mapping name="section" procedure="get_updated_section_sg()"/>
            <mapping name="turning" procedure="get_updated_lane_connector_sg()"/>
            <mapping name="busstop" procedure="get_bus_stop_location_interchange()"/>
            <mapping name="polyline" procedure="get_updated_section_polyline()"/>
            <mapping name="pt_bus_dispatch_freq" procedure="get_pt_bus_dispatch_freq('weekday')"/>
            <mapping name="pt_bus_routes" procedure="get_pt_bus_routes()"/>           
            <mapping name="pt_bus_stops" procedure="get_pt_bus_stops()"/>             
            <mapping name="od_trips" procedure="get_od_trips()"/>  
            <mapping name="day_activity_schedule" procedure="get_persons_between_all"/>
            <mapping name="pt_edges" procedure="get_pt_map_edges_latest()"/>
            <mapping name="pt_vertices" procedure="get_pt_map_vertex_latest()"/>
            <mapping name="mrt_road_segments" procedure="get_mrt_road_segments()"/>
            <mapping name="pt_pathset" procedure="get_pt_pathset_corrected"/>
            <mapping name="restricted_reg_segments" procedure="get_section_banned_area()"/>
            <mapping name="restricted_reg_in_turning" procedure="get_banned_area_in_turning()"/>
            <mapping name="restricted_reg_out_turning" procedure="get_banned_area_out_turning()"/>
            <mapping name="restricted_reg_nodes" procedure="get_restricted_region_nodes()"/>
            <mapping name="screen_line" procedure="get_screen_line_segments()"/>
        </proc_map>
    </db_proc_groups>
    
    <system>         
        <!-- If loading from the database, which database, proc_map, and credentials are used? -->
        <!-- <network_database database="fm_local" credentials="vahid_cred" proc_map="bugis_small"/> -->
        <network_database database="fm_remote" credentials="fm_remote" proc_map="withinday"/>
        <!-- <network_database database="fm_local" credentials="harish_cred" proc_map="bugis_large"/> -->
        <!--<network_database database="fm_remote" credentials="fm_remote" proc_map="bugis_large"/>-->
        
        <!-- The new parser will simply load everything in the "generic_props" section into "SystemParams.genericProps".  -->
        <!-- In other words, you DO NOT need to update the parser just to add a simple string-based configuration parameter to -->
        <!-- the config file. This is intended to be used for new or temporary features. -->
        <generic_props>
            <!-- The current control strategy for buses. Can be "headway_based", "evenheadway_based", "hybrid_based", or (default) "no_control" -->
            <property key="busline_control_type" value="headway_based"/>
        </generic_props>
    </system>
      
    <incidentsData enabled="false">
        <incident id="0" visibility="4000" segment="40200" position="60" cap_factor="1.0" start_time="08:30:00" duration="00:32:00" length="1000" compliance="50" accessibility="50" > 
            <lane laneId="0" speedLimitFactor="0"/>
            <lane laneId="1" speedLimitFactor="0"/>
            <lane laneId="2" speedLimitFactor="20"/>
        </incident>
    </incidentsData>
    
    <!-- This is data only for "schedule_based", "evenheadway_based" or "hybrid_based" control strategies -->
    <!-- each item store the scheduled offset arriving time(ms) and offset departure time(ms) at some bus stops -->
    <scheduledTimes>
        <stop offsetAT="11600" offsetDT="17600" />
        <stop offsetAT="74800" offsetDT="80800" />
        <stop offsetAT="101000" offsetDT="107100" />
        <stop offsetAT="124000" offsetDT="130000" />       
        <stop offsetAT="174300" offsetDT="180300" />    
        <stop offsetAT="254400" offsetDT="260400" />
        <stop offsetAT="287800" offsetDT="293800" />
        <stop offsetAT="313500" offsetDT="319500" />       
        <stop offsetAT="376100" offsetDT="382100" />    
        <stop offsetAT="403600" offsetDT="409600" />        
    </scheduledTimes>
    
<!--<signals> -->
    <!-- Any of the following signals will not be created if it has already been created by -->
    <!-- the 'signal' stored procedure above.  Note that this <signals> section will be -->
    <!-- removed soon and without notice.  After that, only signals found in the database -->
    <!-- will be created. -->
<!--<signal xpos="37250760" ypos="14355120"/>
    </signals> -->
    <CBD enabled="false"/>
    <generateBusRoutes enabled="false" /> 
    <travel_time_update interval="300" alpha="0.5" />
    <public_transit enabled="true"/>
    <screen-line_count interval="900" file-name="screenLineCount.txt" enabled="true" />

    <!-- Determines whether to run SimMobility_Medium's demand simulator or the supply simulator -->
    <!-- Admissible values are "preday", "withinday" and "supply". Values "withinday" and "supply" runs the same code. Two different values are allowed just for convenience.--> 
    <mid_term_run_mode value="supply"/>
    
    <!-- config specific to supply simulator -->                    
    <supply>
        <!-- period of supply output -->
        <update_interval value="1" units="minute" />
        
        <!-- these parameters are used to calculate dwell time of buses at bus stops-->
        <!-- these parameters will be organized in a better way after finding the meaning of these numbers -->
        <dwell_time_parameters>
        <!--parameters : minimum and maximum of fixed dwelling time, minimum and maximum of individual dwelling time-->
        <parameters value="0.0, 0.0, 2.0, 3.0"/>
        </dwell_time_parameters>

        <!-- pedestrian walking speed in cm/s (approximately 5 km/h)-->
        <pedestrian_walk_speed value="135"/>
        
        <!-- default capacity value -->
        <bus_default_capacity value="80"/>
                
        <!-- these parameters are used to assign filename for the storage of statistics -->   
        <!-- if the value is empty, no output file is generated, otherwise store to csv file -->     
        <statistics_output_paramemters>                              
            <journey_time_csv_file_output value="journeytime.csv"/>
            <waiting_time_csv_file_output value="waitingtime.csv"/>
            <waiting_amount_csv_file_output value="waitingamount.csv"/>
            <travel_time_csv_file_output value="traveltime.csv"/>
        </statistics_output_paramemters>  
    </supply>                                      
            
    <!-- config specific to preday simulator -->
    <preday>
        <!-- Control variable to run simulation, calibration or logsum computation. Admissible values are "simulation", "calibration", "logsum" and "lt_logsum" -->
        <run_mode value="logsum"/>
        <!-- Number of threads to create for processing the population in-->
        <!-- the preday demand simulator -->
        <threads value="1"/>
        <!-- outputs the preday predictions as activity schedule in CSV format if enabled with simulation run_mode -->
        <output_activity_schedule enabled="true"/>
        <!-- outputs the preday's predicted tours and stops to mongodb if enabled -->
        <output_predictions enabled="true"/>
        <!-- prints person ids and tour details in console for each person if enabled -->
        <console_output enabled="true"/>
        
        <!-- Data source for population and logsums. 
         Admissible values for source are 'pgsql' and 'mongodb' which points to LT database or local MongoDB respectively. 
         Value 'mongodb' is default for source. 
         Database and credentials attributes are required only for pgsql source.
         Valid ids from the list constructs list have to be specified -->
        <population source="pgsql" database="fm_remote_lt" credential="lt_cred"/>
        <logsum source="pgsql" database="fm_remote" credential="fm_remote"/>
            
        <model_scripts path="scripts/lua/mid/behavior-models/" format="lua">
            <script name="logit" file="logit.lua"/> <!--The main logit code for multinomial and nested logit models-->
            <script name="dpb" file="dpb.lua"/> <!-- Day Pattern Binary -->
            <script name="dpt" file="dpt.lua"/> <!-- Day Pattern Tours -->
            <script name="dps" file="dps.lua"/> <!-- Day Pattern Stops -->
            <script name="ntw" file="ntw.lua"/> <!-- Number Of Tours Work -->
            <script name="nte" file="nte.lua"/> <!-- Number Of Tours Education -->
            <script name="nts" file="nts.lua"/> <!--Number Of Tours Shopping -->
            <script name="nto" file="nto.lua"/> <!--Number Of Tours Others -->
            <script name="uw" file="tuw.lua"/> <!--Attend Usual Work -->
            <script name="tmw" file="tmw.lua"/> <!--Tour Mode Work -->
            <script name="tme" file="tme.lua"/> <!--Tour Mode Education -->
            <script name="tmdw" file="tmdw.lua"/> <!--Tour Mode/Destination Work -->
            <script name="tmds" file="tmds.lua"/> <!--Tour Mode/Destination Shopping -->
            <script name="tmdo" file="tmdo.lua"/> <!--Tour Mode/Destination Others -->
            <script name="ttdw" file="ttdw.lua"/> <!--Tour Time Of Day Work -->
            <script name="ttdo" file="ttdo.lua"/> <!--Tour Time Of Day Others -->
            <script name="ttde" file="ttde.lua"/> <!--Tour Time Of Day Education -->
            <script name="tws" file="tws.lua"/> <!--Work Based Sub-Tours -->
            <script name="stmd" file="stmd.lua"/> <!--Work Based Sub-Tours Mode/Destination-->
            <script name="sttd" file="sttd.lua"/> <!--Work Based Sub-Tours Time Of Day-->
            <script name="isg" file="isg.lua"/> <!--Intermediate Stop Generation -->
            <script name="imd" file="imd.lua"/> <!--Intermediate Stop Mode/Destination -->
            <script name="itd" file="itd.lua"/> <!--Intermediate Stop Time Of Day -->                       
        </model_scripts>
            
        <!-- Names of MongoDB database and collections -->
        <mongo_collections db_name="preday">
            <mongo_collection name="population" collection="hits12_population_updated_zones"/>
            <mongo_collection name="tcost_bus" collection="tcost_bus"/>
            <mongo_collection name="tcost_car" collection="tcost_car"/>
            <mongo_collection name="AMCosts" collection="AMCosts_2012"/>
            <mongo_collection name="OPCosts" collection="OPCosts_2012"/>
            <mongo_collection name="PMCosts" collection="PMCosts_2012"/>
            <mongo_collection name="Zone" collection="Zone_2012"/>
            <mongo_collection name="zone_node" collection="node_mtz_6AprNW_1169z"/>
            <mongo_collection name="zone_08_12" collection="map_1169_to_1092_zones"/>
            <mongo_collection name="Output_DayPattern" collection="daypattern_0815"/>
            <mongo_collection name="Output_Tour" collection="tour_0815"/>
            <mongo_collection name="Output_Activity" collection="activity_0815"/>
            <mongo_collection name="Output_SubTour" collection="wbst_0815"/>
        </mongo_collections>
            
        <calibration enabled="false">
            <!-- variables to calibrate -->
            <!-- expected csv format: variable_name,lua_file_name,initial_value,lower_limit,upper_limit -->
            <variables file="data/medium/preday_calibration_variables.csv"/>
            <!--csv providing the observed values for the statistics to compute-->
            <observed_statistics file="data/medium/preday_observed_HITS08_statistics.csv"/>
            <!-- which calibration technique to use: SPSA/WSPSA -->
            <calibration_technique value="SPSA"/>
            <!-- logsums will be recomputed every x iterations if value is set to x -->
            <logsum_computation_frequency value="5"/>
            <SPSA>
                <!-- max number of iterations that spsa must run for -->
                <iterations value="20"/>
                <!-- termination condition for spsa is (F(X_k+1) - F(X_k) <= tolerance ) where F(X) is the objective function -->
                <tolerence value="0.000001"/>
                <!-- perturbation step size for iteration k is given by c_k = c / ((1+k)^gamma) -->
                <gradient_step_size initial_value="0.1" algorithm_coefficient2="0.101"/>
                <!-- step size for iteration k is given by a_k = a / ((1+k)^alpha) -->
                <step_size initial_value="0.16" stability_constant="100" algorithm_coefficient1="0.602"/>
            </SPSA>
            <WSPSA>
                <!-- max number of iterations that spsa must run for -->
                <iterations value="20"/>
                <!-- termination condition for spsa is (F(X_k+1) - F(X_k) <= tolerance ) where F(X) is the objective function -->
                <tolerence value="0.000001"/>
                <!-- perturbation step size for iteration k is given by c_k = c / ((1+k)^gamma) -->
                <gradient_step_size initial_value="0.1" algorithm_coefficient2="0.101"/>
                <!-- step size for iteration k is given by a_k = a / ((1+k)^alpha) -->
                <step_size initial_value="0.16" stability_constant="100" algorithm_coefficient1="0.602"/>
                <!-- csv containing the weight matrix-->
                <weight_matrix file="data/medium/preday_calibration_weight_matrix.csv"/>
            </WSPSA>
            
            <!-- output file to track the statistics and parameters for every iteration of calibration -->
            <output file="preday_calibration_out.csv"/>
        </calibration>
    </preday>
</config>

