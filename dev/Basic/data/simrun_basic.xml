<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright Singapore-MIT Alliance for Research and Technology -->

<config>
    <!-- Anything in the "constructs" section is created with an ID and some structure (e.g., an object) -->
    <!-- The idea here is to allow re-using some common settings in multiple places, and to allow multiple optional -->
    <!-- items (e.g. database connections), without having to comment out the ones which are not used. -->
    <!-- Key to the idea of a construct is that if it is incorrectly specified, it is only considered to be an error if -->
    <!-- it is USED. In other words, the parser will flag it as an error, but pend that error until the construct is requested. -->
    <!-- A construct ID must be unique for its type (databases, credentials, etc.) -->
    <!-- Note that constructs can be defined and used out-of-order, since their IDs are only resolved once they are retrieved. -->
    <constructs>
        <!-- Define distributions which may be used for a variety of things. -->
        <!-- NOTE: These are not currently created or used, but should be added soon. -->
        <distributions>
            <!-- Distributions pertinent to driver reaction times -->
            <dist id="driver_react_1" type="lognormal"  mean="500"  stdev="100"/>
            <dist id="driver_react_2" type="lognormal"  mean="500"  stdev="100"/>
        </distributions>

        <!-- Various database connections, used for loading network and agent data. -->
        <!-- Note that credentials (login details) are stored in a separate construct. -->
        <databases>
            <!-- FM server connection -->
            <database id="fm_remote" dbtype="postgres">
                <host value="172.25.184.11"/>
                <port value="5432"/>
                <dbname value="SimMobility_DB"/>
            </database>
            
            <database id="fm_remote_path_choice" dbtype="postgres">
                <host value="172.25.184.11"/>
                <port value="5432"/>
                <dbname value="SimMobility_DB_Path_Choice"/>
            </database>

            <!-- Local copy of the FM server (see wiki for how to set up) -->
            <database id="fm_local" dbtype="postgres">
                <host value="localhost"/>
                <port value="5432"/>
                <dbname value="SimMobility_DB"/>
            </database>

            <database id="fm_local_lt" dbtype="postgres">
                <host value="localhost"/>
                <port value="5432"/>
                <dbname value="sim_mob_lt"/>
            </database>
            
            <!-- Variables stores for preday demand simulator-->
            <database id="fm_mongo" dbtype="mongodb">
                <host value="localhost"/>
                <port value="27017"/>
                <dbname value="mydb"/>
            </database>

        </databases>
    
        <!-- Groupings of stored procedures, used for loading network data from certain tables. -->
        <db_proc_groups>
            <!-- The small Bugis-area network -->
            <proc_map id="bugis_small" format="aimsun">
                <mapping name="node" procedure="get_node()"/>
                <mapping name="section" procedure="get_section()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing()"/>
                <mapping name="lane" procedure="get_lanes()"/>
                <mapping name="turning" procedure="get_lane_connector()"/>
                <mapping name="polyline" procedure="get_section_polyline()"/>
                <mapping name="tripchain" procedure="get_tripchains()"/>
                <mapping name="busstop" procedure="get_bus_stop()"/>
                <mapping name="signal" procedure="get_traffic_signals_bugis()"/>
                <mapping name="phase" procedure="get_lane_connector_phases()"/>
            </proc_map>
            
            <!-- The small Bugis-area network -->
            <proc_map id="bugis_small_custom" format="aimsun">
                <mapping name="node" procedure="get_node()"/>
                <mapping name="section" procedure="get_section()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing()"/>
                <mapping name="lane" procedure="get_lanes()"/>
                <mapping name="turning" procedure="get_lane_connector()"/>
                <mapping name="polyline" procedure="get_section_polyline()"/>
                <mapping name="tripchain" procedure="get_tripchains()"/>
                <mapping name="busstop" procedure="get_bus_stop()"/>
                <mapping name="signal" procedure="get_traffic_signals_bugis()"/>
                <mapping name="phase" procedure="get_lane_connector_phases()"/>
            </proc_map>
            
            <!-- The small Marina Bay network -->
            <proc_map id="marina_bay" format="aimsun">
                <mapping name="node" procedure="get_node_marina_bay()"/>
                <mapping name="section" procedure="get_section_marina_bay()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing_sg()"/>
                <mapping name="lane" procedure=""/>
                <mapping name="turning" procedure="get_lane_connector_marina_bay()"/>
                <mapping name="polyline" procedure="get_section_polyline_marina_bay()"/>
                <mapping name="tripchain" procedure="Not needed"/>
                <mapping name="busstop" procedure=""/>
                <mapping name="signal" procedure="get_traffic_signals_marina_bay()"/>
                <mapping name="phase" procedure="get_lane_connector_phases_marina_bay()"/>
            </proc_map>

            <!-- For testing purposes, if you want to control which signals are  --> 
            <!-- created, then use this proc_map to disable the automatic signal -->  
            <!-- creation via database lookup, and add entries in the top-level -->  
            <!-- <signals> section below.  Note that this feature will be removed -->  
            <!-- soon and without notice. After that, only signals found in the -->  
            <!-- database or in XML files will be created. --> 
            <proc_map id="bugis_small_nosignal" format="aimsun">
                <mapping name="node" procedure="get_node()"/>
                <mapping name="section" procedure="get_section()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing()"/>
                <mapping name="lane" procedure="get_lanes()"/>
                <mapping name="turning" procedure="get_lane_connector()"/>
                <mapping name="polyline" procedure="get_section_polyline()"/>
                <mapping name="tripchain" procedure="get_tripchains()"/>
                <mapping name="busstop" procedure="get_bus_stop()"/>
                <mapping name="signal" procedure=""/>
                <mapping name="phase" procedure="get_lane_connector_phases()"/>
            </proc_map>

            <!-- The large Bugis-area network -->
            <proc_map id="bugis_large" format="aimsun">
                <mapping name="node" procedure="get_node_bugis()"/>
                <mapping name="section" procedure="get_section_bugis()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing()"/>
                <mapping name="lane" procedure="get_lanes_bugis()"/>
                <mapping name="turning" procedure="get_lane_connector_bugis()"/>
                <mapping name="polyline" procedure="get_section_polyline_bugis()"/>
                <mapping name="tripchain" procedure="get_tripchains()"/>
                <mapping name="busstop" procedure="get_bus_stop_bugis()"/>
                <mapping name="signal" procedure="get_traffic_signals_bugis()"/>
                <mapping name="phase" procedure="get_lane_connector_phases()"/>
                <!-- These public-transit mappings tested with the large-bugis network. -->
                <!-- "pt_bus_dispatch_freq" store some bus dispatching schedules for buses -->
                <!-- "pt_bus_routes" store some bus routes for buses -->
                <!-- "pt_bus_stops" store some bus stops for buses -->
                <mapping name="pt_bus_dispatch_freq" procedure="get_pt_bus_dispatch_freq('saturday')"/>
                <mapping name="pt_bus_routes" procedure="get_pt_bus_routes()"/>
                <mapping name="pt_bus_stops" procedure="get_pt_bus_stops()"/>
            </proc_map>
                
                
            <!-- Entire singapore network -->
            <proc_map id="singapore" format="aimsun">
                <mapping name="node" procedure="get_node_sg()"/>
                <mapping name="section" procedure="get_section_sg()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing_bugis()"/>
                <mapping name="lane" procedure="get_lanes_bugis()"/>
                <mapping name="turning" procedure="get_lane_connector_bugis()"/>
                <mapping name="polyline" procedure="get_section_polyline_sg2()"/>
                <mapping name="tripchain" procedure="get_preday_scaled_car_tripchains()"/>
                <mapping name="busstop" procedure="get_bus_stop()"/>
                <mapping name="signal" procedure="get_traffic_signals_bugis()"/>
                <mapping name="phase" procedure="get_lane_connector_phases_bugis()"/>
                <mapping name="segment_type" procedure="get_segment_type()"/>
                <mapping name="node_type" procedure="get_node_type()"/>
            </proc_map>
                 
            <!-- entire Singapore network with HITS trip chains -->
            <proc_map id="HITS" format="aimsun">
                <mapping name="node" procedure="get_node_sg()"/>
                <mapping name="section" procedure="get_section_sg()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing_bugis()"/>
                <mapping name="lane" procedure="get_lanes_bugis()"/>
                <mapping name="turning" procedure="get_lane_connector_bugis()"/>
                <mapping name="polyline" procedure="get_section_polyline_sg2()"/>
                <mapping name="tripchain" procedure="get_hits_tripchains()"/>
                <mapping name="busstop" procedure="get_bus_stop()"/>
                <mapping name="signal" procedure="get_traffic_signals_bugis()"/>
                <mapping name="phase" procedure="get_lane_connector_phases_BUGIS()"/>
                <!-- These public-transit mappings tested with the whole Singapore network. -->
                <!-- "pt_bus_dispatch_freq" store some bus dispatching schedules for buses -->
                <!-- "pt_bus_routes" store some bus routes for buses -->
                <!-- "pt_bus_stops" store some bus stops for buses -->
                <mapping name="pt_bus_dispatch_freq" procedure="get_pt_bus_dispatch_freq('saturday')"/>
                <mapping name="pt_bus_routes" procedure="get_pt_bus_routes()"/>
                <mapping name="pt_bus_stops" procedure="get_pt_bus_stops()"/>
            </proc_map>

            <!-- Entire singapore network with scaled activity_schedules from preday-->
            <proc_map id="withinday" format="aimsun">
                <mapping name="node" procedure="get_node_sg()"/>
                <mapping name="section" procedure="get_section_sg()"/>
                <mapping name="turning" procedure="get_lane_connector_bugis()"/>
                <mapping name="day_activity_schedule" procedure="get_persons_between"/>
            </proc_map>
        </db_proc_groups>
    
        <!-- Login credentials to be used for database connections. These can be plaintext, -->
        <!-- file-based, and possibly even signed. Note that invalid credentials will simply be ignored. -->
        <credentials>
            <!-- A file-based credential loads credentials from a JSON file with its own special format. -->
            <!-- Multiple files can be listed, and they will be tried in order until one is found. -->
            <!-- If the first existing file has an error, parsing will NOT continue to the next file. -->
            <!-- The actual credentials file looks something like this: -->
            <!-- 
            {
                "username" : "postgres",
                "password" : "AbCdEfG=",
                "algorithm" : ["clear","xor23","base64","cipher"]
            }
            -->
            <!-- Here, the username is stored in cleartext. The password is stored according to the algorithm listed. -->
            <!-- So in this example, the "clear" text is first "xor23"'d, then "base64" encoded, then finally we arrive at the "cipher" text. -->
            <!-- If you  just want to store the password in cleartext, use "algorithm" : ["clear","cipher"] -->
            <file-based-credential id="fm_remote">
                <file path="private/fm_remote.cred.txt"/>
                <file path="/usr/share/simmobility/credentials/fm_remote.cred.txt"/> <!-- For example -->
            </file-based-credential>
          
            <file-based-credential id="fm_local">
                <file path="private/fm_local.cred.txt"/>
            </file-based-credential>
      
            <file-based-credential id="fm_remote_path_choice">
                <file path="private/fm_remote.cred.txt"/>
                <file path="/usr/share/simmobility/credentials/fm_remote.cred.txt"/> <!-- For example -->
            </file-based-credential>
      
            <!-- Plaintext credentials can be used to store the password verbatim. -->
            <!-- BE CAREFUL with these; remember that EVERYONE can see them: -->
            <!--    1) Don't put any passwords here that you care about (e.g., email accounts) -->
            <!--    2) Don't put any passwords to databases on the FM server. -->
            <plaintext-credential id="fm_local_yaojin">
                <username value="postgres"/>
                <password value="5M_S1mM0bility"/>
            </plaintext-credential>

            <plaintext-credential id="harish_cred">
                <username value="postgres"/>
                <password value="secret"/>
            </plaintext-credential>
        </credentials>
    </constructs>

    <!-- System configuration properties -->
    <system>
        <!-- Properties for a single simulation run -->
        <!-- Total runtime need not be a multiple of the base granularity -->
        <!-- (but will be rounded down.) -->
        <simulation>
            <base_granularity   value="5"   units="seconds" />
            <total_runtime      value="245"      units="minutes" />
            <total_warmup       value="10"     units="seconds" />
            
            <start_time         value="03:00:00"/>
            <pathset_traveltime_save_table value="pathset"/>
            
            <!-- Implementation to use for the Aura Manager. -->
            <!-- Values include: simtree, rdu, rstar (default) -->
            <aura_manager_impl value="rstar"/>
            
            <!-- Strategy for adding new Agents to Workers. -->
            <!-- "roundrobin" assigns in order. (default) -->
            <!-- "smallest" assigns to the Worker with the smallest Agent count. -->
            <!--  Note that "smallest" does not appear to offer any benefit over "roundrobin" -->
            <workgroup_assignment value="roundrobin"/>
                        
            <!-- Properties for SimMobility-MPI -->
            <partitioning_solution_id   value="1"    units="unit" />
            
            <!-- Order in which agents are to be loaded into the simulation -->
            <!-- Values include: database, drivers, pedestrians, passenger, xml-tripchains -->

            <load_agents order="database"/>

            
            <!-- Optional. At what value do we start counting for automatically -->
            <!-- generated Agent IDs? Set to a high value if you want to avoid  -->
            <!-- ID collisions when manually specifying Agent IDs in the config file. -->
            <!-- Setting this to zero has the same effect as leaving it out; the default value is zero. -->
            <auto_id_start value="0"/>
            
            <!-- Optional. How we enforce mutual exclusion. Can be "buffered" (the default) or "locked" -->
            <mutex_enforcement    strategy="buffered" />

            <!--  Commsim (communication) settings -->
            <commsim enabled="false"> <!-- If false, the Broker is never added, so no commsim activities take place. -->
                <min_clients value="1"/> <!-- Sim Mobility will hold on time tick 1 until this many clients connect. -->
                <io_threads value="2"/> <!-- The number of threads to use for boost's io_service (for reading from Android clients). -->
                <hold_tick value="500"/> <!-- Which tick to enforce the "min_clients" restriction at. -->
                <use_ns3 value="true"/>  <!-- Use ns-3 to route network traffice between agents? If not, opaque messages are dispatched immediately. -->
            </commsim>

            <reacTime_distributionType1      value="1" /> <!-- 0 is normal distribution, 1 is log normal-->
            <reacTime_distributionType2      value="1" />
            <reacTime_mean1      value="500" />
            <reacTime_mean2      value="500" />
            <reacTime_standardDev1    value="100" />
            <reacTime_standardDev2    value="100" />
        </simulation>
                
        <!-- List of all Worker types and their properties. -->
        <!-- granularity of each component must be a multiple of the "base" granularity -->
        <workers>
            <person count="1" granularity="5 seconds"/> <!-- Person agents (with Roles) -->
            <signal count="0" granularity="5 seconds"/> <!-- Traffic signals -->
            <communication count="0" granularity="5 seconds"/>  <!-- Communication simulator -->
        </workers>
        
        <!-- Setting to true should push everything onto one thread. -->
        <!-- NOTE: Setting to true will cause the synchronization barriers not to be used. -->
        <!-- Be careful about any functional logic which depends on the barriers -->
        <single_threaded value="false"/>
        
        <!-- Setting to true will combine all out* files into one out.txt and delete the out* files. -->
        <!-- Note that this may take quite some time to complete. -->
        <!-- NOTE: We currently don't delete the source files; this seems un-needed. -->
        <merge_log_files value="true"/>
        
        <!-- Setting to "database" will load the road network from the database. By default we load from "xml". -->
        <!-- NOTE: This is fairly confusing; later we'll make it easier for different users to -->
        <!--       maintain their own configurations. -->
        <network_source value="database"/>
        
        <!-- If loading from XML, which input file? Default (or blank string) will force private/SimMobilityInput.xml -->
        <!-- If Writing XML, which output file? Default (or blank string) don't write at all -->
        <!-- This only has an effect if network_source is set to "xml" -->
        <network_xml_file_input value=""/>
        <network_xml_file_output value=""/>
    
        <!-- If loading from the database, which database, proc_map, and credentials are used? -->
        <!-- <network_database database="fm_local" credentials="vahid_cred" proc_map="bugis_small"/> -->
        <!-- <network_database database="fm_remote_path_choice" credentials="fm_remote_path_choice" proc_map="HITS"/> -->
        <network_database database="fm_local" credentials="harish_cred" proc_map="withinday"/>
        <!--<network_database database="fm_remote" credentials="fm_remote" proc_map="bugis_large"/>-->
        
        <!-- Where to find our various schema files. -->
        <!-- Overrides xsi:schemaLocation in the files themselves. -->
        <!-- Note that absolute paths are allowed, and that relative paths are relative to the current working directory. -->
        <xsd_schema_files>
            <!-- Where to find our Road Network schema files. -->
            <!-- The first valid path is used. -->
            <road_network>
                <option value="shared/geospatial/xmlLoader/geo10.xsd"/>     <!-- Running from dev/Basic or from Eclipse -->
                <option value="../shared/geospatial/xmlLoader/geo10.xsd"/>  <!-- Running from dev/Basic/Debug or dev/Basic/Release -->
            </road_network>
        </xsd_schema_files>
        
        <!-- The new parser will simply load everything in the "generic_props" section into "SystemParams.genericProps".  -->
        <!-- In other words, you DO NOT need to update the parser just to add a simple string-based configuration parameter to -->
        <!-- the config file. This is intended to be used for new or temporary features. -->
        <generic_props>
            <!-- The current control strategy for buses. Can be "headway_based", "evenheadway_based", "hybrid_based", or (default) "no_control" -->
            <property key="busline_control_type" value="headway_based"/>
            
            <!-- Default number of buses that can be accommodated in a bus stop -->
            <!-- This attribute must ideally come for each bus stop from the database -->
            <!-- Since we currently do  not have this data, we use a generic property -->
            <property key="buses_per_stop" value="2"/>
            
            <!-- Used by SimTree. -->
            <!-- property key="simtree_pattern_file_1" value="shared/spatial_trees/simtree/density_pattern_sg_auto_study"/ -->
            <!-- property key="simtree_pattern_file_2" value="shared/spatial_trees/simtree/density_pattern_sg_20"/ -->
        </generic_props>
    </system>

    
    <!-- FMOD controller settings. This is for FMOD extention -->
    <fmodcontroller enabled="false">
        <ip_address value="127.0.0.1"/>
        <port value="9000"/>
        <update_time_ms value="500"/>

        <map_file value="cityhall/cityhall.osm"/>

        <blocking_time_sec value="5"/>
    </fmodcontroller>  
        
    <incidentsData enabled="false">
        <incident id="0" visibility="4000" segment="40200" position="60" cap_factor="1.0" start_time="08:30:00" duration="00:32:00" length="1000" compliance="50" accessibility="50" > 
            <lane laneId="0" speedLimitFactor="0"/>
            <lane laneId="1" speedLimitFactor="0"/>
            <lane laneId="2" speedLimitFactor="20"/>
        </incident>
    </incidentsData>
    
    <!-- This is data only for "schedule_based", "evenheadway_based" or "hybrid_based" control strategies -->
    <!-- each item store the scheduled offset arriving time(ms) and offset departure time(ms) at some bus stops -->
    <scheduledTimes>
        <stop offsetAT="11600" offsetDT="17600" />
        <stop offsetAT="74800" offsetDT="80800" />
        <stop offsetAT="101000" offsetDT="107100" />
        <stop offsetAT="124000" offsetDT="130000" />       
        <stop offsetAT="174300" offsetDT="180300" />    
        <stop offsetAT="254400" offsetDT="260400" />
        <stop offsetAT="287800" offsetDT="293800" />
        <stop offsetAT="313500" offsetDT="319500" />       
        <stop offsetAT="376100" offsetDT="382100" />    
        <stop offsetAT="403600" offsetDT="409600" />        
    </scheduledTimes>
    
    
    <!--Driver start locations-->
    <!--3 drivers start at the N/S/E/W and each turns a different way-->
    <!--Center node is: 37218351,14335255-->
    <!--North node is: 37241080,14362955-->
    <!--South node is: 37261496,14346008-->
    <!--East node is: 37270984,14378959-->
    <!--West node is: 37227139,14327875-->
    <drivers>
        <!-- These test the short term -->
        <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0" lane="2"/>
        <driver originPos="37245506,14359431" destPos="37254988,14351820" time="0" lane="1"/>
        <driver originPos="37232503,14369823" destPos="37240057,14318241" time="0"/>
        <driver originPos="37240057,14318241" destPos="37232503,14369823" time="0" lane="3"/>
        <driver originPos="37227139,14327875" destPos="37270984,14378959" time="1000" lane="2"/>
        <driver originPos="37245506,14359431" destPos="37254988,14351820" time="1000" lane="1"/>
        <driver originPos="37232503,14369823" destPos="37240057,14318241" time="1000"/>
        <driver originPos="37240057,14318241" destPos="37232503,14369823" time="1000" lane="3"/>
                <driver originPos="37227139,14327875" destPos="37270984,14378959" time="2000" lane="2"/>
        <driver originPos="37245506,14359431" destPos="37254988,14351820" time="3000" lane="1"/>
        <driver originPos="37232503,14369823" destPos="37240057,14318241" time="3000"/>
        <driver originPos="37240057,14318241" destPos="37232503,14369823" time="3000" lane="3"/>
         <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0" lane="2"/>
        <driver originPos="37245506,14359431" destPos="37254988,14351820" time="0" lane="1"/>
        <driver originPos="37232503,14369823" destPos="37240057,14318241" time="0"/>
        <driver originPos="37240057,14318241" destPos="37232503,14369823" time="0" lane="3"/>
        <driver originPos="37227139,14327875" destPos="37270984,14378959" time="1000" lane="2"/>
        <driver originPos="37245506,14359431" destPos="37254988,14351820" time="1000" lane="1"/>
        <driver originPos="37232503,14369823" destPos="37240057,14318241" time="1000"/>
        <driver originPos="37240057,14318241" destPos="37232503,14369823" time="1000" lane="3"/>
                <driver originPos="37227139,14327875" destPos="37270984,14378959" time="2000" lane="2"/>
        <driver originPos="37245506,14359431" destPos="37254988,14351820" time="3000" lane="1"/>
        <driver originPos="37232503,14369823" destPos="37240057,14318241" time="3000"/>
        <driver originPos="37240057,14318241" destPos="37232503,14369823" time="3000" lane="3"/>
         <driver originPos="37227139,14327875" destPos="37270984,14378959" time="10000" lane="2"/>
        <driver originPos="37245506,14359431" destPos="37254988,14351820" time="10000" lane="1"/>
        <driver originPos="37232503,14369823" destPos="37240057,14318241" time="10000"/>
        <driver originPos="37240057,14318241" destPos="37232503,14369823" time="10000" lane="3"/>
        <driver originPos="37227139,14327875" destPos="37270984,14378959" time="10000" lane="2"/>
        <driver originPos="37245506,14359431" destPos="37254988,14351820" time="10000" lane="1"/>
        <driver originPos="37232503,14369823" destPos="37240057,14318241" time="10000"/>
        <driver originPos="37240057,14318241" destPos="37232503,14369823" time="10000" lane="3"/>
                <driver originPos="37227139,14327875" destPos="37270984,14378959" time="20000" lane="2"/>
        <driver originPos="37245506,14359431" destPos="37254988,14351820" time="30000" lane="1"/>
        <driver originPos="37232503,14369823" destPos="37240057,14318241" time="30000"/>
        <driver originPos="37240057,14318241" destPos="37232503,14369823" time="30000" lane="3"/>
    </drivers> 
    
    <pedestrians> 
        <!--Pedestrian start locations-->
        <!--group of 3-->     
        <!--group of 5-->
        <pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="0"/>
        <pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="0"/>
        <pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="1000"/> 
    </pedestrians>
    
    <!-- Bus Drivers. This is just for testing; currently a lot of Bus information is simply generated. -->
    <!-- Note that Buses are loaded with "drivers", since I don't want to add a new tag for testing data -->
    <busdrivers>
    </busdrivers>
    
    <!-- To Enable Buses: make sure the following stored procedures in your <proc_map> not empty and valid -->
    <!-- 1. "pt_bus_dispatch_freq" -->
    <!-- 2. "pt_bus_routes" -->
    <!-- 3. "pt_bus_stops" -->
    <!-- With the above three procedures present and valid, enable buses with "<buscontroller time="0" />" in the <buscontrollers> -->
    <!-- To Disable Buses: user can simply comment the buscontroller in the <buscontrollers> -->
    <buscontrollers>
        <!--buscontroller time="0" /-->    
    </buscontrollers>
    
<!--<signals> -->
    <!-- Any of the following signals will not be created if it has already been created by -->
    <!-- the 'signal' stored procedure above.  Note that this <signals> section will be -->
    <!-- removed soon and without notice.  After that, only signals found in the database -->
    <!-- will be created. -->
<!--<signal xpos="37250760" ypos="14355120"/>
    </signals> -->
              
    <!-- Long Term Configurations parameters -->
    <longTermParams enabled ="true">
    	<days value="365"/>
    	<maxIterations value="1"/>
    	<workers value="8"/>
    	<tickStep value="1"/>
    	<developerModel enabled="true">
    		<timeInterval value="30"/>
    	</developerModel>
        <housingModel enabled="true"> 
            <timeOnMarket value="30"/>
            <timeInterval value="7"/>
            <numberOfHouseholds value="-1"/>
	        <numberOfUnits	value="-1"/>
	        <numberOfVacantUnits value="-1"/> 
        </housingModel>
    </longTermParams>  
    
</config>

