<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright Singapore-MIT Alliance for Research and Technology -->

<!-- This config file was originally designed to test loading network geometry via AIMSUN tables. -->
<!-- Somehow, it ended up being the basis for every test we run. -->
<config>
    <!-- Anything in the "constructs" section is created with an ID and some structure (e.g., an object) -->
    <!-- The idea here is to allow re-using some common settings in multiple places, and to allow multiple optional -->
    <!-- items (e.g. database connections), withouh having to comment out the ones which are not used. -->
    <!-- Key to the idea of a construct is that if it is incorrectly specified, it is only considered to be an error if -->
    <!-- it is USED. In other words, the parser will flag it as an error, but pend that error until the construct is requested. -->
    <!-- A construct ID must be unique for its type (databases, credentials, etc.) -->
    <!-- Note that constructs can be defined and used out-of-order, since their IDs are only resolved once they are retrieved. -->
    <constructs>
        <!-- Define distributions which may be used for a variety of things. -->
	<!-- NOTE: These are not currently created or used, but should be added soon. -->
        <distributions>
            <dist id="driver_react_1" type="lognormal"  mean="500"  stdev="100"/>
            <dist id="driver_react_2" type="lognormal"  mean="500"  stdev="100"/>

            <!-- Distributions relating to passengers. -->
            <dist id="passenger_distribution_busstop" type="normal" mean="10" stdev="1"/>
        </distributions>

        <!-- Various database connections, used for loading network and agent data. -->
	<!-- Note that credentials (login details) are stored in a separate construct. -->
        <databases>
            <!-- FM server connection -->
            <database id="fm_remote" dbtype="postgres">
                <host value="172.25.184.11"/>
                <port value="5432"/>
                <dbname value="SimMobility_DB"/>
            </database>
            
            <database id="fm_remote_path_choice" dbtype="postgres">
                <host value="172.25.184.11"/>
                <port value="5432"/>
                <dbname value="SimMobility_DB_Path_Choice"/>
            </database>

            <!-- Local copy of the FM server (see wiki for how to set up) -->
            <database id="fm_local" dbtype="postgres">
                <host value="localhost"/>
                <port value="5432"/>
                <dbname value="SimMobility_DB"/>
            </database>

	    <!-- Variables stores for preday demand simulator-->
            <database id="fm_mongo" dbtype="mongodb">
                <host value="localhost"/>
                <port value="27017"/>
                <dbname value="preday"/>
            </database>

        </databases>
	
	<!-- Groupings of stored procedures, used for loading network data from certain tables. -->
        <db_proc_groups>
            <!-- The small Bugis-area network -->
            <proc_map id="bugis_small" format="aimsun">
                <mapping name="node" procedure="get_node()"/>
                <mapping name="section" procedure="get_section()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing()"/>
                <mapping name="lane" procedure="get_lanes()"/>
                <mapping name="turning" procedure="get_lane_connector()"/>
                <mapping name="polyline" procedure="get_section_polyline()"/>
                <mapping name="tripchain" procedure="get_tripchains()"/>
                <mapping name="busstop" procedure="get_bus_stop()"/>
                <mapping name="signal" procedure="get_traffic_signals_bugis()"/>
                <mapping name="phase" procedure="get_lane_connector_phases()"/>
            </proc_map>

            <!-- For testing purposes, if you want to control which signals are created, then use this proc_map to
                 disable the automatic signal creation via database lookup, and add entries in the top-level 
                 <signals> section below.  Note that this feature will be removed soon and without notice.  
                 After that, only signals found in the database or in XML files will be created. --> 
            <proc_map id="bugis_small_nosignal" format="aimsun">
                <mapping name="node" procedure="get_node()"/>
                <mapping name="section" procedure="get_section()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing()"/>
                <mapping name="lane" procedure="get_lanes()"/>
                <mapping name="turning" procedure="get_lane_connector()"/>
                <mapping name="polyline" procedure="get_section_polyline()"/>
                <mapping name="tripchain" procedure="get_tripchains()"/>
                <mapping name="busstop" procedure="get_bus_stop()"/>
                <mapping name="signal" procedure=""/>
                <mapping name="phase" procedure="get_lane_connector_phases()"/>
            </proc_map>

            <!-- The large Bugis-area network -->
            <proc_map id="bugis_large" format="aimsun">
                <mapping name="node" procedure="get_node_bugis()"/>
                <mapping name="section" procedure="get_section_bugis()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing()"/>
                <mapping name="lane" procedure="get_lanes_bugis()"/>
                <mapping name="turning" procedure="get_lane_connector_bugis()"/>
                <mapping name="polyline" procedure="get_section_polyline_bugis()"/>
                <mapping name="tripchain" procedure="get_trip_chains()"/>
                <mapping name="signal" procedure="get_traffic_signals()"/>
                <mapping name="phase" procedure="get_lane_connector_phases()"/>
		
		<!-- These public-transit mappings have currently only been tested with the large-bugis network. -->
                <mapping name="bus_schedule" procedure="get_bus_schedule()"/>
                <mapping name="pt_bus_dispatch_freq" procedure="get_pt_bus_dispatch_freq('saturday')"/>
                <mapping name="pt_bus_routes" procedure="get_pt_bus_routes()"/>
                <mapping name="pt_bus_stops" procedure="get_pt_bus_stops()"/>
                <mapping name="busstop" procedure="get_bus_stop_bugis()"/>
            </proc_map>
                
            <!-- The large Bugis-area network -->
            <proc_map id="HITS" format="aimsun">
                <mapping name="node" procedure="get_node_sg()"/>
                <mapping name="section" procedure="get_section_sg()"/>
                <mapping name="crossing" procedure="get_pedestrian_crossing_bugis()"/>
                <mapping name="lane" procedure="get_lanes_bugis()"/>
                <mapping name="turning" procedure="get_lane_connector_bugis()"/>
                <mapping name="polyline" procedure="get_section_polyline_sg2()"/>
                <mapping name="tripchain" procedure="get_hits_tripchains()"/>
                <mapping name="signal" procedure="get_traffic_signals_bugis()"/>
                <mapping name="phase" procedure="get_lane_connector_phases_BUGIS()"/>
		
		<!-- These public-transit mappings have currently only been tested with the large-bugis network. -->
                <mapping name="bus_schedule" procedure="get_bus_schedule()"/>
                <mapping name="pt_bus_dispatch_freq" procedure="get_pt_bus_dispatch_freq('saturday')"/>
                <mapping name="pt_bus_routes" procedure="get_pt_bus_routes()"/>
                <mapping name="pt_bus_stops" procedure="get_pt_bus_stops()"/>
                <mapping name="busstop" procedure="get_bus_stop()"/>
            </proc_map>

            <!-- Preday demand -->   	
            <proc_map id="preday" format="long-term">
                <mapping name="population" procedure="get_population()"/>
		<mapping name="landuse" procedure="get_landuse()"/>
            </proc_map>
        </db_proc_groups>
	
	<!-- Login credentials to be used for database connections. These can be plaintext, -->
	<!-- file-based, and possibly even signed. Note that invalid credentials will simply be ignored. -->
	<credentials>
	  <!-- A file-based credential loads credentials from a JSON file with its own special format. -->
	  <!-- Multiple files can be listed, and they will be tried in order until one is found. -->
	  <!-- If the first existing file has an error, parsing will NOT continue to the next file. -->
	  <!-- The actual credentials file looks something like this: -->
	  <!-- 
                  {
                    "username" : "postgres",
		    "password" : "AbCdEfG=",
		    "algorithm" : ["clear","xor23","base64","cipher"]
		  }
          -->
	  <!-- Here, the username is stored in cleartext. The password is stored according to the algorithm listed. -->
	  <!-- So in this example, the "clear" text is first "xor23"'d, then "base64" encoded, then finally we arrive at the "cipher" text. -->
	  <!-- If you  just want to store the password in cleartext, use "algorithm" : ["clear","cipher"] -->
	  <file-based-credential id="fm_remote">
	    <file path="private/fm_remote.cred.txt"/>
	    <file path="/usr/share/simmobility/credentials/fm_remote.cred.txt"/> <!-- For example -->
	  </file-based-credential>
	  
	  <file-based-credential id="fm_remote_path_choice">
	    <file path="private/fm_remote.cred.txt"/>
	    <file path="/usr/share/simmobility/credentials/fm_remote.cred.txt"/> <!-- For example -->
	  </file-based-credential>
	  
	  <!-- Plaintext credentials can be used to store the password verbatim. -->
	  <!-- BE CAREFUL with these; remember that EVERYONE can see them: -->
	  <!--    1) Don't put any passwords here that you care about (e.g., email accounts) -->
	  <!--    2) Don't put any passwords to databases on the FM server. -->
	  <plaintext-credential id="fm_local_seth">
	    <username value="seth"/>
	    <password value="some_password"/>
	  </plaintext-credential>

	  <plaintext-credential id="harish_cred">
            <username value="postgres"/>
            <password value="secret"/>
          </plaintext-credential>
	</credentials>
	
	<!--File names for any non-C++ scripts to be executed during simulation -->
	<external_scripts id="preday" path="scripts/lua/mid/behavior-models/" format="lua">
	  <script name="dp" file="dp.lua"/> <!-- Day Pattern -->
	  <script name="ntw" file="ntw.lua"/> <!-- Number Of Tours Work -->
	  <script name="nte" file="nte.lua"/> <!-- Number Of Tours Education -->
	  <script name="nts" file="nts.lua"/> <!--Number Of Tours Shopping -->
	  <script name="nto" file="nto.lua"/> <!--Number Of Tours Others -->
	  <script name="uw" file="uw.lua"/> <!--Attend Usual Work -->
	  <script name="tmw" file="tmw.lua"/> <!--Tour Mode Work -->
	  <script name="tme" file="tme.lua"/> <!--Tour Mode Education -->
	  <script name="tmdw" file="tmdw.lua"/> <!--Tour Mode/Destination Work -->
	  <script name="tmds" file="tmds.lua"/> <!--Tour Mode/Destination Shopping -->
	  <script name="tmdo" file="tmdo.lua"/> <!--Tour Mode/Destination Others -->
	  <script name="tws" file="tws.lua"/> <!--Work Based Sub-Tours -->
	  <script name="ttdw" file="ttdw.lua"/> <!--Tour Time Of Day Work -->
	  <script name="ttdo" file="ttdo.lua"/> <!--Tour Time Of Day Others -->
	  <script name="ttde" file="ttde.lua"/> <!--Tour Time Of Day Education -->
	  <script name="isg" file="isg.lua"/> <!--Intermediate Stop Generation -->
	  <script name="imd" file="imd.lua"/> <!--Intermediate Stop Mode/Destination -->
	  <script name="itd" file="itd.lua"/> <!--Intermediate Stop Time Of Day -->
	</external_scripts> 
	
    </constructs>


    <!-- System configuration properties -->
    <system>
        <!-- Properties for a single simulation run -->
        <!-- Total runtime need not be a multiple of the base granularity -->
        <!-- (but will be rounded down.) -->
        <simulation>
            <base_granularity   value="100"   units="ms" />
            <total_runtime      value="2"      units="minutes" />
            <total_warmup       value="10"     units="seconds" />
            
            <start_time         value="08:00:00"/>
            
            <!-- Implementation to use for the Aura Manager. -->
            <!-- Values include: simtree, rdu, rstar (default) -->
            <aura_manager_impl value="rstar"/>
            
            <!-- Strategy for adding new Agents to Workers. -->
            <!-- "roundrobin" assigns in order. (default) -->
            <!-- "smallest" assigns to the Worker with the smallest Agent count. -->
            <!--  Note that "smallest" does not appear to offer any benefit over "roundrobin" -->
            <workgroup_assignment value="roundrobin"/>
                        
            <!-- Properties for SimMobility-MPI -->
            <partitioning_solution_id   value="1"	units="unit" />
            
            <!--  <load_agents order="database drivers pedestrians"/> -->
            <load_agents order="drivers pedestrians"/>
            
            <!-- Optional. At what value do we start counting for automatically -->
            <!-- generated Agent IDs? Set to a high value if you want to avoid  -->
            <!-- ID collisions when manually specifying Agent IDs in the config file. -->
            <!-- Setting this to zero has the same effect as leaving it out; the default value is zero. -->
            <auto_id_start value="0"/>
            
            <!-- Optional. How we enforce mutual exclusion. Can be "buffered" (the default) or "locked" -->
            <mutex_enforcement    strategy="buffered" />
        	<communication enabled="yes">
        		<android_testbed type="android-ns3" enabled="yes"/> <!--currently: type="android-only" and "android-ns3" -->
        	</communication>

		<!--  These don't seem to do anything. ~Seth -->
		<!--   		    <communication_simulator value="yes"/> -->
		<!--            <reacTime_LeadingVehicle      value="1500"      units="ms" /> -->
		<!--            <reacTime_SubjectVehicle      value="1500"      units="ms" /> -->
		<!--            <reacTime_Gap      value="1500"      units="ms" /> -->

            <reacTime_distributionType1      value="1" /> <!-- 0 is normal distribution, 1 is log normal-->
            <reacTime_distributionType2      value="1" />
            <reacTime_mean1      value="500" />
            <reacTime_mean2      value="500" />
            <reacTime_standardDev1    value="100" />
            <reacTime_standardDev2    value="100" />
            
            <passenger_distribution_busstop      value="0" /> <!-- 0 is normal distribution, 1 is log normal-->
            <passenger_mean_busstop      value="10" />
            <passenger_standardDev_busstop    value="2" />
            <passenger_percent_boarding value="100"/>
            <passenger_percent_alighting value="40"/>
            <passenger_min_uniform_distribution value="40"/>
            <passenger_max_uniform_distribution value="60"/>
        </simulation>
        
        <!-- Time granularities for each component -->
        <!-- Each must be a multiple of the "base" granularity -->
<!--         <granularities>
            <person  value="100"   units="ms" /> 
            <signal value="1"   units="seconds" />  
            <communication  value="100"  units="ms" />  
        </granularities>-->
        
        <!-- List of all Worker types and their properties. -->
        <workers>
            <person count="2" granularity="100ms"/> <!-- Person agents (with Roles) -->
            <signal count="1" granularity="1 second"/> <!-- Traffic signals -->
        	<communication count="1" granularity="100ms"/>  <!-- Communication simulator -->
        </workers>
        
        <!-- Setting to true should push everything onto one thread. -->
        <single_threaded value="false"/>
        
        <!-- Setting to true will combine all out* files into one out.txt and delete the out* files. -->
        <!-- Note that this may take quite some time to complete. -->
        <!-- NOTE: We currently don't delete the source files; this seems un-needed. -->
        <merge_log_files value="true"/>
        
        <!-- Setting to "database" will load the road network from the database. By default we load from "xml". -->
        <!-- NOTE: This is fairly confusing; later we'll make it easier for different users to -->
        <!--       maintain their own configurations. -->
        <network_source value="database"/>
        
        <!-- If loading from XML, which file? Default (or blank string) will force private/SimMobilityInput.xml -->
        <!-- This only has an effect if network_source is set to "xml" -->
        <network_xml_file value=""/>
	
	<!-- If loading from the database, which database, proc_map, and credentials are used? -->
	<!-- <network_database database="fm_local" credentials="vahid_cred" proc_map="bugis_small"/> -->
	<!-- <network_database database="fm_remote_path_choice" credentials="fm_remote_path_choice" proc_map="HITS"/> -->
	<network_database database="fm_local" credentials="fm_local" proc_map="bugis_small"/>

        <!-- Where to find our various schema files. -->
        <!-- Overrides xsi:schemaLocation in the files themselves. -->
        <!-- Note that absolute paths are allowed, and that relative paths are relative to the current working directory. -->
        <xsd_schema_files>
            <!-- Where to find our Road Network schema files. -->
            <!-- The first valid path is used. -->
            <road_network>
                <option value="shared/geospatial/xmlLoader/geo10.xsd"/>     <!-- Running from dev/Basic or from Eclipse -->
                <option value="../shared/geospatial/xmlLoader/geo10.xsd"/>  <!-- Running from dev/Basic/Debug or dev/Basic/Release -->
            </road_network>
        </xsd_schema_files>
        
        <!-- The new parser will simply load everything in the "generic_props" section into "SystemParams.genericProps".  -->
        <!-- In other words, you DO NOT need to update the parser just to add a simple string-based configuration parameter to -->
	<!-- the config file. This is intended to be used for new or temporary features. -->
	<!-- NOTE -->
	<!-- At the moment, these are just example values; they are not read and do nothing in Sim Mobility. -->
	<!-- END NOTE -->
        <generic_props>
            <!-- The partitioning scheme used by SimMobility-MPI -->
            <!-- TODO: Valid values? -->
            <property key="partitioning_solution_id" value="1"/>

            <!-- Optional. At what value do we start counting for automatically -->
            <!-- generated Agent IDs? Set to a high value if you want to avoid  -->
            <!-- ID collisions when manually specifying Agent IDs in the config file. -->
            <!-- Setting this to zero has the same effect as leaving it out; the default value is zero. -->
            <property key="auto_id_start" value="0"/>

            <!-- Optional. How we enforce mutual exclusion. Can be "buffered" (the default) or "locked" -->
            <property key="mutex_enforcement_strategy" value="buffered"/> 

            <!-- The current control strategy for buses. Can be "headway_based", "evenheadway_based", "hybrid_based", or (default) "no_control" -->
            <property key="busline_control_type" value="headway_based"/>

            <!-- The percentage of passengers boarding and alighting at each bus stop (default 100, each.). -->
            <property key="passenger_percent_boarding" value="100"/>
            <property key="passenger_percent_alighting" value="40"/>

	    <!--Used only by mid-term simulator. Admissible values are "demand", "supply" and "demand+supply". Determines whether to run SimMobility_Medium's demand simulator or the supply simulator-->
	    <property key="mid_term_run_mode" value="demand"/> 
        </generic_props>
    </system>

    
    <!-- FMOD controller settings -->
    <fmodcontroller switch="true">
        <ipaddress value="127.0.0.1"/>
        <port value="9000"/>
        <updateTimeMS value="500"/>
        <mapfile value="cityhall/cityhall.osm"/>
        <blockingTimeSec value="5"/>
    </fmodcontroller>
    
    
    <!-- For buses (?) -->
    <!-- TODO: Are we actually using this any more? -->
    <scheduledTimes>
        <stop offsetAT="11600"  offsetDT="17600"  />
        <stop offsetAT="74800"  offsetDT="80800"  />
        <stop offsetAT="101000" offsetDT="107100" />
        <stop offsetAT="124000" offsetDT="130000" />   	
        <stop offsetAT="174300" offsetDT="180300" />	
        <stop offsetAT="254400" offsetDT="260400" />
        <stop offsetAT="287800" offsetDT="293800" />
        <stop offsetAT="313500" offsetDT="319500" />   	
        <stop offsetAT="376100" offsetDT="382100" />	
        <stop offsetAT="403600" offsetDT="409600" />		
    </scheduledTimes>
    
    
    <!--Driver start locations-->
    <!--3 drivers start at the N/S/E/W and each turns a different way-->
    <!--Center node is: 37218351,14335255-->
    <!--North node is: 37241080,14362955-->
    <!--South node is: 37261496,14346008-->
    <!--East node is: 37270984,14378959-->
    <!--West node is: 37227139,14327875-->
    <drivers>
<!-- These test the short term -->
	   	<driver originPos="37227139,14327875" destPos="37270984,14378959" time="50"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="200"/>
	<!--    <driver originPos="37270984,14378959" destPos="37227139,14327875" time="50"/>
	    <driver originPos="37270984,14378959" destPos="37227139,14327875" time="100"/>-->

<!-- These test the medium term -->
	    <!--<driver originPos="37270984,14378959" destPos="37227139,14327875" time="800"/>
	    <driver originPos="37270984,14378959" destPos="37227139,14327875" time="1000"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="1000"/>-->
	    <driver originPos="37270984,14378959" destPos="37283599,14393370" time="0"/>
	    <driver originPos="37293562,14385720" destPos="37279699,14369995" time="0"/>
	    <driver originPos="37283599,14393370" destPos="37212150,14310654" time="0"/>
	    
	    
	    <driver originPos="37270984,14378959" destPos="37227139,14327875" time="0"/>
	    <driver originPos="37270984,14378959" destPos="37227139,14327875" time="0"/>
	    <driver originPos="37270984,14378959" destPos="37227139,14327875" time="0"/>
	    <driver originPos="37270984,14378959" destPos="37227139,14327875" time="0"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>-->
	    <!--<driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/> -->

<!-- These test both -->
   	   <!-- <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>
    	<driver originPos="37270984,14378959" destPos="37227139,14327875" time="0"/>-->
	    
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>
	    
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>
	  	<driver originPos="37227139,14327875" destPos="37270984,14378959" time="0"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="4600"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="5000"/>
	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="5500"/>

	    <driver originPos="37227139,14327875" destPos="37270984,14378959" time="6000"/>


	    
	    <driver originPos="37241080,14362955" destPos="37261496,14346008" time="150"/>
	    
	    <!-- Test: start on a Uni Node, single Link -->
	    <!--driver originPos="37242841,14345362" destPos="37227139,14327875" time="0"/-->
	    
	    <!-- Test: start on a Uni Node, single Segment -->
	    <!--driver originPos="37236345,14337301" destPos="37227139,14327875" time="0"/-->
	    
	    <!-- Test: Single Segment path -->
	    <!--driver destPos="37212150,14310654" originPos="37228105,14300695" time="0"/-->
	    
	    <!-- Test: Driver that becomes a pedestrian later -->
	    <!-- First leg: Drive southwards from upper Victoria St.; cross the intersection -->
	    <!-- Second leg: Walk back along Victoria St., stopping partway up the road after the intersection. -->
	    <!--driver originPos="37255424,14360690" destPos="37246069,14349392" time="0"/-->
    
    </drivers> 
    <pedestrians> 
   		<!--Pedestrian start locations-->
	    <!--group of 3-->
	   <!--	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="0"/>
	   	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="0"/>
	   	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="0"/>-->
        
        <!--group of 5-->
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="0"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="0"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="0"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="0"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="0"/>
        <!--lone pedestrian-->
    	<!--<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="0"/>-->
        <!--group of 4-->
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="0"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="0"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="0"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="0"/>
        <!--lone pedestrian-->
    	<!--<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="15"/>-->
        <!--group of 5-->
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="15"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="15"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="15"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="15"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="15"/>
        <!--lone pedestrian-->
    	<!--<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="15"/>-->
        <!--group of 3-->
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="15"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="15"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="15"/>

    	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="30"/>
    	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="30"/>
    	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="30"/>
    	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="30"/>

    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="30"/>

    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="30"/>
    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="30"/>
    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="30"/>
    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="30"/>

    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="30"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="30"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="30"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="30"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="30"/>

    	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="45"/>

    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="45"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="45"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="45"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="45"/>
    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="45"/>

    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="45"/>
    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="45"/>
    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="45"/>

    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="45"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="45"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="45"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="45"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="45"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="45"/>

    	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="60"/>
    	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="60"/>
    	<pedestrian originPos="37254988,14351820" destPos="37245506,14359431" time="60"/>

    	<pedestrian originPos="37245506,14359431" destPos="37254988,14351820" time="60"/>

    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="60"/>
    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="60"/>
    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="60"/>
    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="60"/>
    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="60"/>
    	<pedestrian originPos="37255424,14360690" destPos="37246069,14349392" time="60"/>

    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="60"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="60"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="60"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="60"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="60"/>
    	<pedestrian originPos="37246069,14349392" destPos="37255424,14360690" time="60"/>
    	
    	<!-- Testing a Pedestrian on a slightly more complicated path -->
    	<!--pedestrian originPos="37236345,14337301" destPos="37250760,14355120" time="0"/-->
    	
    </pedestrians>
    
    <!-- Bus Drivers. This is just for testing; currently a lot of Bus information is simply generated. -->
    <!-- Note that Buses are loaded with "drivers", since I don't want to add a new tag for testing data -->
	<busdrivers>
	</busdrivers>
    
   <!-- <signals> -->
        <!-- Any of the following signals will not be created if it has already been created by
             the 'signal' stored procedure above.  Note that this <signals> section will be
             removed soon and without notice.  After that, only signals found in the database
             will be created.  -->
    <!--    <signal xpos="37250760" ypos="14355120"/>
    </signals>-->
</config>

