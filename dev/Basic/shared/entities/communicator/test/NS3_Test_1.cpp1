#include "NS3_Test_1.hpp"
//#include <boost/asio.hpp>
//#include <boost/bind.hpp>
//#include <boost/lexical_cast.hpp>
//#include <iostream>
//#include <vector>

namespace sim_mob
{

DataContainer::DataContainer():myLock(new Lock){}

void DataContainer::add(DATA_MSG_PTR value) {
	WriteLock(*myLock);
	buffer.push_back(value);
}

void DataContainer::add(std::vector<DATA_MSG_PTR> values) {
	WriteLock(*myLock);
	buffer.insert(buffer.end(), values.begin(), values.end());
}

void DataContainer::add(DataContainer & value) {
	WriteLock(*myLock);
	add(value.get());
}

void DataContainer::reset() {
	WriteLock(*myLock);
	DATA_MSG_PTR value;
	std::cout << "resetting a buffer of size " << buffer.size() << std::endl;

	BOOST_FOREACH(value, buffer)
		delete value;
	std::cout << "resetting " << std::endl;
	buffer.clear();
	std::cout << " done" << std::endl;
}

std::vector<DATA_MSG_PTR>& DataContainer::get() {
	return buffer;
}

bool DataContainer::pop(DATA_MSG_PTR & var) {
	WriteLock(*myLock);
	if (buffer.size() < 1)
		return false;
	var = buffer.front();
	buffer.erase(buffer.begin());
}

bool DataContainer::empty(){
	return buffer.empty();
}
/////////////////////////////////////////////
void ruN(boost::asio::io_service *io_service)
{
	io_service->run();
}

int fakeNS3()
{
	sim_mob::DataContainer MainReceiveBuffer;
	boost::shared_ptr<Lock> myLock;
  try
  {



    boost::asio::io_service io_service_send , io_service_receive;
    Sendserver Sendserver_(io_service_send, 2013,myLock,MainReceiveBuffer);
    Receiveserver receiveServer(io_service_receive, 2012, Sendserver_,myLock,MainReceiveBuffer);
    boost::thread sendThread(ruN,&io_service_send);
    boost::thread receiveThread(ruN,&io_service_receive);
    sendThread.join();
    receiveThread.join();
  }
  catch (std::exception& e)
  {
    std::cerr << "fakeNS3 exception=> " << e.what() << std::endl;
  }

  return 0;
}

}

int main(){	return sim_mob::fakeNS3();}
