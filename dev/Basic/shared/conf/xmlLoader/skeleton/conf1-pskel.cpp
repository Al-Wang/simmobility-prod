// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
// NOTE: Do *not* edit the -pskel.* files; they are generated automatically from the xsd file. 
//       Instead, modify the -pimpl.* files. ~Seth
//
// End prologue.

#include "conf1-pskel.hpp"

namespace sim_mob
{
  namespace conf
  {
    // model_pskel
    //

    void model_pskel::
    id_parser (::xml_schema::string_pskel& p)
    {
      this->id_parser_ = &p;
    }

    void model_pskel::
    library_parser (::xml_schema::string_pskel& p)
    {
      this->library_parser_ = &p;
    }

    void model_pskel::
    parsers (::xml_schema::string_pskel& id,
             ::xml_schema::string_pskel& library)
    {
      this->id_parser_ = &id;
      this->library_parser_ = &library;
    }

    model_pskel::
    model_pskel ()
    : id_parser_ (0),
      library_parser_ (0)
    {
    }

    // workgroup_pskel
    //

    void workgroup_pskel::
    id_parser (::xml_schema::string_pskel& p)
    {
      this->id_parser_ = &p;
    }

    void workgroup_pskel::
    workers_parser (::xml_schema::int_pskel& p)
    {
      this->workers_parser_ = &p;
    }

    void workgroup_pskel::
    parsers (::xml_schema::string_pskel& id,
             ::xml_schema::int_pskel& workers)
    {
      this->id_parser_ = &id;
      this->workers_parser_ = &workers;
    }

    workgroup_pskel::
    workgroup_pskel ()
    : id_parser_ (0),
      workers_parser_ (0)
    {
    }

    // distribution_pskel
    //

    void distribution_pskel::
    id_parser (::xml_schema::string_pskel& p)
    {
      this->id_parser_ = &p;
    }

    void distribution_pskel::
    type_parser (::xml_schema::string_pskel& p)
    {
      this->type_parser_ = &p;
    }

    void distribution_pskel::
    mean_parser (::xml_schema::int_pskel& p)
    {
      this->mean_parser_ = &p;
    }

    void distribution_pskel::
    stdev_parser (::xml_schema::int_pskel& p)
    {
      this->stdev_parser_ = &p;
    }

    void distribution_pskel::
    parsers (::xml_schema::string_pskel& id,
             ::xml_schema::string_pskel& type,
             ::xml_schema::int_pskel& mean,
             ::xml_schema::int_pskel& stdev)
    {
      this->id_parser_ = &id;
      this->type_parser_ = &type;
      this->mean_parser_ = &mean;
      this->stdev_parser_ = &stdev;
    }

    distribution_pskel::
    distribution_pskel ()
    : id_parser_ (0),
      type_parser_ (0),
      mean_parser_ (0),
      stdev_parser_ (0)
    {
    }

    // db_connection_pskel
    //

    void db_connection_pskel::
    param_parser (::sim_mob::conf::db_param_pskel& p)
    {
      this->param_parser_ = &p;
    }

    void db_connection_pskel::
    id_parser (::xml_schema::string_pskel& p)
    {
      this->id_parser_ = &p;
    }

    void db_connection_pskel::
    dbtype_parser (::xml_schema::string_pskel& p)
    {
      this->dbtype_parser_ = &p;
    }

    void db_connection_pskel::
    parsers (::sim_mob::conf::db_param_pskel& param,
             ::xml_schema::string_pskel& id,
             ::xml_schema::string_pskel& dbtype)
    {
      this->param_parser_ = &param;
      this->id_parser_ = &id;
      this->dbtype_parser_ = &dbtype;
    }

    db_connection_pskel::
    db_connection_pskel ()
    : param_parser_ (0),
      id_parser_ (0),
      dbtype_parser_ (0)
    {
    }

    // db_param_pskel
    //

    void db_param_pskel::
    name_parser (::xml_schema::string_pskel& p)
    {
      this->name_parser_ = &p;
    }

    void db_param_pskel::
    value_parser (::xml_schema::string_pskel& p)
    {
      this->value_parser_ = &p;
    }

    void db_param_pskel::
    parsers (::xml_schema::string_pskel& name,
             ::xml_schema::string_pskel& value)
    {
      this->name_parser_ = &name;
      this->value_parser_ = &value;
    }

    db_param_pskel::
    db_param_pskel ()
    : name_parser_ (0),
      value_parser_ (0)
    {
    }

    // db_proc_mapping_pskel
    //

    void db_proc_mapping_pskel::
    name_parser (::xml_schema::string_pskel& p)
    {
      this->name_parser_ = &p;
    }

    void db_proc_mapping_pskel::
    procedure_parser (::xml_schema::string_pskel& p)
    {
      this->procedure_parser_ = &p;
    }

    void db_proc_mapping_pskel::
    parsers (::xml_schema::string_pskel& name,
             ::xml_schema::string_pskel& procedure)
    {
      this->name_parser_ = &name;
      this->procedure_parser_ = &procedure;
    }

    db_proc_mapping_pskel::
    db_proc_mapping_pskel ()
    : name_parser_ (0),
      procedure_parser_ (0)
    {
    }

    // proc_map_pskel
    //

    void proc_map_pskel::
    mapping_parser (::sim_mob::conf::db_proc_mapping_pskel& p)
    {
      this->mapping_parser_ = &p;
    }

    void proc_map_pskel::
    id_parser (::xml_schema::string_pskel& p)
    {
      this->id_parser_ = &p;
    }

    void proc_map_pskel::
    format_parser (::xml_schema::string_pskel& p)
    {
      this->format_parser_ = &p;
    }

    void proc_map_pskel::
    parsers (::sim_mob::conf::db_proc_mapping_pskel& mapping,
             ::xml_schema::string_pskel& id,
             ::xml_schema::string_pskel& format)
    {
      this->mapping_parser_ = &mapping;
      this->id_parser_ = &id;
      this->format_parser_ = &format;
    }

    proc_map_pskel::
    proc_map_pskel ()
    : mapping_parser_ (0),
      id_parser_ (0),
      format_parser_ (0)
    {
    }

    // default_model_pskel
    //

    void default_model_pskel::
    type_parser (::xml_schema::string_pskel& p)
    {
      this->type_parser_ = &p;
    }

    void default_model_pskel::
    default_parser (::xml_schema::string_pskel& p)
    {
      this->default__parser_ = &p;
    }

    void default_model_pskel::
    parsers (::xml_schema::string_pskel& type,
             ::xml_schema::string_pskel& default_)
    {
      this->type_parser_ = &type;
      this->default__parser_ = &default_;
    }

    default_model_pskel::
    default_model_pskel ()
    : type_parser_ (0),
      default__parser_ (0)
    {
    }

    // workgroup_mapping_pskel
    //

    void workgroup_mapping_pskel::
    workgroup_parser (::xml_schema::string_pskel& p)
    {
      this->workgroup_parser_ = &p;
    }

    void workgroup_mapping_pskel::
    parsers (::xml_schema::string_pskel& workgroup)
    {
      this->workgroup_parser_ = &workgroup;
    }

    workgroup_mapping_pskel::
    workgroup_mapping_pskel ()
    : workgroup_parser_ (0)
    {
    }

    // gen_prop_pskel
    //

    void gen_prop_pskel::
    key_parser (::xml_schema::string_pskel& p)
    {
      this->key_parser_ = &p;
    }

    void gen_prop_pskel::
    value_parser (::xml_schema::string_pskel& p)
    {
      this->value_parser_ = &p;
    }

    void gen_prop_pskel::
    parsers (::xml_schema::string_pskel& key,
             ::xml_schema::string_pskel& value)
    {
      this->key_parser_ = &key;
      this->value_parser_ = &value;
    }

    gen_prop_pskel::
    gen_prop_pskel ()
    : key_parser_ (0),
      value_parser_ (0)
    {
    }

    // val_units_pskel
    //

    void val_units_pskel::
    value_parser (::xml_schema::int_pskel& p)
    {
      this->value_parser_ = &p;
    }

    void val_units_pskel::
    units_parser (::xml_schema::string_pskel& p)
    {
      this->units_parser_ = &p;
    }

    void val_units_pskel::
    parsers (::xml_schema::int_pskel& value,
             ::xml_schema::string_pskel& units)
    {
      this->value_parser_ = &value;
      this->units_parser_ = &units;
    }

    val_units_pskel::
    val_units_pskel ()
    : value_parser_ (0),
      units_parser_ (0)
    {
    }

    // dist_mapping_pskel
    //

    void dist_mapping_pskel::
    dist_parser (::xml_schema::string_pskel& p)
    {
      this->dist_parser_ = &p;
    }

    void dist_mapping_pskel::
    parsers (::xml_schema::string_pskel& dist)
    {
      this->dist_parser_ = &dist;
    }

    dist_mapping_pskel::
    dist_mapping_pskel ()
    : dist_parser_ (0)
    {
    }

    // database_loader_pskel
    //

    void database_loader_pskel::
    connection_parser (::xml_schema::string_pskel& p)
    {
      this->connection_parser_ = &p;
    }

    void database_loader_pskel::
    mappings_parser (::xml_schema::string_pskel& p)
    {
      this->mappings_parser_ = &p;
    }

    void database_loader_pskel::
    parsers (::xml_schema::string_pskel& connection,
             ::xml_schema::string_pskel& mappings)
    {
      this->connection_parser_ = &connection;
      this->mappings_parser_ = &mappings;
    }

    database_loader_pskel::
    database_loader_pskel ()
    : connection_parser_ (0),
      mappings_parser_ (0)
    {
    }

    // xml_loader_pskel
    //

    void xml_loader_pskel::
    file_parser (::xml_schema::string_pskel& p)
    {
      this->file_parser_ = &p;
    }

    void xml_loader_pskel::
    root_element_parser (::xml_schema::string_pskel& p)
    {
      this->root_element_parser_ = &p;
    }

    void xml_loader_pskel::
    parsers (::xml_schema::string_pskel& file,
             ::xml_schema::string_pskel& root_element)
    {
      this->file_parser_ = &file;
      this->root_element_parser_ = &root_element;
    }

    xml_loader_pskel::
    xml_loader_pskel ()
    : file_parser_ (0),
      root_element_parser_ (0)
    {
    }

    // road_network_pskel
    //

    void road_network_pskel::
    database_loader_parser (::sim_mob::conf::database_loader_pskel& p)
    {
      this->database_loader_parser_ = &p;
    }

    void road_network_pskel::
    xml_loader_parser (::sim_mob::conf::xml_loader_pskel& p)
    {
      this->xml_loader_parser_ = &p;
    }

    void road_network_pskel::
    parsers (::sim_mob::conf::database_loader_pskel& database_loader,
             ::sim_mob::conf::xml_loader_pskel& xml_loader)
    {
      this->database_loader_parser_ = &database_loader;
      this->xml_loader_parser_ = &xml_loader;
    }

    road_network_pskel::
    road_network_pskel ()
    : database_loader_parser_ (0),
      xml_loader_parser_ (0)
    {
    }

    // trip_chains_pskel
    //

    void trip_chains_pskel::
    database_loader_parser (::sim_mob::conf::database_loader_pskel& p)
    {
      this->database_loader_parser_ = &p;
    }

    void trip_chains_pskel::
    xml_loader_parser (::sim_mob::conf::xml_loader_pskel& p)
    {
      this->xml_loader_parser_ = &p;
    }

    void trip_chains_pskel::
    parsers (::sim_mob::conf::database_loader_pskel& database_loader,
             ::sim_mob::conf::xml_loader_pskel& xml_loader)
    {
      this->database_loader_parser_ = &database_loader;
      this->xml_loader_parser_ = &xml_loader;
    }

    trip_chains_pskel::
    trip_chains_pskel ()
    : database_loader_parser_ (0),
      xml_loader_parser_ (0)
    {
    }

    // signals_pskel
    //

    void signals_pskel::
    database_loader_parser (::sim_mob::conf::database_loader_pskel& p)
    {
      this->database_loader_parser_ = &p;
    }

    void signals_pskel::
    xml_loader_parser (::sim_mob::conf::xml_loader_pskel& p)
    {
      this->xml_loader_parser_ = &p;
    }

    void signals_pskel::
    parsers (::sim_mob::conf::database_loader_pskel& database_loader,
             ::sim_mob::conf::xml_loader_pskel& xml_loader)
    {
      this->database_loader_parser_ = &database_loader;
      this->xml_loader_parser_ = &xml_loader;
    }

    signals_pskel::
    signals_pskel ()
    : database_loader_parser_ (0),
      xml_loader_parser_ (0)
    {
    }

    // driver_explicit_pskel
    //

    void driver_explicit_pskel::
    property_parser (::sim_mob::conf::gen_prop_pskel& p)
    {
      this->property_parser_ = &p;
    }

    void driver_explicit_pskel::
    originPos_parser (::xml_schema::string_pskel& p)
    {
      this->originPos_parser_ = &p;
    }

    void driver_explicit_pskel::
    destPos_parser (::xml_schema::string_pskel& p)
    {
      this->destPos_parser_ = &p;
    }

    void driver_explicit_pskel::
    startTime_parser (::xml_schema::string_pskel& p)
    {
      this->startTime_parser_ = &p;
    }

    void driver_explicit_pskel::
    startFrame_parser (::xml_schema::int_pskel& p)
    {
      this->startFrame_parser_ = &p;
    }

    void driver_explicit_pskel::
    parsers (::sim_mob::conf::gen_prop_pskel& property,
             ::xml_schema::string_pskel& originPos,
             ::xml_schema::string_pskel& destPos,
             ::xml_schema::string_pskel& startTime,
             ::xml_schema::int_pskel& startFrame)
    {
      this->property_parser_ = &property;
      this->originPos_parser_ = &originPos;
      this->destPos_parser_ = &destPos;
      this->startTime_parser_ = &startTime;
      this->startFrame_parser_ = &startFrame;
    }

    driver_explicit_pskel::
    driver_explicit_pskel ()
    : property_parser_ (0),
      originPos_parser_ (0),
      destPos_parser_ (0),
      startTime_parser_ (0),
      startFrame_parser_ (0)
    {
    }

    // drivers_pskel
    //

    void drivers_pskel::
    database_loader_parser (::sim_mob::conf::database_loader_pskel& p)
    {
      this->database_loader_parser_ = &p;
    }

    void drivers_pskel::
    xml_loader_parser (::sim_mob::conf::xml_loader_pskel& p)
    {
      this->xml_loader_parser_ = &p;
    }

    void drivers_pskel::
    driver_parser (::sim_mob::conf::driver_explicit_pskel& p)
    {
      this->driver_parser_ = &p;
    }

    void drivers_pskel::
    parsers (::sim_mob::conf::database_loader_pskel& database_loader,
             ::sim_mob::conf::xml_loader_pskel& xml_loader,
             ::sim_mob::conf::driver_explicit_pskel& driver)
    {
      this->database_loader_parser_ = &database_loader;
      this->xml_loader_parser_ = &xml_loader;
      this->driver_parser_ = &driver;
    }

    drivers_pskel::
    drivers_pskel ()
    : database_loader_parser_ (0),
      xml_loader_parser_ (0),
      driver_parser_ (0)
    {
    }

    // pedestrian_explicit_pskel
    //

    void pedestrian_explicit_pskel::
    property_parser (::sim_mob::conf::gen_prop_pskel& p)
    {
      this->property_parser_ = &p;
    }

    void pedestrian_explicit_pskel::
    originPos_parser (::xml_schema::string_pskel& p)
    {
      this->originPos_parser_ = &p;
    }

    void pedestrian_explicit_pskel::
    destPos_parser (::xml_schema::string_pskel& p)
    {
      this->destPos_parser_ = &p;
    }

    void pedestrian_explicit_pskel::
    startTime_parser (::xml_schema::string_pskel& p)
    {
      this->startTime_parser_ = &p;
    }

    void pedestrian_explicit_pskel::
    startFrame_parser (::xml_schema::int_pskel& p)
    {
      this->startFrame_parser_ = &p;
    }

    void pedestrian_explicit_pskel::
    parsers (::sim_mob::conf::gen_prop_pskel& property,
             ::xml_schema::string_pskel& originPos,
             ::xml_schema::string_pskel& destPos,
             ::xml_schema::string_pskel& startTime,
             ::xml_schema::int_pskel& startFrame)
    {
      this->property_parser_ = &property;
      this->originPos_parser_ = &originPos;
      this->destPos_parser_ = &destPos;
      this->startTime_parser_ = &startTime;
      this->startFrame_parser_ = &startFrame;
    }

    pedestrian_explicit_pskel::
    pedestrian_explicit_pskel ()
    : property_parser_ (0),
      originPos_parser_ (0),
      destPos_parser_ (0),
      startTime_parser_ (0),
      startFrame_parser_ (0)
    {
    }

    // pedestrians_pskel
    //

    void pedestrians_pskel::
    database_loader_parser (::sim_mob::conf::database_loader_pskel& p)
    {
      this->database_loader_parser_ = &p;
    }

    void pedestrians_pskel::
    xml_loader_parser (::sim_mob::conf::xml_loader_pskel& p)
    {
      this->xml_loader_parser_ = &p;
    }

    void pedestrians_pskel::
    pedestrian_parser (::sim_mob::conf::pedestrian_explicit_pskel& p)
    {
      this->pedestrian_parser_ = &p;
    }

    void pedestrians_pskel::
    parsers (::sim_mob::conf::database_loader_pskel& database_loader,
             ::sim_mob::conf::xml_loader_pskel& xml_loader,
             ::sim_mob::conf::pedestrian_explicit_pskel& pedestrian)
    {
      this->database_loader_parser_ = &database_loader;
      this->xml_loader_parser_ = &xml_loader;
      this->pedestrian_parser_ = &pedestrian;
    }

    pedestrians_pskel::
    pedestrians_pskel ()
    : database_loader_parser_ (0),
      xml_loader_parser_ (0),
      pedestrian_parser_ (0)
    {
    }

    // busdrivers_pskel
    //

    void busdrivers_pskel::
    database_loader_parser (::sim_mob::conf::database_loader_pskel& p)
    {
      this->database_loader_parser_ = &p;
    }

    void busdrivers_pskel::
    xml_loader_parser (::sim_mob::conf::xml_loader_pskel& p)
    {
      this->xml_loader_parser_ = &p;
    }

    void busdrivers_pskel::
    parsers (::sim_mob::conf::database_loader_pskel& database_loader,
             ::sim_mob::conf::xml_loader_pskel& xml_loader)
    {
      this->database_loader_parser_ = &database_loader;
      this->xml_loader_parser_ = &xml_loader;
    }

    busdrivers_pskel::
    busdrivers_pskel ()
    : database_loader_parser_ (0),
      xml_loader_parser_ (0)
    {
    }

    // constructs_pskel
    //

    void constructs_pskel::
    models_parser (::sim_mob::conf::models_pskel& p)
    {
      this->models_parser_ = &p;
    }

    void constructs_pskel::
    workgroups_parser (::sim_mob::conf::workgroups_pskel& p)
    {
      this->workgroups_parser_ = &p;
    }

    void constructs_pskel::
    distributions_parser (::sim_mob::conf::distributions_pskel& p)
    {
      this->distributions_parser_ = &p;
    }

    void constructs_pskel::
    db_connections_parser (::sim_mob::conf::db_connections_pskel& p)
    {
      this->db_connections_parser_ = &p;
    }

    void constructs_pskel::
    db_proc_groups_parser (::sim_mob::conf::db_proc_groups_pskel& p)
    {
      this->db_proc_groups_parser_ = &p;
    }

    void constructs_pskel::
    parsers (::sim_mob::conf::models_pskel& models,
             ::sim_mob::conf::workgroups_pskel& workgroups,
             ::sim_mob::conf::distributions_pskel& distributions,
             ::sim_mob::conf::db_connections_pskel& db_connections,
             ::sim_mob::conf::db_proc_groups_pskel& db_proc_groups)
    {
      this->models_parser_ = &models;
      this->workgroups_parser_ = &workgroups;
      this->distributions_parser_ = &distributions;
      this->db_connections_parser_ = &db_connections;
      this->db_proc_groups_parser_ = &db_proc_groups;
    }

    constructs_pskel::
    constructs_pskel ()
    : models_parser_ (0),
      workgroups_parser_ (0),
      distributions_parser_ (0),
      db_connections_parser_ (0),
      db_proc_groups_parser_ (0)
    {
    }

    // system_pskel
    //

    void system_pskel::
    default_models_parser (::sim_mob::conf::default_models_pskel& p)
    {
      this->default_models_parser_ = &p;
    }

    void system_pskel::
    workgroup_mappings_parser (::sim_mob::conf::workgroup_mappings_pskel& p)
    {
      this->workgroup_mappings_parser_ = &p;
    }

    void system_pskel::
    generic_props_parser (::sim_mob::conf::generic_props_pskel& p)
    {
      this->generic_props_parser_ = &p;
    }

    void system_pskel::
    parsers (::sim_mob::conf::default_models_pskel& default_models,
             ::sim_mob::conf::workgroup_mappings_pskel& workgroup_mappings,
             ::sim_mob::conf::generic_props_pskel& generic_props)
    {
      this->default_models_parser_ = &default_models;
      this->workgroup_mappings_parser_ = &workgroup_mappings;
      this->generic_props_parser_ = &generic_props;
    }

    system_pskel::
    system_pskel ()
    : default_models_parser_ (0),
      workgroup_mappings_parser_ (0),
      generic_props_parser_ (0)
    {
    }

    // simulation_pskel
    //

    void simulation_pskel::
    base_granularity_parser (::sim_mob::conf::val_units_pskel& p)
    {
      this->base_granularity_parser_ = &p;
    }

    void simulation_pskel::
    total_runtime_parser (::sim_mob::conf::val_units_pskel& p)
    {
      this->total_runtime_parser_ = &p;
    }

    void simulation_pskel::
    total_warmup_parser (::sim_mob::conf::val_units_pskel& p)
    {
      this->total_warmup_parser_ = &p;
    }

    void simulation_pskel::
    start_time_parser (::sim_mob::conf::start_time_pskel& p)
    {
      this->start_time_parser_ = &p;
    }

    void simulation_pskel::
    granularities_parser (::sim_mob::conf::granularities_pskel& p)
    {
      this->granularities_parser_ = &p;
    }

    void simulation_pskel::
    react_times_parser (::sim_mob::conf::react_times_pskel& p)
    {
      this->react_times_parser_ = &p;
    }

    void simulation_pskel::
    geospatial_parser (::sim_mob::conf::geospatial_pskel& p)
    {
      this->geospatial_parser_ = &p;
    }

    void simulation_pskel::
    agents_parser (::sim_mob::conf::agents_pskel& p)
    {
      this->agents_parser_ = &p;
    }

    void simulation_pskel::
    parsers (::sim_mob::conf::val_units_pskel& base_granularity,
             ::sim_mob::conf::val_units_pskel& total_runtime,
             ::sim_mob::conf::val_units_pskel& total_warmup,
             ::sim_mob::conf::start_time_pskel& start_time,
             ::sim_mob::conf::granularities_pskel& granularities,
             ::sim_mob::conf::react_times_pskel& react_times,
             ::sim_mob::conf::geospatial_pskel& geospatial,
             ::sim_mob::conf::agents_pskel& agents)
    {
      this->base_granularity_parser_ = &base_granularity;
      this->total_runtime_parser_ = &total_runtime;
      this->total_warmup_parser_ = &total_warmup;
      this->start_time_parser_ = &start_time;
      this->granularities_parser_ = &granularities;
      this->react_times_parser_ = &react_times;
      this->geospatial_parser_ = &geospatial;
      this->agents_parser_ = &agents;
    }

    simulation_pskel::
    simulation_pskel ()
    : base_granularity_parser_ (0),
      total_runtime_parser_ (0),
      total_warmup_parser_ (0),
      start_time_parser_ (0),
      granularities_parser_ (0),
      react_times_parser_ (0),
      geospatial_parser_ (0),
      agents_parser_ (0)
    {
    }

    // SimMobility_pskel
    //

    void SimMobility_pskel::
    constructs_parser (::sim_mob::conf::constructs_pskel& p)
    {
      this->constructs_parser_ = &p;
    }

    void SimMobility_pskel::
    single_threaded_parser (::xml_schema::boolean_pskel& p)
    {
      this->single_threaded_parser_ = &p;
    }

    void SimMobility_pskel::
    system_parser (::sim_mob::conf::system_pskel& p)
    {
      this->system_parser_ = &p;
    }

    void SimMobility_pskel::
    simulation_parser (::sim_mob::conf::simulation_pskel& p)
    {
      this->simulation_parser_ = &p;
    }

    void SimMobility_pskel::
    parsers (::sim_mob::conf::constructs_pskel& constructs,
             ::xml_schema::boolean_pskel& single_threaded,
             ::sim_mob::conf::system_pskel& system,
             ::sim_mob::conf::simulation_pskel& simulation)
    {
      this->constructs_parser_ = &constructs;
      this->single_threaded_parser_ = &single_threaded;
      this->system_parser_ = &system;
      this->simulation_parser_ = &simulation;
    }

    SimMobility_pskel::
    SimMobility_pskel ()
    : constructs_parser_ (0),
      single_threaded_parser_ (0),
      system_parser_ (0),
      simulation_parser_ (0)
    {
    }

    // models_pskel
    //

    void models_pskel::
    lane_changing_parser (::sim_mob::conf::model_pskel& p)
    {
      this->lane_changing_parser_ = &p;
    }

    void models_pskel::
    car_following_parser (::sim_mob::conf::model_pskel& p)
    {
      this->car_following_parser_ = &p;
    }

    void models_pskel::
    intersection_driving_parser (::sim_mob::conf::model_pskel& p)
    {
      this->intersection_driving_parser_ = &p;
    }

    void models_pskel::
    sidewalk_movement_parser (::sim_mob::conf::model_pskel& p)
    {
      this->sidewalk_movement_parser_ = &p;
    }

    void models_pskel::
    parsers (::sim_mob::conf::model_pskel& lane_changing,
             ::sim_mob::conf::model_pskel& car_following,
             ::sim_mob::conf::model_pskel& intersection_driving,
             ::sim_mob::conf::model_pskel& sidewalk_movement)
    {
      this->lane_changing_parser_ = &lane_changing;
      this->car_following_parser_ = &car_following;
      this->intersection_driving_parser_ = &intersection_driving;
      this->sidewalk_movement_parser_ = &sidewalk_movement;
    }

    models_pskel::
    models_pskel ()
    : lane_changing_parser_ (0),
      car_following_parser_ (0),
      intersection_driving_parser_ (0),
      sidewalk_movement_parser_ (0)
    {
    }

    // workgroups_pskel
    //

    void workgroups_pskel::
    workgroup_parser (::sim_mob::conf::workgroup_pskel& p)
    {
      this->workgroup_parser_ = &p;
    }

    void workgroups_pskel::
    parsers (::sim_mob::conf::workgroup_pskel& workgroup)
    {
      this->workgroup_parser_ = &workgroup;
    }

    workgroups_pskel::
    workgroups_pskel ()
    : workgroup_parser_ (0)
    {
    }

    // distributions_pskel
    //

    void distributions_pskel::
    dist_parser (::sim_mob::conf::distribution_pskel& p)
    {
      this->dist_parser_ = &p;
    }

    void distributions_pskel::
    parsers (::sim_mob::conf::distribution_pskel& dist)
    {
      this->dist_parser_ = &dist;
    }

    distributions_pskel::
    distributions_pskel ()
    : dist_parser_ (0)
    {
    }

    // db_connections_pskel
    //

    void db_connections_pskel::
    connection_parser (::sim_mob::conf::db_connection_pskel& p)
    {
      this->connection_parser_ = &p;
    }

    void db_connections_pskel::
    parsers (::sim_mob::conf::db_connection_pskel& connection)
    {
      this->connection_parser_ = &connection;
    }

    db_connections_pskel::
    db_connections_pskel ()
    : connection_parser_ (0)
    {
    }

    // db_proc_groups_pskel
    //

    void db_proc_groups_pskel::
    proc_map_parser (::sim_mob::conf::proc_map_pskel& p)
    {
      this->proc_map_parser_ = &p;
    }

    void db_proc_groups_pskel::
    parsers (::sim_mob::conf::proc_map_pskel& proc_map)
    {
      this->proc_map_parser_ = &proc_map;
    }

    db_proc_groups_pskel::
    db_proc_groups_pskel ()
    : proc_map_parser_ (0)
    {
    }

    // default_models_pskel
    //

    void default_models_pskel::
    model_parser (::sim_mob::conf::default_model_pskel& p)
    {
      this->model_parser_ = &p;
    }

    void default_models_pskel::
    parsers (::sim_mob::conf::default_model_pskel& model)
    {
      this->model_parser_ = &model;
    }

    default_models_pskel::
    default_models_pskel ()
    : model_parser_ (0)
    {
    }

    // workgroup_mappings_pskel
    //

    void workgroup_mappings_pskel::
    agents_parser (::sim_mob::conf::workgroup_mapping_pskel& p)
    {
      this->agents_parser_ = &p;
    }

    void workgroup_mappings_pskel::
    signals_parser (::sim_mob::conf::workgroup_mapping_pskel& p)
    {
      this->signals_parser_ = &p;
    }

    void workgroup_mappings_pskel::
    parsers (::sim_mob::conf::workgroup_mapping_pskel& agents,
             ::sim_mob::conf::workgroup_mapping_pskel& signals)
    {
      this->agents_parser_ = &agents;
      this->signals_parser_ = &signals;
    }

    workgroup_mappings_pskel::
    workgroup_mappings_pskel ()
    : agents_parser_ (0),
      signals_parser_ (0)
    {
    }

    // generic_props_pskel
    //

    void generic_props_pskel::
    property_parser (::sim_mob::conf::gen_prop_pskel& p)
    {
      this->property_parser_ = &p;
    }

    void generic_props_pskel::
    parsers (::sim_mob::conf::gen_prop_pskel& property)
    {
      this->property_parser_ = &property;
    }

    generic_props_pskel::
    generic_props_pskel ()
    : property_parser_ (0)
    {
    }

    // start_time_pskel
    //

    void start_time_pskel::
    value_parser (::xml_schema::string_pskel& p)
    {
      this->value_parser_ = &p;
    }

    void start_time_pskel::
    parsers (::xml_schema::string_pskel& value)
    {
      this->value_parser_ = &value;
    }

    start_time_pskel::
    start_time_pskel ()
    : value_parser_ (0)
    {
    }

    // granularities_pskel
    //

    void granularities_pskel::
    agent_parser (::sim_mob::conf::val_units_pskel& p)
    {
      this->agent_parser_ = &p;
    }

    void granularities_pskel::
    signal_parser (::sim_mob::conf::val_units_pskel& p)
    {
      this->signal_parser_ = &p;
    }

    void granularities_pskel::
    parsers (::sim_mob::conf::val_units_pskel& agent,
             ::sim_mob::conf::val_units_pskel& signal)
    {
      this->agent_parser_ = &agent;
      this->signal_parser_ = &signal;
    }

    granularities_pskel::
    granularities_pskel ()
    : agent_parser_ (0),
      signal_parser_ (0)
    {
    }

    // react_times_pskel
    //

    void react_times_pskel::
    leading_vehicle_parser (::sim_mob::conf::dist_mapping_pskel& p)
    {
      this->leading_vehicle_parser_ = &p;
    }

    void react_times_pskel::
    subject_vehicle_parser (::sim_mob::conf::dist_mapping_pskel& p)
    {
      this->subject_vehicle_parser_ = &p;
    }

    void react_times_pskel::
    vehicle_gap_parser (::sim_mob::conf::dist_mapping_pskel& p)
    {
      this->vehicle_gap_parser_ = &p;
    }

    void react_times_pskel::
    parsers (::sim_mob::conf::dist_mapping_pskel& leading_vehicle,
             ::sim_mob::conf::dist_mapping_pskel& subject_vehicle,
             ::sim_mob::conf::dist_mapping_pskel& vehicle_gap)
    {
      this->leading_vehicle_parser_ = &leading_vehicle;
      this->subject_vehicle_parser_ = &subject_vehicle;
      this->vehicle_gap_parser_ = &vehicle_gap;
    }

    react_times_pskel::
    react_times_pskel ()
    : leading_vehicle_parser_ (0),
      subject_vehicle_parser_ (0),
      vehicle_gap_parser_ (0)
    {
    }

    // geospatial_pskel
    //

    void geospatial_pskel::
    road_network_parser (::sim_mob::conf::road_network_pskel& p)
    {
      this->road_network_parser_ = &p;
    }

    void geospatial_pskel::
    parsers (::sim_mob::conf::road_network_pskel& road_network)
    {
      this->road_network_parser_ = &road_network;
    }

    geospatial_pskel::
    geospatial_pskel ()
    : road_network_parser_ (0)
    {
    }

    // agents_pskel
    //

    void agents_pskel::
    trip_chains_parser (::sim_mob::conf::trip_chains_pskel& p)
    {
      this->trip_chains_parser_ = &p;
    }

    void agents_pskel::
    signals_parser (::sim_mob::conf::signals_pskel& p)
    {
      this->signals_parser_ = &p;
    }

    void agents_pskel::
    drivers_parser (::sim_mob::conf::drivers_pskel& p)
    {
      this->drivers_parser_ = &p;
    }

    void agents_pskel::
    pedestrians_parser (::sim_mob::conf::pedestrians_pskel& p)
    {
      this->pedestrians_parser_ = &p;
    }

    void agents_pskel::
    busdrivers_parser (::sim_mob::conf::busdrivers_pskel& p)
    {
      this->busdrivers_parser_ = &p;
    }

    void agents_pskel::
    parsers (::sim_mob::conf::trip_chains_pskel& trip_chains,
             ::sim_mob::conf::signals_pskel& signals,
             ::sim_mob::conf::drivers_pskel& drivers,
             ::sim_mob::conf::pedestrians_pskel& pedestrians,
             ::sim_mob::conf::busdrivers_pskel& busdrivers)
    {
      this->trip_chains_parser_ = &trip_chains;
      this->signals_parser_ = &signals;
      this->drivers_parser_ = &drivers;
      this->pedestrians_parser_ = &pedestrians;
      this->busdrivers_parser_ = &busdrivers;
    }

    agents_pskel::
    agents_pskel ()
    : trip_chains_parser_ (0),
      signals_parser_ (0),
      drivers_parser_ (0),
      pedestrians_parser_ (0),
      busdrivers_parser_ (0)
    {
    }
  }
}

namespace sim_mob
{
  namespace conf
  {
    // model_pskel
    //

    void model_pskel::
    id (const ::std::string&)
    {
    }

    void model_pskel::
    library (const ::std::string&)
    {
    }

    bool model_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "id" && ns.empty ())
      {
        if (this->id_parser_)
        {
          this->id_parser_->pre ();
          this->id_parser_->_pre_impl ();
          this->id_parser_->_characters (v);
          this->id_parser_->_post_impl ();
          this->id (this->id_parser_->post_string ());
        }

        return true;
      }

      if (n == "library" && ns.empty ())
      {
        if (this->library_parser_)
        {
          this->library_parser_->pre ();
          this->library_parser_->_pre_impl ();
          this->library_parser_->_characters (v);
          this->library_parser_->_post_impl ();
          this->library (this->library_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // workgroup_pskel
    //

    void workgroup_pskel::
    id (const ::std::string&)
    {
    }

    void workgroup_pskel::
    workers (int)
    {
    }

    bool workgroup_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "id" && ns.empty ())
      {
        if (this->id_parser_)
        {
          this->id_parser_->pre ();
          this->id_parser_->_pre_impl ();
          this->id_parser_->_characters (v);
          this->id_parser_->_post_impl ();
          this->id (this->id_parser_->post_string ());
        }

        return true;
      }

      if (n == "workers" && ns.empty ())
      {
        if (this->workers_parser_)
        {
          this->workers_parser_->pre ();
          this->workers_parser_->_pre_impl ();
          this->workers_parser_->_characters (v);
          this->workers_parser_->_post_impl ();
          this->workers (this->workers_parser_->post_int ());
        }

        return true;
      }

      return false;
    }

    // distribution_pskel
    //

    void distribution_pskel::
    id (const ::std::string&)
    {
    }

    void distribution_pskel::
    type (const ::std::string&)
    {
    }

    void distribution_pskel::
    mean (int)
    {
    }

    void distribution_pskel::
    stdev (int)
    {
    }

    bool distribution_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "id" && ns.empty ())
      {
        if (this->id_parser_)
        {
          this->id_parser_->pre ();
          this->id_parser_->_pre_impl ();
          this->id_parser_->_characters (v);
          this->id_parser_->_post_impl ();
          this->id (this->id_parser_->post_string ());
        }

        return true;
      }

      if (n == "type" && ns.empty ())
      {
        if (this->type_parser_)
        {
          this->type_parser_->pre ();
          this->type_parser_->_pre_impl ();
          this->type_parser_->_characters (v);
          this->type_parser_->_post_impl ();
          this->type (this->type_parser_->post_string ());
        }

        return true;
      }

      if (n == "mean" && ns.empty ())
      {
        if (this->mean_parser_)
        {
          this->mean_parser_->pre ();
          this->mean_parser_->_pre_impl ();
          this->mean_parser_->_characters (v);
          this->mean_parser_->_post_impl ();
          this->mean (this->mean_parser_->post_int ());
        }

        return true;
      }

      if (n == "stdev" && ns.empty ())
      {
        if (this->stdev_parser_)
        {
          this->stdev_parser_->pre ();
          this->stdev_parser_->_pre_impl ();
          this->stdev_parser_->_characters (v);
          this->stdev_parser_->_post_impl ();
          this->stdev (this->stdev_parser_->post_int ());
        }

        return true;
      }

      return false;
    }

    // db_connection_pskel
    //

    void db_connection_pskel::
    param (const std::pair<std::string, std::string>&)
    {
    }

    void db_connection_pskel::
    id (const ::std::string&)
    {
    }

    void db_connection_pskel::
    dbtype (const ::std::string&)
    {
    }

    bool db_connection_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "param" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->param_parser_;

        if (this->param_parser_)
          this->param_parser_->pre ();

        return true;
      }

      return false;
    }

    bool db_connection_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "param" && ns.empty ())
      {
        if (this->param_parser_)
          this->param (this->param_parser_->post_db_param ());

        return true;
      }

      return false;
    }

    bool db_connection_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "id" && ns.empty ())
      {
        if (this->id_parser_)
        {
          this->id_parser_->pre ();
          this->id_parser_->_pre_impl ();
          this->id_parser_->_characters (v);
          this->id_parser_->_post_impl ();
          this->id (this->id_parser_->post_string ());
        }

        return true;
      }

      if (n == "dbtype" && ns.empty ())
      {
        if (this->dbtype_parser_)
        {
          this->dbtype_parser_->pre ();
          this->dbtype_parser_->_pre_impl ();
          this->dbtype_parser_->_characters (v);
          this->dbtype_parser_->_post_impl ();
          this->dbtype (this->dbtype_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // db_param_pskel
    //

    void db_param_pskel::
    name (const ::std::string&)
    {
    }

    void db_param_pskel::
    value (const ::std::string&)
    {
    }

    bool db_param_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "name" && ns.empty ())
      {
        if (this->name_parser_)
        {
          this->name_parser_->pre ();
          this->name_parser_->_pre_impl ();
          this->name_parser_->_characters (v);
          this->name_parser_->_post_impl ();
          this->name (this->name_parser_->post_string ());
        }

        return true;
      }

      if (n == "value" && ns.empty ())
      {
        if (this->value_parser_)
        {
          this->value_parser_->pre ();
          this->value_parser_->_pre_impl ();
          this->value_parser_->_characters (v);
          this->value_parser_->_post_impl ();
          this->value (this->value_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // db_proc_mapping_pskel
    //

    void db_proc_mapping_pskel::
    name (const ::std::string&)
    {
    }

    void db_proc_mapping_pskel::
    procedure (const ::std::string&)
    {
    }

    bool db_proc_mapping_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "name" && ns.empty ())
      {
        if (this->name_parser_)
        {
          this->name_parser_->pre ();
          this->name_parser_->_pre_impl ();
          this->name_parser_->_characters (v);
          this->name_parser_->_post_impl ();
          this->name (this->name_parser_->post_string ());
        }

        return true;
      }

      if (n == "procedure" && ns.empty ())
      {
        if (this->procedure_parser_)
        {
          this->procedure_parser_->pre ();
          this->procedure_parser_->_pre_impl ();
          this->procedure_parser_->_characters (v);
          this->procedure_parser_->_post_impl ();
          this->procedure (this->procedure_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // proc_map_pskel
    //

    void proc_map_pskel::
    mapping (const std::pair<std::string, std::string>&)
    {
    }

    void proc_map_pskel::
    id (const ::std::string&)
    {
    }

    void proc_map_pskel::
    format (const ::std::string&)
    {
    }

    bool proc_map_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "mapping" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->mapping_parser_;

        if (this->mapping_parser_)
          this->mapping_parser_->pre ();

        return true;
      }

      return false;
    }

    bool proc_map_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "mapping" && ns.empty ())
      {
        if (this->mapping_parser_)
          this->mapping (this->mapping_parser_->post_db_proc_mapping ());

        return true;
      }

      return false;
    }

    bool proc_map_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "id" && ns.empty ())
      {
        if (this->id_parser_)
        {
          this->id_parser_->pre ();
          this->id_parser_->_pre_impl ();
          this->id_parser_->_characters (v);
          this->id_parser_->_post_impl ();
          this->id (this->id_parser_->post_string ());
        }

        return true;
      }

      if (n == "format" && ns.empty ())
      {
        if (this->format_parser_)
        {
          this->format_parser_->pre ();
          this->format_parser_->_pre_impl ();
          this->format_parser_->_characters (v);
          this->format_parser_->_post_impl ();
          this->format (this->format_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // default_model_pskel
    //

    void default_model_pskel::
    type (const ::std::string&)
    {
    }

    void default_model_pskel::
    default_ (const ::std::string&)
    {
    }

    bool default_model_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "type" && ns.empty ())
      {
        if (this->type_parser_)
        {
          this->type_parser_->pre ();
          this->type_parser_->_pre_impl ();
          this->type_parser_->_characters (v);
          this->type_parser_->_post_impl ();
          this->type (this->type_parser_->post_string ());
        }

        return true;
      }

      if (n == "default" && ns.empty ())
      {
        if (this->default__parser_)
        {
          this->default__parser_->pre ();
          this->default__parser_->_pre_impl ();
          this->default__parser_->_characters (v);
          this->default__parser_->_post_impl ();
          this->default_ (this->default__parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // workgroup_mapping_pskel
    //

    void workgroup_mapping_pskel::
    workgroup (const ::std::string&)
    {
    }

    bool workgroup_mapping_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "workgroup" && ns.empty ())
      {
        if (this->workgroup_parser_)
        {
          this->workgroup_parser_->pre ();
          this->workgroup_parser_->_pre_impl ();
          this->workgroup_parser_->_characters (v);
          this->workgroup_parser_->_post_impl ();
          this->workgroup (this->workgroup_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // gen_prop_pskel
    //

    void gen_prop_pskel::
    key (const ::std::string&)
    {
    }

    void gen_prop_pskel::
    value (const ::std::string&)
    {
    }

    bool gen_prop_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "key" && ns.empty ())
      {
        if (this->key_parser_)
        {
          this->key_parser_->pre ();
          this->key_parser_->_pre_impl ();
          this->key_parser_->_characters (v);
          this->key_parser_->_post_impl ();
          this->key (this->key_parser_->post_string ());
        }

        return true;
      }

      if (n == "value" && ns.empty ())
      {
        if (this->value_parser_)
        {
          this->value_parser_->pre ();
          this->value_parser_->_pre_impl ();
          this->value_parser_->_characters (v);
          this->value_parser_->_post_impl ();
          this->value (this->value_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // val_units_pskel
    //

    void val_units_pskel::
    value (int)
    {
    }

    void val_units_pskel::
    units (const ::std::string&)
    {
    }

    void val_units_pskel::
    post_val_units ()
    {
    }

    bool val_units_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "value" && ns.empty ())
      {
        if (this->value_parser_)
        {
          this->value_parser_->pre ();
          this->value_parser_->_pre_impl ();
          this->value_parser_->_characters (v);
          this->value_parser_->_post_impl ();
          this->value (this->value_parser_->post_int ());
        }

        return true;
      }

      if (n == "units" && ns.empty ())
      {
        if (this->units_parser_)
        {
          this->units_parser_->pre ();
          this->units_parser_->_pre_impl ();
          this->units_parser_->_characters (v);
          this->units_parser_->_post_impl ();
          this->units (this->units_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // dist_mapping_pskel
    //

    void dist_mapping_pskel::
    dist (const ::std::string&)
    {
    }

    void dist_mapping_pskel::
    post_dist_mapping ()
    {
    }

    bool dist_mapping_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "dist" && ns.empty ())
      {
        if (this->dist_parser_)
        {
          this->dist_parser_->pre ();
          this->dist_parser_->_pre_impl ();
          this->dist_parser_->_characters (v);
          this->dist_parser_->_post_impl ();
          this->dist (this->dist_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // database_loader_pskel
    //

    void database_loader_pskel::
    connection (const ::std::string&)
    {
    }

    void database_loader_pskel::
    mappings (const ::std::string&)
    {
    }

    void database_loader_pskel::
    post_database_loader ()
    {
    }

    bool database_loader_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "connection" && ns.empty ())
      {
        if (this->connection_parser_)
        {
          this->connection_parser_->pre ();
          this->connection_parser_->_pre_impl ();
          this->connection_parser_->_characters (v);
          this->connection_parser_->_post_impl ();
          this->connection (this->connection_parser_->post_string ());
        }

        return true;
      }

      if (n == "mappings" && ns.empty ())
      {
        if (this->mappings_parser_)
        {
          this->mappings_parser_->pre ();
          this->mappings_parser_->_pre_impl ();
          this->mappings_parser_->_characters (v);
          this->mappings_parser_->_post_impl ();
          this->mappings (this->mappings_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // xml_loader_pskel
    //

    void xml_loader_pskel::
    file (const ::std::string&)
    {
    }

    void xml_loader_pskel::
    root_element (const ::std::string&)
    {
    }

    void xml_loader_pskel::
    post_xml_loader ()
    {
    }

    bool xml_loader_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "file" && ns.empty ())
      {
        if (this->file_parser_)
        {
          this->file_parser_->pre ();
          this->file_parser_->_pre_impl ();
          this->file_parser_->_characters (v);
          this->file_parser_->_post_impl ();
          this->file (this->file_parser_->post_string ());
        }

        return true;
      }

      if (n == "root_element" && ns.empty ())
      {
        if (this->root_element_parser_)
        {
          this->root_element_parser_->pre ();
          this->root_element_parser_->_pre_impl ();
          this->root_element_parser_->_characters (v);
          this->root_element_parser_->_post_impl ();
          this->root_element (this->root_element_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // road_network_pskel
    //

    void road_network_pskel::
    database_loader ()
    {
    }

    void road_network_pskel::
    xml_loader ()
    {
    }

    void road_network_pskel::
    post_road_network ()
    {
    }

    bool road_network_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->database_loader_parser_;

        if (this->database_loader_parser_)
          this->database_loader_parser_->pre ();

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->xml_loader_parser_;

        if (this->xml_loader_parser_)
          this->xml_loader_parser_->pre ();

        return true;
      }

      return false;
    }

    bool road_network_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        if (this->database_loader_parser_)
        {
          this->database_loader_parser_->post_database_loader ();
          this->database_loader ();
        }

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        if (this->xml_loader_parser_)
        {
          this->xml_loader_parser_->post_xml_loader ();
          this->xml_loader ();
        }

        return true;
      }

      return false;
    }

    // trip_chains_pskel
    //

    void trip_chains_pskel::
    database_loader ()
    {
    }

    void trip_chains_pskel::
    xml_loader ()
    {
    }

    void trip_chains_pskel::
    post_trip_chains ()
    {
    }

    bool trip_chains_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->database_loader_parser_;

        if (this->database_loader_parser_)
          this->database_loader_parser_->pre ();

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->xml_loader_parser_;

        if (this->xml_loader_parser_)
          this->xml_loader_parser_->pre ();

        return true;
      }

      return false;
    }

    bool trip_chains_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        if (this->database_loader_parser_)
        {
          this->database_loader_parser_->post_database_loader ();
          this->database_loader ();
        }

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        if (this->xml_loader_parser_)
        {
          this->xml_loader_parser_->post_xml_loader ();
          this->xml_loader ();
        }

        return true;
      }

      return false;
    }

    // signals_pskel
    //

    void signals_pskel::
    database_loader ()
    {
    }

    void signals_pskel::
    xml_loader ()
    {
    }

    void signals_pskel::
    post_signals ()
    {
    }

    bool signals_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->database_loader_parser_;

        if (this->database_loader_parser_)
          this->database_loader_parser_->pre ();

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->xml_loader_parser_;

        if (this->xml_loader_parser_)
          this->xml_loader_parser_->pre ();

        return true;
      }

      return false;
    }

    bool signals_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        if (this->database_loader_parser_)
        {
          this->database_loader_parser_->post_database_loader ();
          this->database_loader ();
        }

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        if (this->xml_loader_parser_)
        {
          this->xml_loader_parser_->post_xml_loader ();
          this->xml_loader ();
        }

        return true;
      }

      return false;
    }

    // driver_explicit_pskel
    //

    void driver_explicit_pskel::
    property (const std::pair<std::string, std::string>&)
    {
    }

    void driver_explicit_pskel::
    originPos (const ::std::string&)
    {
    }

    void driver_explicit_pskel::
    destPos (const ::std::string&)
    {
    }

    void driver_explicit_pskel::
    startTime (const ::std::string&)
    {
    }

    void driver_explicit_pskel::
    startFrame (int)
    {
    }

    void driver_explicit_pskel::
    post_driver_explicit ()
    {
    }

    bool driver_explicit_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "property" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->property_parser_;

        if (this->property_parser_)
          this->property_parser_->pre ();

        return true;
      }

      return false;
    }

    bool driver_explicit_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "property" && ns.empty ())
      {
        if (this->property_parser_)
          this->property (this->property_parser_->post_gen_prop ());

        return true;
      }

      return false;
    }

    bool driver_explicit_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "originPos" && ns.empty ())
      {
        if (this->originPos_parser_)
        {
          this->originPos_parser_->pre ();
          this->originPos_parser_->_pre_impl ();
          this->originPos_parser_->_characters (v);
          this->originPos_parser_->_post_impl ();
          this->originPos (this->originPos_parser_->post_string ());
        }

        return true;
      }

      if (n == "destPos" && ns.empty ())
      {
        if (this->destPos_parser_)
        {
          this->destPos_parser_->pre ();
          this->destPos_parser_->_pre_impl ();
          this->destPos_parser_->_characters (v);
          this->destPos_parser_->_post_impl ();
          this->destPos (this->destPos_parser_->post_string ());
        }

        return true;
      }

      if (n == "startTime" && ns.empty ())
      {
        if (this->startTime_parser_)
        {
          this->startTime_parser_->pre ();
          this->startTime_parser_->_pre_impl ();
          this->startTime_parser_->_characters (v);
          this->startTime_parser_->_post_impl ();
          this->startTime (this->startTime_parser_->post_string ());
        }

        return true;
      }

      if (n == "startFrame" && ns.empty ())
      {
        if (this->startFrame_parser_)
        {
          this->startFrame_parser_->pre ();
          this->startFrame_parser_->_pre_impl ();
          this->startFrame_parser_->_characters (v);
          this->startFrame_parser_->_post_impl ();
          this->startFrame (this->startFrame_parser_->post_int ());
        }

        return true;
      }

      return false;
    }

    // drivers_pskel
    //

    void drivers_pskel::
    database_loader ()
    {
    }

    void drivers_pskel::
    xml_loader ()
    {
    }

    void drivers_pskel::
    driver ()
    {
    }

    void drivers_pskel::
    post_drivers ()
    {
    }

    bool drivers_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->database_loader_parser_;

        if (this->database_loader_parser_)
          this->database_loader_parser_->pre ();

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->xml_loader_parser_;

        if (this->xml_loader_parser_)
          this->xml_loader_parser_->pre ();

        return true;
      }

      if (n == "driver" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->driver_parser_;

        if (this->driver_parser_)
          this->driver_parser_->pre ();

        return true;
      }

      return false;
    }

    bool drivers_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        if (this->database_loader_parser_)
        {
          this->database_loader_parser_->post_database_loader ();
          this->database_loader ();
        }

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        if (this->xml_loader_parser_)
        {
          this->xml_loader_parser_->post_xml_loader ();
          this->xml_loader ();
        }

        return true;
      }

      if (n == "driver" && ns.empty ())
      {
        if (this->driver_parser_)
        {
          this->driver_parser_->post_driver_explicit ();
          this->driver ();
        }

        return true;
      }

      return false;
    }

    // pedestrian_explicit_pskel
    //

    void pedestrian_explicit_pskel::
    property (const std::pair<std::string, std::string>&)
    {
    }

    void pedestrian_explicit_pskel::
    originPos (const ::std::string&)
    {
    }

    void pedestrian_explicit_pskel::
    destPos (const ::std::string&)
    {
    }

    void pedestrian_explicit_pskel::
    startTime (const ::std::string&)
    {
    }

    void pedestrian_explicit_pskel::
    startFrame (int)
    {
    }

    void pedestrian_explicit_pskel::
    post_pedestrian_explicit ()
    {
    }

    bool pedestrian_explicit_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "property" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->property_parser_;

        if (this->property_parser_)
          this->property_parser_->pre ();

        return true;
      }

      return false;
    }

    bool pedestrian_explicit_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "property" && ns.empty ())
      {
        if (this->property_parser_)
          this->property (this->property_parser_->post_gen_prop ());

        return true;
      }

      return false;
    }

    bool pedestrian_explicit_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "originPos" && ns.empty ())
      {
        if (this->originPos_parser_)
        {
          this->originPos_parser_->pre ();
          this->originPos_parser_->_pre_impl ();
          this->originPos_parser_->_characters (v);
          this->originPos_parser_->_post_impl ();
          this->originPos (this->originPos_parser_->post_string ());
        }

        return true;
      }

      if (n == "destPos" && ns.empty ())
      {
        if (this->destPos_parser_)
        {
          this->destPos_parser_->pre ();
          this->destPos_parser_->_pre_impl ();
          this->destPos_parser_->_characters (v);
          this->destPos_parser_->_post_impl ();
          this->destPos (this->destPos_parser_->post_string ());
        }

        return true;
      }

      if (n == "startTime" && ns.empty ())
      {
        if (this->startTime_parser_)
        {
          this->startTime_parser_->pre ();
          this->startTime_parser_->_pre_impl ();
          this->startTime_parser_->_characters (v);
          this->startTime_parser_->_post_impl ();
          this->startTime (this->startTime_parser_->post_string ());
        }

        return true;
      }

      if (n == "startFrame" && ns.empty ())
      {
        if (this->startFrame_parser_)
        {
          this->startFrame_parser_->pre ();
          this->startFrame_parser_->_pre_impl ();
          this->startFrame_parser_->_characters (v);
          this->startFrame_parser_->_post_impl ();
          this->startFrame (this->startFrame_parser_->post_int ());
        }

        return true;
      }

      return false;
    }

    // pedestrians_pskel
    //

    void pedestrians_pskel::
    database_loader ()
    {
    }

    void pedestrians_pskel::
    xml_loader ()
    {
    }

    void pedestrians_pskel::
    pedestrian ()
    {
    }

    void pedestrians_pskel::
    post_pedestrians ()
    {
    }

    bool pedestrians_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->database_loader_parser_;

        if (this->database_loader_parser_)
          this->database_loader_parser_->pre ();

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->xml_loader_parser_;

        if (this->xml_loader_parser_)
          this->xml_loader_parser_->pre ();

        return true;
      }

      if (n == "pedestrian" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->pedestrian_parser_;

        if (this->pedestrian_parser_)
          this->pedestrian_parser_->pre ();

        return true;
      }

      return false;
    }

    bool pedestrians_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        if (this->database_loader_parser_)
        {
          this->database_loader_parser_->post_database_loader ();
          this->database_loader ();
        }

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        if (this->xml_loader_parser_)
        {
          this->xml_loader_parser_->post_xml_loader ();
          this->xml_loader ();
        }

        return true;
      }

      if (n == "pedestrian" && ns.empty ())
      {
        if (this->pedestrian_parser_)
        {
          this->pedestrian_parser_->post_pedestrian_explicit ();
          this->pedestrian ();
        }

        return true;
      }

      return false;
    }

    // busdrivers_pskel
    //

    void busdrivers_pskel::
    database_loader ()
    {
    }

    void busdrivers_pskel::
    xml_loader ()
    {
    }

    void busdrivers_pskel::
    post_busdrivers ()
    {
    }

    bool busdrivers_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->database_loader_parser_;

        if (this->database_loader_parser_)
          this->database_loader_parser_->pre ();

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->xml_loader_parser_;

        if (this->xml_loader_parser_)
          this->xml_loader_parser_->pre ();

        return true;
      }

      return false;
    }

    bool busdrivers_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "database_loader" && ns.empty ())
      {
        if (this->database_loader_parser_)
        {
          this->database_loader_parser_->post_database_loader ();
          this->database_loader ();
        }

        return true;
      }

      if (n == "xml_loader" && ns.empty ())
      {
        if (this->xml_loader_parser_)
        {
          this->xml_loader_parser_->post_xml_loader ();
          this->xml_loader ();
        }

        return true;
      }

      return false;
    }

    // constructs_pskel
    //

    void constructs_pskel::
    models ()
    {
    }

    void constructs_pskel::
    workgroups ()
    {
    }

    void constructs_pskel::
    distributions ()
    {
    }

    void constructs_pskel::
    db_connections ()
    {
    }

    void constructs_pskel::
    db_proc_groups ()
    {
    }

    void constructs_pskel::
    post_constructs ()
    {
    }

    bool constructs_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "models" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->models_parser_;

        if (this->models_parser_)
          this->models_parser_->pre ();

        return true;
      }

      if (n == "workgroups" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->workgroups_parser_;

        if (this->workgroups_parser_)
          this->workgroups_parser_->pre ();

        return true;
      }

      if (n == "distributions" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->distributions_parser_;

        if (this->distributions_parser_)
          this->distributions_parser_->pre ();

        return true;
      }

      if (n == "db_connections" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->db_connections_parser_;

        if (this->db_connections_parser_)
          this->db_connections_parser_->pre ();

        return true;
      }

      if (n == "db_proc_groups" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->db_proc_groups_parser_;

        if (this->db_proc_groups_parser_)
          this->db_proc_groups_parser_->pre ();

        return true;
      }

      return false;
    }

    bool constructs_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "models" && ns.empty ())
      {
        if (this->models_parser_)
        {
          this->models_parser_->post_models ();
          this->models ();
        }

        return true;
      }

      if (n == "workgroups" && ns.empty ())
      {
        if (this->workgroups_parser_)
        {
          this->workgroups_parser_->post_workgroups ();
          this->workgroups ();
        }

        return true;
      }

      if (n == "distributions" && ns.empty ())
      {
        if (this->distributions_parser_)
        {
          this->distributions_parser_->post_distributions ();
          this->distributions ();
        }

        return true;
      }

      if (n == "db_connections" && ns.empty ())
      {
        if (this->db_connections_parser_)
        {
          this->db_connections_parser_->post_db_connections ();
          this->db_connections ();
        }

        return true;
      }

      if (n == "db_proc_groups" && ns.empty ())
      {
        if (this->db_proc_groups_parser_)
        {
          this->db_proc_groups_parser_->post_db_proc_groups ();
          this->db_proc_groups ();
        }

        return true;
      }

      return false;
    }

    // system_pskel
    //

    void system_pskel::
    default_models ()
    {
    }

    void system_pskel::
    workgroup_mappings ()
    {
    }

    void system_pskel::
    generic_props ()
    {
    }

    void system_pskel::
    post_system ()
    {
    }

    bool system_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "default_models" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->default_models_parser_;

        if (this->default_models_parser_)
          this->default_models_parser_->pre ();

        return true;
      }

      if (n == "workgroup_mappings" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->workgroup_mappings_parser_;

        if (this->workgroup_mappings_parser_)
          this->workgroup_mappings_parser_->pre ();

        return true;
      }

      if (n == "generic_props" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->generic_props_parser_;

        if (this->generic_props_parser_)
          this->generic_props_parser_->pre ();

        return true;
      }

      return false;
    }

    bool system_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "default_models" && ns.empty ())
      {
        if (this->default_models_parser_)
        {
          this->default_models_parser_->post_default_models ();
          this->default_models ();
        }

        return true;
      }

      if (n == "workgroup_mappings" && ns.empty ())
      {
        if (this->workgroup_mappings_parser_)
        {
          this->workgroup_mappings_parser_->post_workgroup_mappings ();
          this->workgroup_mappings ();
        }

        return true;
      }

      if (n == "generic_props" && ns.empty ())
      {
        if (this->generic_props_parser_)
        {
          this->generic_props_parser_->post_generic_props ();
          this->generic_props ();
        }

        return true;
      }

      return false;
    }

    // simulation_pskel
    //

    void simulation_pskel::
    base_granularity ()
    {
    }

    void simulation_pskel::
    total_runtime ()
    {
    }

    void simulation_pskel::
    total_warmup ()
    {
    }

    void simulation_pskel::
    start_time ()
    {
    }

    void simulation_pskel::
    granularities ()
    {
    }

    void simulation_pskel::
    react_times ()
    {
    }

    void simulation_pskel::
    geospatial ()
    {
    }

    void simulation_pskel::
    agents ()
    {
    }

    void simulation_pskel::
    post_simulation ()
    {
    }

    bool simulation_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "base_granularity" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->base_granularity_parser_;

        if (this->base_granularity_parser_)
          this->base_granularity_parser_->pre ();

        return true;
      }

      if (n == "total_runtime" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->total_runtime_parser_;

        if (this->total_runtime_parser_)
          this->total_runtime_parser_->pre ();

        return true;
      }

      if (n == "total_warmup" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->total_warmup_parser_;

        if (this->total_warmup_parser_)
          this->total_warmup_parser_->pre ();

        return true;
      }

      if (n == "start_time" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->start_time_parser_;

        if (this->start_time_parser_)
          this->start_time_parser_->pre ();

        return true;
      }

      if (n == "granularities" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->granularities_parser_;

        if (this->granularities_parser_)
          this->granularities_parser_->pre ();

        return true;
      }

      if (n == "react_times" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->react_times_parser_;

        if (this->react_times_parser_)
          this->react_times_parser_->pre ();

        return true;
      }

      if (n == "geospatial" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->geospatial_parser_;

        if (this->geospatial_parser_)
          this->geospatial_parser_->pre ();

        return true;
      }

      if (n == "agents" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->agents_parser_;

        if (this->agents_parser_)
          this->agents_parser_->pre ();

        return true;
      }

      return false;
    }

    bool simulation_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "base_granularity" && ns.empty ())
      {
        if (this->base_granularity_parser_)
        {
          this->base_granularity_parser_->post_val_units ();
          this->base_granularity ();
        }

        return true;
      }

      if (n == "total_runtime" && ns.empty ())
      {
        if (this->total_runtime_parser_)
        {
          this->total_runtime_parser_->post_val_units ();
          this->total_runtime ();
        }

        return true;
      }

      if (n == "total_warmup" && ns.empty ())
      {
        if (this->total_warmup_parser_)
        {
          this->total_warmup_parser_->post_val_units ();
          this->total_warmup ();
        }

        return true;
      }

      if (n == "start_time" && ns.empty ())
      {
        if (this->start_time_parser_)
        {
          this->start_time_parser_->post_start_time ();
          this->start_time ();
        }

        return true;
      }

      if (n == "granularities" && ns.empty ())
      {
        if (this->granularities_parser_)
        {
          this->granularities_parser_->post_granularities ();
          this->granularities ();
        }

        return true;
      }

      if (n == "react_times" && ns.empty ())
      {
        if (this->react_times_parser_)
        {
          this->react_times_parser_->post_react_times ();
          this->react_times ();
        }

        return true;
      }

      if (n == "geospatial" && ns.empty ())
      {
        if (this->geospatial_parser_)
        {
          this->geospatial_parser_->post_geospatial ();
          this->geospatial ();
        }

        return true;
      }

      if (n == "agents" && ns.empty ())
      {
        if (this->agents_parser_)
        {
          this->agents_parser_->post_agents ();
          this->agents ();
        }

        return true;
      }

      return false;
    }

    // SimMobility_pskel
    //

    void SimMobility_pskel::
    constructs ()
    {
    }

    void SimMobility_pskel::
    single_threaded (bool)
    {
    }

    void SimMobility_pskel::
    system ()
    {
    }

    void SimMobility_pskel::
    simulation ()
    {
    }

    void SimMobility_pskel::
    post_SimMobility ()
    {
    }

    bool SimMobility_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "constructs" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->constructs_parser_;

        if (this->constructs_parser_)
          this->constructs_parser_->pre ();

        return true;
      }

      if (n == "single_threaded" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->single_threaded_parser_;

        if (this->single_threaded_parser_)
          this->single_threaded_parser_->pre ();

        return true;
      }

      if (n == "system" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->system_parser_;

        if (this->system_parser_)
          this->system_parser_->pre ();

        return true;
      }

      if (n == "simulation" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->simulation_parser_;

        if (this->simulation_parser_)
          this->simulation_parser_->pre ();

        return true;
      }

      return false;
    }

    bool SimMobility_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "constructs" && ns.empty ())
      {
        if (this->constructs_parser_)
        {
          this->constructs_parser_->post_constructs ();
          this->constructs ();
        }

        return true;
      }

      if (n == "single_threaded" && ns.empty ())
      {
        if (this->single_threaded_parser_)
          this->single_threaded (this->single_threaded_parser_->post_boolean ());

        return true;
      }

      if (n == "system" && ns.empty ())
      {
        if (this->system_parser_)
        {
          this->system_parser_->post_system ();
          this->system ();
        }

        return true;
      }

      if (n == "simulation" && ns.empty ())
      {
        if (this->simulation_parser_)
        {
          this->simulation_parser_->post_simulation ();
          this->simulation ();
        }

        return true;
      }

      return false;
    }

    // models_pskel
    //

    void models_pskel::
    lane_changing (const std::pair<std::string, std::string>&)
    {
    }

    void models_pskel::
    car_following (const std::pair<std::string, std::string>&)
    {
    }

    void models_pskel::
    intersection_driving (const std::pair<std::string, std::string>&)
    {
    }

    void models_pskel::
    sidewalk_movement (const std::pair<std::string, std::string>&)
    {
    }

    void models_pskel::
    post_models ()
    {
    }

    bool models_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "lane_changing" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->lane_changing_parser_;

        if (this->lane_changing_parser_)
          this->lane_changing_parser_->pre ();

        return true;
      }

      if (n == "car_following" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->car_following_parser_;

        if (this->car_following_parser_)
          this->car_following_parser_->pre ();

        return true;
      }

      if (n == "intersection_driving" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->intersection_driving_parser_;

        if (this->intersection_driving_parser_)
          this->intersection_driving_parser_->pre ();

        return true;
      }

      if (n == "sidewalk_movement" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->sidewalk_movement_parser_;

        if (this->sidewalk_movement_parser_)
          this->sidewalk_movement_parser_->pre ();

        return true;
      }

      return false;
    }

    bool models_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "lane_changing" && ns.empty ())
      {
        if (this->lane_changing_parser_)
          this->lane_changing (this->lane_changing_parser_->post_model ());

        return true;
      }

      if (n == "car_following" && ns.empty ())
      {
        if (this->car_following_parser_)
          this->car_following (this->car_following_parser_->post_model ());

        return true;
      }

      if (n == "intersection_driving" && ns.empty ())
      {
        if (this->intersection_driving_parser_)
          this->intersection_driving (this->intersection_driving_parser_->post_model ());

        return true;
      }

      if (n == "sidewalk_movement" && ns.empty ())
      {
        if (this->sidewalk_movement_parser_)
          this->sidewalk_movement (this->sidewalk_movement_parser_->post_model ());

        return true;
      }

      return false;
    }

    // workgroups_pskel
    //

    void workgroups_pskel::
    workgroup (const std::pair<std::string, sim_mob::WorkGroupFactory>&)
    {
    }

    void workgroups_pskel::
    post_workgroups ()
    {
    }

    bool workgroups_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "workgroup" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->workgroup_parser_;

        if (this->workgroup_parser_)
          this->workgroup_parser_->pre ();

        return true;
      }

      return false;
    }

    bool workgroups_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "workgroup" && ns.empty ())
      {
        if (this->workgroup_parser_)
          this->workgroup (this->workgroup_parser_->post_workgroup ());

        return true;
      }

      return false;
    }

    // distributions_pskel
    //

    void distributions_pskel::
    dist (const std::pair<std::string, sim_mob::ReactionTimeDist*>&)
    {
    }

    void distributions_pskel::
    post_distributions ()
    {
    }

    bool distributions_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "dist" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->dist_parser_;

        if (this->dist_parser_)
          this->dist_parser_->pre ();

        return true;
      }

      return false;
    }

    bool distributions_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "dist" && ns.empty ())
      {
        if (this->dist_parser_)
          this->dist (this->dist_parser_->post_distribution ());

        return true;
      }

      return false;
    }

    // db_connections_pskel
    //

    void db_connections_pskel::
    connection (const std::pair<std::string, sim_mob::DatabaseConnection>&)
    {
    }

    void db_connections_pskel::
    post_db_connections ()
    {
    }

    bool db_connections_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "connection" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->connection_parser_;

        if (this->connection_parser_)
          this->connection_parser_->pre ();

        return true;
      }

      return false;
    }

    bool db_connections_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "connection" && ns.empty ())
      {
        if (this->connection_parser_)
          this->connection (this->connection_parser_->post_db_connection ());

        return true;
      }

      return false;
    }

    // db_proc_groups_pskel
    //

    void db_proc_groups_pskel::
    proc_map (const std::pair<std::string, sim_mob::StoredProcedureMap>&)
    {
    }

    void db_proc_groups_pskel::
    post_db_proc_groups ()
    {
    }

    bool db_proc_groups_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "proc_map" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->proc_map_parser_;

        if (this->proc_map_parser_)
          this->proc_map_parser_->pre ();

        return true;
      }

      return false;
    }

    bool db_proc_groups_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "proc_map" && ns.empty ())
      {
        if (this->proc_map_parser_)
          this->proc_map (this->proc_map_parser_->post_proc_map ());

        return true;
      }

      return false;
    }

    // default_models_pskel
    //

    void default_models_pskel::
    model (const std::pair<std::string, std::string>&)
    {
    }

    void default_models_pskel::
    post_default_models ()
    {
    }

    bool default_models_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "model" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->model_parser_;

        if (this->model_parser_)
          this->model_parser_->pre ();

        return true;
      }

      return false;
    }

    bool default_models_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "model" && ns.empty ())
      {
        if (this->model_parser_)
          this->model (this->model_parser_->post_default_model ());

        return true;
      }

      return false;
    }

    // workgroup_mappings_pskel
    //

    void workgroup_mappings_pskel::
    agents (const std::string&)
    {
    }

    void workgroup_mappings_pskel::
    signals (const std::string&)
    {
    }

    void workgroup_mappings_pskel::
    post_workgroup_mappings ()
    {
    }

    bool workgroup_mappings_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "agents" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->agents_parser_;

        if (this->agents_parser_)
          this->agents_parser_->pre ();

        return true;
      }

      if (n == "signals" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->signals_parser_;

        if (this->signals_parser_)
          this->signals_parser_->pre ();

        return true;
      }

      return false;
    }

    bool workgroup_mappings_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "agents" && ns.empty ())
      {
        if (this->agents_parser_)
          this->agents (this->agents_parser_->post_workgroup_mapping ());

        return true;
      }

      if (n == "signals" && ns.empty ())
      {
        if (this->signals_parser_)
          this->signals (this->signals_parser_->post_workgroup_mapping ());

        return true;
      }

      return false;
    }

    // generic_props_pskel
    //

    void generic_props_pskel::
    property (const std::pair<std::string, std::string>&)
    {
    }

    void generic_props_pskel::
    post_generic_props ()
    {
    }

    bool generic_props_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "property" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->property_parser_;

        if (this->property_parser_)
          this->property_parser_->pre ();

        return true;
      }

      return false;
    }

    bool generic_props_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "property" && ns.empty ())
      {
        if (this->property_parser_)
          this->property (this->property_parser_->post_gen_prop ());

        return true;
      }

      return false;
    }

    // start_time_pskel
    //

    void start_time_pskel::
    value (const ::std::string&)
    {
    }

    void start_time_pskel::
    post_start_time ()
    {
    }

    bool start_time_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "value" && ns.empty ())
      {
        if (this->value_parser_)
        {
          this->value_parser_->pre ();
          this->value_parser_->_pre_impl ();
          this->value_parser_->_characters (v);
          this->value_parser_->_post_impl ();
          this->value (this->value_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // granularities_pskel
    //

    void granularities_pskel::
    agent ()
    {
    }

    void granularities_pskel::
    signal ()
    {
    }

    void granularities_pskel::
    post_granularities ()
    {
    }

    bool granularities_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "agent" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->agent_parser_;

        if (this->agent_parser_)
          this->agent_parser_->pre ();

        return true;
      }

      if (n == "signal" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->signal_parser_;

        if (this->signal_parser_)
          this->signal_parser_->pre ();

        return true;
      }

      return false;
    }

    bool granularities_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "agent" && ns.empty ())
      {
        if (this->agent_parser_)
        {
          this->agent_parser_->post_val_units ();
          this->agent ();
        }

        return true;
      }

      if (n == "signal" && ns.empty ())
      {
        if (this->signal_parser_)
        {
          this->signal_parser_->post_val_units ();
          this->signal ();
        }

        return true;
      }

      return false;
    }

    // react_times_pskel
    //

    void react_times_pskel::
    leading_vehicle ()
    {
    }

    void react_times_pskel::
    subject_vehicle ()
    {
    }

    void react_times_pskel::
    vehicle_gap ()
    {
    }

    void react_times_pskel::
    post_react_times ()
    {
    }

    bool react_times_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "leading_vehicle" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->leading_vehicle_parser_;

        if (this->leading_vehicle_parser_)
          this->leading_vehicle_parser_->pre ();

        return true;
      }

      if (n == "subject_vehicle" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->subject_vehicle_parser_;

        if (this->subject_vehicle_parser_)
          this->subject_vehicle_parser_->pre ();

        return true;
      }

      if (n == "vehicle_gap" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->vehicle_gap_parser_;

        if (this->vehicle_gap_parser_)
          this->vehicle_gap_parser_->pre ();

        return true;
      }

      return false;
    }

    bool react_times_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "leading_vehicle" && ns.empty ())
      {
        if (this->leading_vehicle_parser_)
        {
          this->leading_vehicle_parser_->post_dist_mapping ();
          this->leading_vehicle ();
        }

        return true;
      }

      if (n == "subject_vehicle" && ns.empty ())
      {
        if (this->subject_vehicle_parser_)
        {
          this->subject_vehicle_parser_->post_dist_mapping ();
          this->subject_vehicle ();
        }

        return true;
      }

      if (n == "vehicle_gap" && ns.empty ())
      {
        if (this->vehicle_gap_parser_)
        {
          this->vehicle_gap_parser_->post_dist_mapping ();
          this->vehicle_gap ();
        }

        return true;
      }

      return false;
    }

    // geospatial_pskel
    //

    void geospatial_pskel::
    road_network ()
    {
    }

    void geospatial_pskel::
    post_geospatial ()
    {
    }

    bool geospatial_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "road_network" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->road_network_parser_;

        if (this->road_network_parser_)
          this->road_network_parser_->pre ();

        return true;
      }

      return false;
    }

    bool geospatial_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "road_network" && ns.empty ())
      {
        if (this->road_network_parser_)
        {
          this->road_network_parser_->post_road_network ();
          this->road_network ();
        }

        return true;
      }

      return false;
    }

    // agents_pskel
    //

    void agents_pskel::
    trip_chains ()
    {
    }

    void agents_pskel::
    signals ()
    {
    }

    void agents_pskel::
    drivers ()
    {
    }

    void agents_pskel::
    pedestrians ()
    {
    }

    void agents_pskel::
    busdrivers ()
    {
    }

    void agents_pskel::
    post_agents ()
    {
    }

    bool agents_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "trip_chains" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->trip_chains_parser_;

        if (this->trip_chains_parser_)
          this->trip_chains_parser_->pre ();

        return true;
      }

      if (n == "signals" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->signals_parser_;

        if (this->signals_parser_)
          this->signals_parser_->pre ();

        return true;
      }

      if (n == "drivers" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->drivers_parser_;

        if (this->drivers_parser_)
          this->drivers_parser_->pre ();

        return true;
      }

      if (n == "pedestrians" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->pedestrians_parser_;

        if (this->pedestrians_parser_)
          this->pedestrians_parser_->pre ();

        return true;
      }

      if (n == "busdrivers" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->busdrivers_parser_;

        if (this->busdrivers_parser_)
          this->busdrivers_parser_->pre ();

        return true;
      }

      return false;
    }

    bool agents_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "trip_chains" && ns.empty ())
      {
        if (this->trip_chains_parser_)
        {
          this->trip_chains_parser_->post_trip_chains ();
          this->trip_chains ();
        }

        return true;
      }

      if (n == "signals" && ns.empty ())
      {
        if (this->signals_parser_)
        {
          this->signals_parser_->post_signals ();
          this->signals ();
        }

        return true;
      }

      if (n == "drivers" && ns.empty ())
      {
        if (this->drivers_parser_)
        {
          this->drivers_parser_->post_drivers ();
          this->drivers ();
        }

        return true;
      }

      if (n == "pedestrians" && ns.empty ())
      {
        if (this->pedestrians_parser_)
        {
          this->pedestrians_parser_->post_pedestrians ();
          this->pedestrians ();
        }

        return true;
      }

      if (n == "busdrivers" && ns.empty ())
      {
        if (this->busdrivers_parser_)
        {
          this->busdrivers_parser_->post_busdrivers ();
          this->busdrivers ();
        }

        return true;
      }

      return false;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

