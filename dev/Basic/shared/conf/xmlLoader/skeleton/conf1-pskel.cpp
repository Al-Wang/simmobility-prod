// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
// NOTE: Do *not* edit the -pskel.* files; they are generated automatically from the xsd file. 
//       Instead, modify the -pimpl.* files. ~Seth
//
// End prologue.

#include "conf1-pskel.hpp"

namespace sim_mob
{
  namespace conf
  {
    // model_pskel
    //

    void model_pskel::
    id_parser (::xml_schema::string_pskel& p)
    {
      this->id_parser_ = &p;
    }

    void model_pskel::
    library_parser (::xml_schema::string_pskel& p)
    {
      this->library_parser_ = &p;
    }

    void model_pskel::
    parsers (::xml_schema::string_pskel& id,
             ::xml_schema::string_pskel& library)
    {
      this->id_parser_ = &id;
      this->library_parser_ = &library;
    }

    model_pskel::
    model_pskel ()
    : id_parser_ (0),
      library_parser_ (0)
    {
    }

    // workgroup_pskel
    //

    void workgroup_pskel::
    id_parser (::xml_schema::string_pskel& p)
    {
      this->id_parser_ = &p;
    }

    void workgroup_pskel::
    workers_parser (::xml_schema::int_pskel& p)
    {
      this->workers_parser_ = &p;
    }

    void workgroup_pskel::
    parsers (::xml_schema::string_pskel& id,
             ::xml_schema::int_pskel& workers)
    {
      this->id_parser_ = &id;
      this->workers_parser_ = &workers;
    }

    workgroup_pskel::
    workgroup_pskel ()
    : id_parser_ (0),
      workers_parser_ (0)
    {
    }

    // distribution_pskel
    //

    void distribution_pskel::
    id_parser (::xml_schema::string_pskel& p)
    {
      this->id_parser_ = &p;
    }

    void distribution_pskel::
    type_parser (::xml_schema::string_pskel& p)
    {
      this->type_parser_ = &p;
    }

    void distribution_pskel::
    mean_parser (::xml_schema::int_pskel& p)
    {
      this->mean_parser_ = &p;
    }

    void distribution_pskel::
    stdev_parser (::xml_schema::int_pskel& p)
    {
      this->stdev_parser_ = &p;
    }

    void distribution_pskel::
    parsers (::xml_schema::string_pskel& id,
             ::xml_schema::string_pskel& type,
             ::xml_schema::int_pskel& mean,
             ::xml_schema::int_pskel& stdev)
    {
      this->id_parser_ = &id;
      this->type_parser_ = &type;
      this->mean_parser_ = &mean;
      this->stdev_parser_ = &stdev;
    }

    distribution_pskel::
    distribution_pskel ()
    : id_parser_ (0),
      type_parser_ (0),
      mean_parser_ (0),
      stdev_parser_ (0)
    {
    }

    // db_connection_pskel
    //

    void db_connection_pskel::
    param_parser (::sim_mob::conf::db_param_pskel& p)
    {
      this->param_parser_ = &p;
    }

    void db_connection_pskel::
    id_parser (::xml_schema::string_pskel& p)
    {
      this->id_parser_ = &p;
    }

    void db_connection_pskel::
    dbtype_parser (::xml_schema::string_pskel& p)
    {
      this->dbtype_parser_ = &p;
    }

    void db_connection_pskel::
    parsers (::sim_mob::conf::db_param_pskel& param,
             ::xml_schema::string_pskel& id,
             ::xml_schema::string_pskel& dbtype)
    {
      this->param_parser_ = &param;
      this->id_parser_ = &id;
      this->dbtype_parser_ = &dbtype;
    }

    db_connection_pskel::
    db_connection_pskel ()
    : param_parser_ (0),
      id_parser_ (0),
      dbtype_parser_ (0)
    {
    }

    // db_param_pskel
    //

    void db_param_pskel::
    name_parser (::xml_schema::string_pskel& p)
    {
      this->name_parser_ = &p;
    }

    void db_param_pskel::
    value_parser (::xml_schema::string_pskel& p)
    {
      this->value_parser_ = &p;
    }

    void db_param_pskel::
    parsers (::xml_schema::string_pskel& name,
             ::xml_schema::string_pskel& value)
    {
      this->name_parser_ = &name;
      this->value_parser_ = &value;
    }

    db_param_pskel::
    db_param_pskel ()
    : name_parser_ (0),
      value_parser_ (0)
    {
    }

    // db_proc_mapping_pskel
    //

    void db_proc_mapping_pskel::
    name_parser (::xml_schema::string_pskel& p)
    {
      this->name_parser_ = &p;
    }

    void db_proc_mapping_pskel::
    procedure_parser (::xml_schema::string_pskel& p)
    {
      this->procedure_parser_ = &p;
    }

    void db_proc_mapping_pskel::
    parsers (::xml_schema::string_pskel& name,
             ::xml_schema::string_pskel& procedure)
    {
      this->name_parser_ = &name;
      this->procedure_parser_ = &procedure;
    }

    db_proc_mapping_pskel::
    db_proc_mapping_pskel ()
    : name_parser_ (0),
      procedure_parser_ (0)
    {
    }

    // proc_map_pskel
    //

    void proc_map_pskel::
    mapping_parser (::sim_mob::conf::db_proc_mapping_pskel& p)
    {
      this->mapping_parser_ = &p;
    }

    void proc_map_pskel::
    id_parser (::xml_schema::string_pskel& p)
    {
      this->id_parser_ = &p;
    }

    void proc_map_pskel::
    format_parser (::xml_schema::string_pskel& p)
    {
      this->format_parser_ = &p;
    }

    void proc_map_pskel::
    parsers (::sim_mob::conf::db_proc_mapping_pskel& mapping,
             ::xml_schema::string_pskel& id,
             ::xml_schema::string_pskel& format)
    {
      this->mapping_parser_ = &mapping;
      this->id_parser_ = &id;
      this->format_parser_ = &format;
    }

    proc_map_pskel::
    proc_map_pskel ()
    : mapping_parser_ (0),
      id_parser_ (0),
      format_parser_ (0)
    {
    }

    // constructs_pskel
    //

    void constructs_pskel::
    models_parser (::sim_mob::conf::models_pskel& p)
    {
      this->models_parser_ = &p;
    }

    void constructs_pskel::
    workgroups_parser (::sim_mob::conf::workgroups_pskel& p)
    {
      this->workgroups_parser_ = &p;
    }

    void constructs_pskel::
    distributions_parser (::sim_mob::conf::distributions_pskel& p)
    {
      this->distributions_parser_ = &p;
    }

    void constructs_pskel::
    db_connections_parser (::sim_mob::conf::db_connections_pskel& p)
    {
      this->db_connections_parser_ = &p;
    }

    void constructs_pskel::
    db_proc_groups_parser (::sim_mob::conf::db_proc_groups_pskel& p)
    {
      this->db_proc_groups_parser_ = &p;
    }

    void constructs_pskel::
    parsers (::sim_mob::conf::models_pskel& models,
             ::sim_mob::conf::workgroups_pskel& workgroups,
             ::sim_mob::conf::distributions_pskel& distributions,
             ::sim_mob::conf::db_connections_pskel& db_connections,
             ::sim_mob::conf::db_proc_groups_pskel& db_proc_groups)
    {
      this->models_parser_ = &models;
      this->workgroups_parser_ = &workgroups;
      this->distributions_parser_ = &distributions;
      this->db_connections_parser_ = &db_connections;
      this->db_proc_groups_parser_ = &db_proc_groups;
    }

    constructs_pskel::
    constructs_pskel ()
    : models_parser_ (0),
      workgroups_parser_ (0),
      distributions_parser_ (0),
      db_connections_parser_ (0),
      db_proc_groups_parser_ (0)
    {
    }

    // SimMobility_pskel
    //

    void SimMobility_pskel::
    constructs_parser (::sim_mob::conf::constructs_pskel& p)
    {
      this->constructs_parser_ = &p;
    }

    void SimMobility_pskel::
    parsers (::sim_mob::conf::constructs_pskel& constructs)
    {
      this->constructs_parser_ = &constructs;
    }

    SimMobility_pskel::
    SimMobility_pskel ()
    : constructs_parser_ (0)
    {
    }

    // models_pskel
    //

    void models_pskel::
    lane_changing_parser (::sim_mob::conf::model_pskel& p)
    {
      this->lane_changing_parser_ = &p;
    }

    void models_pskel::
    car_following_parser (::sim_mob::conf::model_pskel& p)
    {
      this->car_following_parser_ = &p;
    }

    void models_pskel::
    intersection_driving_parser (::sim_mob::conf::model_pskel& p)
    {
      this->intersection_driving_parser_ = &p;
    }

    void models_pskel::
    sidewalk_movement_parser (::sim_mob::conf::model_pskel& p)
    {
      this->sidewalk_movement_parser_ = &p;
    }

    void models_pskel::
    parsers (::sim_mob::conf::model_pskel& lane_changing,
             ::sim_mob::conf::model_pskel& car_following,
             ::sim_mob::conf::model_pskel& intersection_driving,
             ::sim_mob::conf::model_pskel& sidewalk_movement)
    {
      this->lane_changing_parser_ = &lane_changing;
      this->car_following_parser_ = &car_following;
      this->intersection_driving_parser_ = &intersection_driving;
      this->sidewalk_movement_parser_ = &sidewalk_movement;
    }

    models_pskel::
    models_pskel ()
    : lane_changing_parser_ (0),
      car_following_parser_ (0),
      intersection_driving_parser_ (0),
      sidewalk_movement_parser_ (0)
    {
    }

    // workgroups_pskel
    //

    void workgroups_pskel::
    workgroup_parser (::sim_mob::conf::workgroup_pskel& p)
    {
      this->workgroup_parser_ = &p;
    }

    void workgroups_pskel::
    parsers (::sim_mob::conf::workgroup_pskel& workgroup)
    {
      this->workgroup_parser_ = &workgroup;
    }

    workgroups_pskel::
    workgroups_pskel ()
    : workgroup_parser_ (0)
    {
    }

    // distributions_pskel
    //

    void distributions_pskel::
    dist_parser (::sim_mob::conf::distribution_pskel& p)
    {
      this->dist_parser_ = &p;
    }

    void distributions_pskel::
    parsers (::sim_mob::conf::distribution_pskel& dist)
    {
      this->dist_parser_ = &dist;
    }

    distributions_pskel::
    distributions_pskel ()
    : dist_parser_ (0)
    {
    }

    // db_connections_pskel
    //

    void db_connections_pskel::
    connection_parser (::sim_mob::conf::db_connection_pskel& p)
    {
      this->connection_parser_ = &p;
    }

    void db_connections_pskel::
    parsers (::sim_mob::conf::db_connection_pskel& connection)
    {
      this->connection_parser_ = &connection;
    }

    db_connections_pskel::
    db_connections_pskel ()
    : connection_parser_ (0)
    {
    }

    // db_proc_groups_pskel
    //

    void db_proc_groups_pskel::
    proc_map_parser (::sim_mob::conf::proc_map_pskel& p)
    {
      this->proc_map_parser_ = &p;
    }

    void db_proc_groups_pskel::
    parsers (::sim_mob::conf::proc_map_pskel& proc_map)
    {
      this->proc_map_parser_ = &proc_map;
    }

    db_proc_groups_pskel::
    db_proc_groups_pskel ()
    : proc_map_parser_ (0)
    {
    }
  }
}

namespace sim_mob
{
  namespace conf
  {
    // model_pskel
    //

    void model_pskel::
    id (const ::std::string&)
    {
    }

    void model_pskel::
    library (const ::std::string&)
    {
    }

    void model_pskel::
    post_model ()
    {
    }

    bool model_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "id" && ns.empty ())
      {
        if (this->id_parser_)
        {
          this->id_parser_->pre ();
          this->id_parser_->_pre_impl ();
          this->id_parser_->_characters (v);
          this->id_parser_->_post_impl ();
          this->id (this->id_parser_->post_string ());
        }

        return true;
      }

      if (n == "library" && ns.empty ())
      {
        if (this->library_parser_)
        {
          this->library_parser_->pre ();
          this->library_parser_->_pre_impl ();
          this->library_parser_->_characters (v);
          this->library_parser_->_post_impl ();
          this->library (this->library_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // workgroup_pskel
    //

    void workgroup_pskel::
    id (const ::std::string&)
    {
    }

    void workgroup_pskel::
    workers (int)
    {
    }

    void workgroup_pskel::
    post_workgroup ()
    {
    }

    bool workgroup_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "id" && ns.empty ())
      {
        if (this->id_parser_)
        {
          this->id_parser_->pre ();
          this->id_parser_->_pre_impl ();
          this->id_parser_->_characters (v);
          this->id_parser_->_post_impl ();
          this->id (this->id_parser_->post_string ());
        }

        return true;
      }

      if (n == "workers" && ns.empty ())
      {
        if (this->workers_parser_)
        {
          this->workers_parser_->pre ();
          this->workers_parser_->_pre_impl ();
          this->workers_parser_->_characters (v);
          this->workers_parser_->_post_impl ();
          this->workers (this->workers_parser_->post_int ());
        }

        return true;
      }

      return false;
    }

    // distribution_pskel
    //

    void distribution_pskel::
    id (const ::std::string&)
    {
    }

    void distribution_pskel::
    type (const ::std::string&)
    {
    }

    void distribution_pskel::
    mean (int)
    {
    }

    void distribution_pskel::
    stdev (int)
    {
    }

    void distribution_pskel::
    post_distribution ()
    {
    }

    bool distribution_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "id" && ns.empty ())
      {
        if (this->id_parser_)
        {
          this->id_parser_->pre ();
          this->id_parser_->_pre_impl ();
          this->id_parser_->_characters (v);
          this->id_parser_->_post_impl ();
          this->id (this->id_parser_->post_string ());
        }

        return true;
      }

      if (n == "type" && ns.empty ())
      {
        if (this->type_parser_)
        {
          this->type_parser_->pre ();
          this->type_parser_->_pre_impl ();
          this->type_parser_->_characters (v);
          this->type_parser_->_post_impl ();
          this->type (this->type_parser_->post_string ());
        }

        return true;
      }

      if (n == "mean" && ns.empty ())
      {
        if (this->mean_parser_)
        {
          this->mean_parser_->pre ();
          this->mean_parser_->_pre_impl ();
          this->mean_parser_->_characters (v);
          this->mean_parser_->_post_impl ();
          this->mean (this->mean_parser_->post_int ());
        }

        return true;
      }

      if (n == "stdev" && ns.empty ())
      {
        if (this->stdev_parser_)
        {
          this->stdev_parser_->pre ();
          this->stdev_parser_->_pre_impl ();
          this->stdev_parser_->_characters (v);
          this->stdev_parser_->_post_impl ();
          this->stdev (this->stdev_parser_->post_int ());
        }

        return true;
      }

      return false;
    }

    // db_connection_pskel
    //

    void db_connection_pskel::
    param ()
    {
    }

    void db_connection_pskel::
    id (const ::std::string&)
    {
    }

    void db_connection_pskel::
    dbtype (const ::std::string&)
    {
    }

    void db_connection_pskel::
    post_db_connection ()
    {
    }

    bool db_connection_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "param" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->param_parser_;

        if (this->param_parser_)
          this->param_parser_->pre ();

        return true;
      }

      return false;
    }

    bool db_connection_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "param" && ns.empty ())
      {
        if (this->param_parser_)
        {
          this->param_parser_->post_db_param ();
          this->param ();
        }

        return true;
      }

      return false;
    }

    bool db_connection_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "id" && ns.empty ())
      {
        if (this->id_parser_)
        {
          this->id_parser_->pre ();
          this->id_parser_->_pre_impl ();
          this->id_parser_->_characters (v);
          this->id_parser_->_post_impl ();
          this->id (this->id_parser_->post_string ());
        }

        return true;
      }

      if (n == "dbtype" && ns.empty ())
      {
        if (this->dbtype_parser_)
        {
          this->dbtype_parser_->pre ();
          this->dbtype_parser_->_pre_impl ();
          this->dbtype_parser_->_characters (v);
          this->dbtype_parser_->_post_impl ();
          this->dbtype (this->dbtype_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // db_param_pskel
    //

    void db_param_pskel::
    name (const ::std::string&)
    {
    }

    void db_param_pskel::
    value (const ::std::string&)
    {
    }

    void db_param_pskel::
    post_db_param ()
    {
    }

    bool db_param_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "name" && ns.empty ())
      {
        if (this->name_parser_)
        {
          this->name_parser_->pre ();
          this->name_parser_->_pre_impl ();
          this->name_parser_->_characters (v);
          this->name_parser_->_post_impl ();
          this->name (this->name_parser_->post_string ());
        }

        return true;
      }

      if (n == "value" && ns.empty ())
      {
        if (this->value_parser_)
        {
          this->value_parser_->pre ();
          this->value_parser_->_pre_impl ();
          this->value_parser_->_characters (v);
          this->value_parser_->_post_impl ();
          this->value (this->value_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // db_proc_mapping_pskel
    //

    void db_proc_mapping_pskel::
    name (const ::std::string&)
    {
    }

    void db_proc_mapping_pskel::
    procedure (const ::std::string&)
    {
    }

    void db_proc_mapping_pskel::
    post_db_proc_mapping ()
    {
    }

    bool db_proc_mapping_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "name" && ns.empty ())
      {
        if (this->name_parser_)
        {
          this->name_parser_->pre ();
          this->name_parser_->_pre_impl ();
          this->name_parser_->_characters (v);
          this->name_parser_->_post_impl ();
          this->name (this->name_parser_->post_string ());
        }

        return true;
      }

      if (n == "procedure" && ns.empty ())
      {
        if (this->procedure_parser_)
        {
          this->procedure_parser_->pre ();
          this->procedure_parser_->_pre_impl ();
          this->procedure_parser_->_characters (v);
          this->procedure_parser_->_post_impl ();
          this->procedure (this->procedure_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // proc_map_pskel
    //

    void proc_map_pskel::
    mapping ()
    {
    }

    void proc_map_pskel::
    id (const ::std::string&)
    {
    }

    void proc_map_pskel::
    format (const ::std::string&)
    {
    }

    void proc_map_pskel::
    post_proc_map ()
    {
    }

    bool proc_map_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "mapping" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->mapping_parser_;

        if (this->mapping_parser_)
          this->mapping_parser_->pre ();

        return true;
      }

      return false;
    }

    bool proc_map_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "mapping" && ns.empty ())
      {
        if (this->mapping_parser_)
        {
          this->mapping_parser_->post_db_proc_mapping ();
          this->mapping ();
        }

        return true;
      }

      return false;
    }

    bool proc_map_pskel::
    _attribute_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string& v)
    {
      if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
        return true;

      if (n == "id" && ns.empty ())
      {
        if (this->id_parser_)
        {
          this->id_parser_->pre ();
          this->id_parser_->_pre_impl ();
          this->id_parser_->_characters (v);
          this->id_parser_->_post_impl ();
          this->id (this->id_parser_->post_string ());
        }

        return true;
      }

      if (n == "format" && ns.empty ())
      {
        if (this->format_parser_)
        {
          this->format_parser_->pre ();
          this->format_parser_->_pre_impl ();
          this->format_parser_->_characters (v);
          this->format_parser_->_post_impl ();
          this->format (this->format_parser_->post_string ());
        }

        return true;
      }

      return false;
    }

    // constructs_pskel
    //

    void constructs_pskel::
    models ()
    {
    }

    void constructs_pskel::
    workgroups ()
    {
    }

    void constructs_pskel::
    distributions ()
    {
    }

    void constructs_pskel::
    db_connections ()
    {
    }

    void constructs_pskel::
    db_proc_groups ()
    {
    }

    void constructs_pskel::
    post_constructs ()
    {
    }

    bool constructs_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "models" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->models_parser_;

        if (this->models_parser_)
          this->models_parser_->pre ();

        return true;
      }

      if (n == "workgroups" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->workgroups_parser_;

        if (this->workgroups_parser_)
          this->workgroups_parser_->pre ();

        return true;
      }

      if (n == "distributions" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->distributions_parser_;

        if (this->distributions_parser_)
          this->distributions_parser_->pre ();

        return true;
      }

      if (n == "db_connections" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->db_connections_parser_;

        if (this->db_connections_parser_)
          this->db_connections_parser_->pre ();

        return true;
      }

      if (n == "db_proc_groups" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->db_proc_groups_parser_;

        if (this->db_proc_groups_parser_)
          this->db_proc_groups_parser_->pre ();

        return true;
      }

      return false;
    }

    bool constructs_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "models" && ns.empty ())
      {
        if (this->models_parser_)
        {
          this->models_parser_->post_models ();
          this->models ();
        }

        return true;
      }

      if (n == "workgroups" && ns.empty ())
      {
        if (this->workgroups_parser_)
        {
          this->workgroups_parser_->post_workgroups ();
          this->workgroups ();
        }

        return true;
      }

      if (n == "distributions" && ns.empty ())
      {
        if (this->distributions_parser_)
        {
          this->distributions_parser_->post_distributions ();
          this->distributions ();
        }

        return true;
      }

      if (n == "db_connections" && ns.empty ())
      {
        if (this->db_connections_parser_)
        {
          this->db_connections_parser_->post_db_connections ();
          this->db_connections ();
        }

        return true;
      }

      if (n == "db_proc_groups" && ns.empty ())
      {
        if (this->db_proc_groups_parser_)
        {
          this->db_proc_groups_parser_->post_db_proc_groups ();
          this->db_proc_groups ();
        }

        return true;
      }

      return false;
    }

    // SimMobility_pskel
    //

    void SimMobility_pskel::
    constructs ()
    {
    }

    void SimMobility_pskel::
    post_SimMobility ()
    {
    }

    bool SimMobility_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "constructs" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->constructs_parser_;

        if (this->constructs_parser_)
          this->constructs_parser_->pre ();

        return true;
      }

      return false;
    }

    bool SimMobility_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "constructs" && ns.empty ())
      {
        if (this->constructs_parser_)
        {
          this->constructs_parser_->post_constructs ();
          this->constructs ();
        }

        return true;
      }

      return false;
    }

    // models_pskel
    //

    void models_pskel::
    lane_changing ()
    {
    }

    void models_pskel::
    car_following ()
    {
    }

    void models_pskel::
    intersection_driving ()
    {
    }

    void models_pskel::
    sidewalk_movement ()
    {
    }

    void models_pskel::
    post_models ()
    {
    }

    bool models_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "lane_changing" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->lane_changing_parser_;

        if (this->lane_changing_parser_)
          this->lane_changing_parser_->pre ();

        return true;
      }

      if (n == "car_following" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->car_following_parser_;

        if (this->car_following_parser_)
          this->car_following_parser_->pre ();

        return true;
      }

      if (n == "intersection_driving" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->intersection_driving_parser_;

        if (this->intersection_driving_parser_)
          this->intersection_driving_parser_->pre ();

        return true;
      }

      if (n == "sidewalk_movement" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->sidewalk_movement_parser_;

        if (this->sidewalk_movement_parser_)
          this->sidewalk_movement_parser_->pre ();

        return true;
      }

      return false;
    }

    bool models_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "lane_changing" && ns.empty ())
      {
        if (this->lane_changing_parser_)
        {
          this->lane_changing_parser_->post_model ();
          this->lane_changing ();
        }

        return true;
      }

      if (n == "car_following" && ns.empty ())
      {
        if (this->car_following_parser_)
        {
          this->car_following_parser_->post_model ();
          this->car_following ();
        }

        return true;
      }

      if (n == "intersection_driving" && ns.empty ())
      {
        if (this->intersection_driving_parser_)
        {
          this->intersection_driving_parser_->post_model ();
          this->intersection_driving ();
        }

        return true;
      }

      if (n == "sidewalk_movement" && ns.empty ())
      {
        if (this->sidewalk_movement_parser_)
        {
          this->sidewalk_movement_parser_->post_model ();
          this->sidewalk_movement ();
        }

        return true;
      }

      return false;
    }

    // workgroups_pskel
    //

    void workgroups_pskel::
    workgroup ()
    {
    }

    void workgroups_pskel::
    post_workgroups ()
    {
    }

    bool workgroups_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "workgroup" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->workgroup_parser_;

        if (this->workgroup_parser_)
          this->workgroup_parser_->pre ();

        return true;
      }

      return false;
    }

    bool workgroups_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "workgroup" && ns.empty ())
      {
        if (this->workgroup_parser_)
        {
          this->workgroup_parser_->post_workgroup ();
          this->workgroup ();
        }

        return true;
      }

      return false;
    }

    // distributions_pskel
    //

    void distributions_pskel::
    dist ()
    {
    }

    void distributions_pskel::
    post_distributions ()
    {
    }

    bool distributions_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "dist" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->dist_parser_;

        if (this->dist_parser_)
          this->dist_parser_->pre ();

        return true;
      }

      return false;
    }

    bool distributions_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "dist" && ns.empty ())
      {
        if (this->dist_parser_)
        {
          this->dist_parser_->post_distribution ();
          this->dist ();
        }

        return true;
      }

      return false;
    }

    // db_connections_pskel
    //

    void db_connections_pskel::
    connection ()
    {
    }

    void db_connections_pskel::
    post_db_connections ()
    {
    }

    bool db_connections_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "connection" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->connection_parser_;

        if (this->connection_parser_)
          this->connection_parser_->pre ();

        return true;
      }

      return false;
    }

    bool db_connections_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "connection" && ns.empty ())
      {
        if (this->connection_parser_)
        {
          this->connection_parser_->post_db_connection ();
          this->connection ();
        }

        return true;
      }

      return false;
    }

    // db_proc_groups_pskel
    //

    void db_proc_groups_pskel::
    proc_map ()
    {
    }

    void db_proc_groups_pskel::
    post_db_proc_groups ()
    {
    }

    bool db_proc_groups_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "proc_map" && ns.empty ())
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->proc_map_parser_;

        if (this->proc_map_parser_)
          this->proc_map_parser_->pre ();

        return true;
      }

      return false;
    }

    bool db_proc_groups_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "proc_map" && ns.empty ())
      {
        if (this->proc_map_parser_)
        {
          this->proc_map_parser_->post_proc_map ();
          this->proc_map ();
        }

        return true;
      }

      return false;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

