// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CONF1_PSKEL_HPP
#define CONF1_PSKEL_HPP

// Begin prologue.
//
// NOTE: Do *not* edit the -pskel.* files; they are generated automatically from the xsd file. 
//       Instead, modify the -pimpl.* files. ~Seth
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace sim_mob
{
  namespace conf
  {
    class model_pskel;
    class workgroup_pskel;
    class distribution_pskel;
    class db_connection_pskel;
    class db_param_pskel;
    class db_proc_mapping_pskel;
    class proc_map_pskel;
    class default_model_pskel;
    class workgroup_mapping_pskel;
    class gen_prop_pskel;
    class val_units_pskel;
    class dist_mapping_pskel;
    class database_loader_pskel;
    class xml_loader_pskel;
    class road_network_pskel;
    class trip_chains_pskel;
    class signals_pskel;
    class driver_explicit_pskel;
    class drivers_pskel;
    class pedestrian_explicit_pskel;
    class pedestrians_pskel;
    class busdrivers_pskel;
    class constructs_pskel;
    class system_pskel;
    class simulation_pskel;
    class SimMobility_pskel;
    class models_pskel;
    class workgroups_pskel;
    class distributions_pskel;
    class db_connections_pskel;
    class db_proc_groups_pskel;
    class default_models_pskel;
    class workgroup_mappings_pskel;
    class generic_props_pskel;
    class start_time_pskel;
    class granularities_pskel;
    class react_times_pskel;
    class geospatial_pskel;
    class agents_pskel;
  }
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/non-validating/parser.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

#include "conf/Config.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::non_validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::non_validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::non_validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::non_validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::non_validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::non_validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::non_validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::non_validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::non_validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::non_validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::non_validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::non_validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::non_validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::non_validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::non_validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::non_validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::non_validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::non_validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::non_validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::non_validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::non_validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::non_validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::non_validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::non_validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::non_validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::non_validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::non_validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::non_validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::non_validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::non_validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::non_validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::non_validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::non_validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::non_validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::non_validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::non_validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::non_validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

namespace sim_mob
{
  namespace conf
  {
    class model_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      id (const ::std::string&);

      virtual void
      library (const ::std::string&);

      virtual std::pair<std::string, std::string>
      post_model () = 0;

      // Parser construction API.
      //
      void
      id_parser (::xml_schema::string_pskel&);

      void
      library_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* id */,
               ::xml_schema::string_pskel& /* library */);

      // Constructor.
      //
      model_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* id_parser_;
      ::xml_schema::string_pskel* library_parser_;
    };

    class workgroup_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      id (const ::std::string&);

      virtual void
      workers (int);

      virtual std::pair<std::string, sim_mob::WorkGroupFactory>
      post_workgroup () = 0;

      // Parser construction API.
      //
      void
      id_parser (::xml_schema::string_pskel&);

      void
      workers_parser (::xml_schema::int_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* id */,
               ::xml_schema::int_pskel& /* workers */);

      // Constructor.
      //
      workgroup_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* id_parser_;
      ::xml_schema::int_pskel* workers_parser_;
    };

    class distribution_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      id (const ::std::string&);

      virtual void
      type (const ::std::string&);

      virtual void
      mean (int);

      virtual void
      stdev (int);

      virtual std::pair<std::string, sim_mob::ReactionTimeDist*>
      post_distribution () = 0;

      // Parser construction API.
      //
      void
      id_parser (::xml_schema::string_pskel&);

      void
      type_parser (::xml_schema::string_pskel&);

      void
      mean_parser (::xml_schema::int_pskel&);

      void
      stdev_parser (::xml_schema::int_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* id */,
               ::xml_schema::string_pskel& /* type */,
               ::xml_schema::int_pskel& /* mean */,
               ::xml_schema::int_pskel& /* stdev */);

      // Constructor.
      //
      distribution_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* id_parser_;
      ::xml_schema::string_pskel* type_parser_;
      ::xml_schema::int_pskel* mean_parser_;
      ::xml_schema::int_pskel* stdev_parser_;
    };

    class db_connection_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      param (const std::pair<std::string, std::string>&);

      virtual void
      id (const ::std::string&);

      virtual void
      dbtype (const ::std::string&);

      virtual std::pair<std::string, sim_mob::DatabaseConnection>
      post_db_connection () = 0;

      // Parser construction API.
      //
      void
      param_parser (::sim_mob::conf::db_param_pskel&);

      void
      id_parser (::xml_schema::string_pskel&);

      void
      dbtype_parser (::xml_schema::string_pskel&);

      void
      parsers (::sim_mob::conf::db_param_pskel& /* param */,
               ::xml_schema::string_pskel& /* id */,
               ::xml_schema::string_pskel& /* dbtype */);

      // Constructor.
      //
      db_connection_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::db_param_pskel* param_parser_;
      ::xml_schema::string_pskel* id_parser_;
      ::xml_schema::string_pskel* dbtype_parser_;
    };

    class db_param_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      name (const ::std::string&);

      virtual void
      value (const ::std::string&);

      virtual std::pair<std::string, std::string>
      post_db_param () = 0;

      // Parser construction API.
      //
      void
      name_parser (::xml_schema::string_pskel&);

      void
      value_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* name */,
               ::xml_schema::string_pskel& /* value */);

      // Constructor.
      //
      db_param_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* name_parser_;
      ::xml_schema::string_pskel* value_parser_;
    };

    class db_proc_mapping_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      name (const ::std::string&);

      virtual void
      procedure (const ::std::string&);

      virtual void
      post_db_proc_mapping ();

      // Parser construction API.
      //
      void
      name_parser (::xml_schema::string_pskel&);

      void
      procedure_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* name */,
               ::xml_schema::string_pskel& /* procedure */);

      // Constructor.
      //
      db_proc_mapping_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* name_parser_;
      ::xml_schema::string_pskel* procedure_parser_;
    };

    class proc_map_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      mapping ();

      virtual void
      id (const ::std::string&);

      virtual void
      format (const ::std::string&);

      virtual void
      post_proc_map ();

      // Parser construction API.
      //
      void
      mapping_parser (::sim_mob::conf::db_proc_mapping_pskel&);

      void
      id_parser (::xml_schema::string_pskel&);

      void
      format_parser (::xml_schema::string_pskel&);

      void
      parsers (::sim_mob::conf::db_proc_mapping_pskel& /* mapping */,
               ::xml_schema::string_pskel& /* id */,
               ::xml_schema::string_pskel& /* format */);

      // Constructor.
      //
      proc_map_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::db_proc_mapping_pskel* mapping_parser_;
      ::xml_schema::string_pskel* id_parser_;
      ::xml_schema::string_pskel* format_parser_;
    };

    class default_model_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      type (const ::std::string&);

      virtual void
      default_ (const ::std::string&);

      virtual void
      post_default_model ();

      // Parser construction API.
      //
      void
      type_parser (::xml_schema::string_pskel&);

      void
      default_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* type */,
               ::xml_schema::string_pskel& /* default */);

      // Constructor.
      //
      default_model_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* type_parser_;
      ::xml_schema::string_pskel* default__parser_;
    };

    class workgroup_mapping_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      workgroup (const ::std::string&);

      virtual void
      post_workgroup_mapping ();

      // Parser construction API.
      //
      void
      workgroup_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* workgroup */);

      // Constructor.
      //
      workgroup_mapping_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* workgroup_parser_;
    };

    class gen_prop_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      key (const ::std::string&);

      virtual void
      value (const ::std::string&);

      virtual void
      post_gen_prop ();

      // Parser construction API.
      //
      void
      key_parser (::xml_schema::string_pskel&);

      void
      value_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* key */,
               ::xml_schema::string_pskel& /* value */);

      // Constructor.
      //
      gen_prop_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* key_parser_;
      ::xml_schema::string_pskel* value_parser_;
    };

    class val_units_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      value (int);

      virtual void
      units (const ::std::string&);

      virtual void
      post_val_units ();

      // Parser construction API.
      //
      void
      value_parser (::xml_schema::int_pskel&);

      void
      units_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::int_pskel& /* value */,
               ::xml_schema::string_pskel& /* units */);

      // Constructor.
      //
      val_units_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::int_pskel* value_parser_;
      ::xml_schema::string_pskel* units_parser_;
    };

    class dist_mapping_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      dist (const ::std::string&);

      virtual void
      post_dist_mapping ();

      // Parser construction API.
      //
      void
      dist_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* dist */);

      // Constructor.
      //
      dist_mapping_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* dist_parser_;
    };

    class database_loader_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      connection (const ::std::string&);

      virtual void
      mappings (const ::std::string&);

      virtual void
      post_database_loader ();

      // Parser construction API.
      //
      void
      connection_parser (::xml_schema::string_pskel&);

      void
      mappings_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* connection */,
               ::xml_schema::string_pskel& /* mappings */);

      // Constructor.
      //
      database_loader_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* connection_parser_;
      ::xml_schema::string_pskel* mappings_parser_;
    };

    class xml_loader_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      file (const ::std::string&);

      virtual void
      root_element (const ::std::string&);

      virtual void
      post_xml_loader ();

      // Parser construction API.
      //
      void
      file_parser (::xml_schema::string_pskel&);

      void
      root_element_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* file */,
               ::xml_schema::string_pskel& /* root_element */);

      // Constructor.
      //
      xml_loader_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* file_parser_;
      ::xml_schema::string_pskel* root_element_parser_;
    };

    class road_network_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      database_loader ();

      virtual void
      xml_loader ();

      virtual void
      post_road_network ();

      // Parser construction API.
      //
      void
      database_loader_parser (::sim_mob::conf::database_loader_pskel&);

      void
      xml_loader_parser (::sim_mob::conf::xml_loader_pskel&);

      void
      parsers (::sim_mob::conf::database_loader_pskel& /* database_loader */,
               ::sim_mob::conf::xml_loader_pskel& /* xml_loader */);

      // Constructor.
      //
      road_network_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::database_loader_pskel* database_loader_parser_;
      ::sim_mob::conf::xml_loader_pskel* xml_loader_parser_;
    };

    class trip_chains_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      database_loader ();

      virtual void
      xml_loader ();

      virtual void
      post_trip_chains ();

      // Parser construction API.
      //
      void
      database_loader_parser (::sim_mob::conf::database_loader_pskel&);

      void
      xml_loader_parser (::sim_mob::conf::xml_loader_pskel&);

      void
      parsers (::sim_mob::conf::database_loader_pskel& /* database_loader */,
               ::sim_mob::conf::xml_loader_pskel& /* xml_loader */);

      // Constructor.
      //
      trip_chains_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::database_loader_pskel* database_loader_parser_;
      ::sim_mob::conf::xml_loader_pskel* xml_loader_parser_;
    };

    class signals_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      database_loader ();

      virtual void
      xml_loader ();

      virtual void
      post_signals ();

      // Parser construction API.
      //
      void
      database_loader_parser (::sim_mob::conf::database_loader_pskel&);

      void
      xml_loader_parser (::sim_mob::conf::xml_loader_pskel&);

      void
      parsers (::sim_mob::conf::database_loader_pskel& /* database_loader */,
               ::sim_mob::conf::xml_loader_pskel& /* xml_loader */);

      // Constructor.
      //
      signals_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::database_loader_pskel* database_loader_parser_;
      ::sim_mob::conf::xml_loader_pskel* xml_loader_parser_;
    };

    class driver_explicit_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      property ();

      virtual void
      originPos (const ::std::string&);

      virtual void
      destPos (const ::std::string&);

      virtual void
      startTime (const ::std::string&);

      virtual void
      startFrame (int);

      virtual void
      post_driver_explicit ();

      // Parser construction API.
      //
      void
      property_parser (::sim_mob::conf::gen_prop_pskel&);

      void
      originPos_parser (::xml_schema::string_pskel&);

      void
      destPos_parser (::xml_schema::string_pskel&);

      void
      startTime_parser (::xml_schema::string_pskel&);

      void
      startFrame_parser (::xml_schema::int_pskel&);

      void
      parsers (::sim_mob::conf::gen_prop_pskel& /* property */,
               ::xml_schema::string_pskel& /* originPos */,
               ::xml_schema::string_pskel& /* destPos */,
               ::xml_schema::string_pskel& /* startTime */,
               ::xml_schema::int_pskel& /* startFrame */);

      // Constructor.
      //
      driver_explicit_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::gen_prop_pskel* property_parser_;
      ::xml_schema::string_pskel* originPos_parser_;
      ::xml_schema::string_pskel* destPos_parser_;
      ::xml_schema::string_pskel* startTime_parser_;
      ::xml_schema::int_pskel* startFrame_parser_;
    };

    class drivers_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      database_loader ();

      virtual void
      xml_loader ();

      virtual void
      driver ();

      virtual void
      post_drivers ();

      // Parser construction API.
      //
      void
      database_loader_parser (::sim_mob::conf::database_loader_pskel&);

      void
      xml_loader_parser (::sim_mob::conf::xml_loader_pskel&);

      void
      driver_parser (::sim_mob::conf::driver_explicit_pskel&);

      void
      parsers (::sim_mob::conf::database_loader_pskel& /* database_loader */,
               ::sim_mob::conf::xml_loader_pskel& /* xml_loader */,
               ::sim_mob::conf::driver_explicit_pskel& /* driver */);

      // Constructor.
      //
      drivers_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::database_loader_pskel* database_loader_parser_;
      ::sim_mob::conf::xml_loader_pskel* xml_loader_parser_;
      ::sim_mob::conf::driver_explicit_pskel* driver_parser_;
    };

    class pedestrian_explicit_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      property ();

      virtual void
      originPos (const ::std::string&);

      virtual void
      destPos (const ::std::string&);

      virtual void
      startTime (const ::std::string&);

      virtual void
      startFrame (int);

      virtual void
      post_pedestrian_explicit ();

      // Parser construction API.
      //
      void
      property_parser (::sim_mob::conf::gen_prop_pskel&);

      void
      originPos_parser (::xml_schema::string_pskel&);

      void
      destPos_parser (::xml_schema::string_pskel&);

      void
      startTime_parser (::xml_schema::string_pskel&);

      void
      startFrame_parser (::xml_schema::int_pskel&);

      void
      parsers (::sim_mob::conf::gen_prop_pskel& /* property */,
               ::xml_schema::string_pskel& /* originPos */,
               ::xml_schema::string_pskel& /* destPos */,
               ::xml_schema::string_pskel& /* startTime */,
               ::xml_schema::int_pskel& /* startFrame */);

      // Constructor.
      //
      pedestrian_explicit_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::gen_prop_pskel* property_parser_;
      ::xml_schema::string_pskel* originPos_parser_;
      ::xml_schema::string_pskel* destPos_parser_;
      ::xml_schema::string_pskel* startTime_parser_;
      ::xml_schema::int_pskel* startFrame_parser_;
    };

    class pedestrians_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      database_loader ();

      virtual void
      xml_loader ();

      virtual void
      pedestrian ();

      virtual void
      post_pedestrians ();

      // Parser construction API.
      //
      void
      database_loader_parser (::sim_mob::conf::database_loader_pskel&);

      void
      xml_loader_parser (::sim_mob::conf::xml_loader_pskel&);

      void
      pedestrian_parser (::sim_mob::conf::pedestrian_explicit_pskel&);

      void
      parsers (::sim_mob::conf::database_loader_pskel& /* database_loader */,
               ::sim_mob::conf::xml_loader_pskel& /* xml_loader */,
               ::sim_mob::conf::pedestrian_explicit_pskel& /* pedestrian */);

      // Constructor.
      //
      pedestrians_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::database_loader_pskel* database_loader_parser_;
      ::sim_mob::conf::xml_loader_pskel* xml_loader_parser_;
      ::sim_mob::conf::pedestrian_explicit_pskel* pedestrian_parser_;
    };

    class busdrivers_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      database_loader ();

      virtual void
      xml_loader ();

      virtual void
      post_busdrivers ();

      // Parser construction API.
      //
      void
      database_loader_parser (::sim_mob::conf::database_loader_pskel&);

      void
      xml_loader_parser (::sim_mob::conf::xml_loader_pskel&);

      void
      parsers (::sim_mob::conf::database_loader_pskel& /* database_loader */,
               ::sim_mob::conf::xml_loader_pskel& /* xml_loader */);

      // Constructor.
      //
      busdrivers_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::database_loader_pskel* database_loader_parser_;
      ::sim_mob::conf::xml_loader_pskel* xml_loader_parser_;
    };

    class constructs_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      models ();

      virtual void
      workgroups ();

      virtual void
      distributions ();

      virtual void
      db_connections ();

      virtual void
      db_proc_groups ();

      virtual void
      post_constructs ();

      // Parser construction API.
      //
      void
      models_parser (::sim_mob::conf::models_pskel&);

      void
      workgroups_parser (::sim_mob::conf::workgroups_pskel&);

      void
      distributions_parser (::sim_mob::conf::distributions_pskel&);

      void
      db_connections_parser (::sim_mob::conf::db_connections_pskel&);

      void
      db_proc_groups_parser (::sim_mob::conf::db_proc_groups_pskel&);

      void
      parsers (::sim_mob::conf::models_pskel& /* models */,
               ::sim_mob::conf::workgroups_pskel& /* workgroups */,
               ::sim_mob::conf::distributions_pskel& /* distributions */,
               ::sim_mob::conf::db_connections_pskel& /* db_connections */,
               ::sim_mob::conf::db_proc_groups_pskel& /* db_proc_groups */);

      // Constructor.
      //
      constructs_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::models_pskel* models_parser_;
      ::sim_mob::conf::workgroups_pskel* workgroups_parser_;
      ::sim_mob::conf::distributions_pskel* distributions_parser_;
      ::sim_mob::conf::db_connections_pskel* db_connections_parser_;
      ::sim_mob::conf::db_proc_groups_pskel* db_proc_groups_parser_;
    };

    class system_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      default_models ();

      virtual void
      workgroup_mappings ();

      virtual void
      generic_props ();

      virtual void
      post_system ();

      // Parser construction API.
      //
      void
      default_models_parser (::sim_mob::conf::default_models_pskel&);

      void
      workgroup_mappings_parser (::sim_mob::conf::workgroup_mappings_pskel&);

      void
      generic_props_parser (::sim_mob::conf::generic_props_pskel&);

      void
      parsers (::sim_mob::conf::default_models_pskel& /* default_models */,
               ::sim_mob::conf::workgroup_mappings_pskel& /* workgroup_mappings */,
               ::sim_mob::conf::generic_props_pskel& /* generic_props */);

      // Constructor.
      //
      system_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::default_models_pskel* default_models_parser_;
      ::sim_mob::conf::workgroup_mappings_pskel* workgroup_mappings_parser_;
      ::sim_mob::conf::generic_props_pskel* generic_props_parser_;
    };

    class simulation_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      base_granularity ();

      virtual void
      total_runtime ();

      virtual void
      total_warmup ();

      virtual void
      start_time ();

      virtual void
      granularities ();

      virtual void
      react_times ();

      virtual void
      geospatial ();

      virtual void
      agents ();

      virtual void
      post_simulation ();

      // Parser construction API.
      //
      void
      base_granularity_parser (::sim_mob::conf::val_units_pskel&);

      void
      total_runtime_parser (::sim_mob::conf::val_units_pskel&);

      void
      total_warmup_parser (::sim_mob::conf::val_units_pskel&);

      void
      start_time_parser (::sim_mob::conf::start_time_pskel&);

      void
      granularities_parser (::sim_mob::conf::granularities_pskel&);

      void
      react_times_parser (::sim_mob::conf::react_times_pskel&);

      void
      geospatial_parser (::sim_mob::conf::geospatial_pskel&);

      void
      agents_parser (::sim_mob::conf::agents_pskel&);

      void
      parsers (::sim_mob::conf::val_units_pskel& /* base_granularity */,
               ::sim_mob::conf::val_units_pskel& /* total_runtime */,
               ::sim_mob::conf::val_units_pskel& /* total_warmup */,
               ::sim_mob::conf::start_time_pskel& /* start_time */,
               ::sim_mob::conf::granularities_pskel& /* granularities */,
               ::sim_mob::conf::react_times_pskel& /* react_times */,
               ::sim_mob::conf::geospatial_pskel& /* geospatial */,
               ::sim_mob::conf::agents_pskel& /* agents */);

      // Constructor.
      //
      simulation_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::val_units_pskel* base_granularity_parser_;
      ::sim_mob::conf::val_units_pskel* total_runtime_parser_;
      ::sim_mob::conf::val_units_pskel* total_warmup_parser_;
      ::sim_mob::conf::start_time_pskel* start_time_parser_;
      ::sim_mob::conf::granularities_pskel* granularities_parser_;
      ::sim_mob::conf::react_times_pskel* react_times_parser_;
      ::sim_mob::conf::geospatial_pskel* geospatial_parser_;
      ::sim_mob::conf::agents_pskel* agents_parser_;
    };

    class SimMobility_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      constructs ();

      virtual void
      single_threaded (bool);

      virtual void
      system ();

      virtual void
      simulation ();

      virtual void
      post_SimMobility ();

      // Parser construction API.
      //
      void
      constructs_parser (::sim_mob::conf::constructs_pskel&);

      void
      single_threaded_parser (::xml_schema::boolean_pskel&);

      void
      system_parser (::sim_mob::conf::system_pskel&);

      void
      simulation_parser (::sim_mob::conf::simulation_pskel&);

      void
      parsers (::sim_mob::conf::constructs_pskel& /* constructs */,
               ::xml_schema::boolean_pskel& /* single_threaded */,
               ::sim_mob::conf::system_pskel& /* system */,
               ::sim_mob::conf::simulation_pskel& /* simulation */);

      // Constructor.
      //
      SimMobility_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::constructs_pskel* constructs_parser_;
      ::xml_schema::boolean_pskel* single_threaded_parser_;
      ::sim_mob::conf::system_pskel* system_parser_;
      ::sim_mob::conf::simulation_pskel* simulation_parser_;
    };

    class models_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      lane_changing (const std::pair<std::string, std::string>&);

      virtual void
      car_following (const std::pair<std::string, std::string>&);

      virtual void
      intersection_driving (const std::pair<std::string, std::string>&);

      virtual void
      sidewalk_movement (const std::pair<std::string, std::string>&);

      virtual void
      post_models ();

      // Parser construction API.
      //
      void
      lane_changing_parser (::sim_mob::conf::model_pskel&);

      void
      car_following_parser (::sim_mob::conf::model_pskel&);

      void
      intersection_driving_parser (::sim_mob::conf::model_pskel&);

      void
      sidewalk_movement_parser (::sim_mob::conf::model_pskel&);

      void
      parsers (::sim_mob::conf::model_pskel& /* lane_changing */,
               ::sim_mob::conf::model_pskel& /* car_following */,
               ::sim_mob::conf::model_pskel& /* intersection_driving */,
               ::sim_mob::conf::model_pskel& /* sidewalk_movement */);

      // Constructor.
      //
      models_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::model_pskel* lane_changing_parser_;
      ::sim_mob::conf::model_pskel* car_following_parser_;
      ::sim_mob::conf::model_pskel* intersection_driving_parser_;
      ::sim_mob::conf::model_pskel* sidewalk_movement_parser_;
    };

    class workgroups_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      workgroup (const std::pair<std::string, sim_mob::WorkGroupFactory>&);

      virtual void
      post_workgroups ();

      // Parser construction API.
      //
      void
      workgroup_parser (::sim_mob::conf::workgroup_pskel&);

      void
      parsers (::sim_mob::conf::workgroup_pskel& /* workgroup */);

      // Constructor.
      //
      workgroups_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::workgroup_pskel* workgroup_parser_;
    };

    class distributions_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      dist (const std::pair<std::string, sim_mob::ReactionTimeDist*>&);

      virtual void
      post_distributions ();

      // Parser construction API.
      //
      void
      dist_parser (::sim_mob::conf::distribution_pskel&);

      void
      parsers (::sim_mob::conf::distribution_pskel& /* dist */);

      // Constructor.
      //
      distributions_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::distribution_pskel* dist_parser_;
    };

    class db_connections_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      connection (const std::pair<std::string, sim_mob::DatabaseConnection>&);

      virtual void
      post_db_connections ();

      // Parser construction API.
      //
      void
      connection_parser (::sim_mob::conf::db_connection_pskel&);

      void
      parsers (::sim_mob::conf::db_connection_pskel& /* connection */);

      // Constructor.
      //
      db_connections_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::db_connection_pskel* connection_parser_;
    };

    class db_proc_groups_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      proc_map ();

      virtual void
      post_db_proc_groups ();

      // Parser construction API.
      //
      void
      proc_map_parser (::sim_mob::conf::proc_map_pskel&);

      void
      parsers (::sim_mob::conf::proc_map_pskel& /* proc_map */);

      // Constructor.
      //
      db_proc_groups_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::proc_map_pskel* proc_map_parser_;
    };

    class default_models_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      model ();

      virtual void
      post_default_models ();

      // Parser construction API.
      //
      void
      model_parser (::sim_mob::conf::default_model_pskel&);

      void
      parsers (::sim_mob::conf::default_model_pskel& /* model */);

      // Constructor.
      //
      default_models_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::default_model_pskel* model_parser_;
    };

    class workgroup_mappings_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      agents ();

      virtual void
      signals ();

      virtual void
      post_workgroup_mappings ();

      // Parser construction API.
      //
      void
      agents_parser (::sim_mob::conf::workgroup_mapping_pskel&);

      void
      signals_parser (::sim_mob::conf::workgroup_mapping_pskel&);

      void
      parsers (::sim_mob::conf::workgroup_mapping_pskel& /* agents */,
               ::sim_mob::conf::workgroup_mapping_pskel& /* signals */);

      // Constructor.
      //
      workgroup_mappings_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::workgroup_mapping_pskel* agents_parser_;
      ::sim_mob::conf::workgroup_mapping_pskel* signals_parser_;
    };

    class generic_props_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      property ();

      virtual void
      post_generic_props ();

      // Parser construction API.
      //
      void
      property_parser (::sim_mob::conf::gen_prop_pskel&);

      void
      parsers (::sim_mob::conf::gen_prop_pskel& /* property */);

      // Constructor.
      //
      generic_props_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::gen_prop_pskel* property_parser_;
    };

    class start_time_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      value (const ::std::string&);

      virtual void
      post_start_time ();

      // Parser construction API.
      //
      void
      value_parser (::xml_schema::string_pskel&);

      void
      parsers (::xml_schema::string_pskel& /* value */);

      // Constructor.
      //
      start_time_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _attribute_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

      protected:
      ::xml_schema::string_pskel* value_parser_;
    };

    class granularities_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      agent ();

      virtual void
      signal ();

      virtual void
      post_granularities ();

      // Parser construction API.
      //
      void
      agent_parser (::sim_mob::conf::val_units_pskel&);

      void
      signal_parser (::sim_mob::conf::val_units_pskel&);

      void
      parsers (::sim_mob::conf::val_units_pskel& /* agent */,
               ::sim_mob::conf::val_units_pskel& /* signal */);

      // Constructor.
      //
      granularities_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::val_units_pskel* agent_parser_;
      ::sim_mob::conf::val_units_pskel* signal_parser_;
    };

    class react_times_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      leading_vehicle ();

      virtual void
      subject_vehicle ();

      virtual void
      vehicle_gap ();

      virtual void
      post_react_times ();

      // Parser construction API.
      //
      void
      leading_vehicle_parser (::sim_mob::conf::dist_mapping_pskel&);

      void
      subject_vehicle_parser (::sim_mob::conf::dist_mapping_pskel&);

      void
      vehicle_gap_parser (::sim_mob::conf::dist_mapping_pskel&);

      void
      parsers (::sim_mob::conf::dist_mapping_pskel& /* leading_vehicle */,
               ::sim_mob::conf::dist_mapping_pskel& /* subject_vehicle */,
               ::sim_mob::conf::dist_mapping_pskel& /* vehicle_gap */);

      // Constructor.
      //
      react_times_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::dist_mapping_pskel* leading_vehicle_parser_;
      ::sim_mob::conf::dist_mapping_pskel* subject_vehicle_parser_;
      ::sim_mob::conf::dist_mapping_pskel* vehicle_gap_parser_;
    };

    class geospatial_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      road_network ();

      virtual void
      post_geospatial ();

      // Parser construction API.
      //
      void
      road_network_parser (::sim_mob::conf::road_network_pskel&);

      void
      parsers (::sim_mob::conf::road_network_pskel& /* road_network */);

      // Constructor.
      //
      geospatial_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::road_network_pskel* road_network_parser_;
    };

    class agents_pskel: public ::xml_schema::complex_content
    {
      public:
      // Parser callbacks. Override them in your implementation.
      //
      // virtual void
      // pre ();

      virtual void
      trip_chains ();

      virtual void
      signals ();

      virtual void
      drivers ();

      virtual void
      pedestrians ();

      virtual void
      busdrivers ();

      virtual void
      post_agents ();

      // Parser construction API.
      //
      void
      trip_chains_parser (::sim_mob::conf::trip_chains_pskel&);

      void
      signals_parser (::sim_mob::conf::signals_pskel&);

      void
      drivers_parser (::sim_mob::conf::drivers_pskel&);

      void
      pedestrians_parser (::sim_mob::conf::pedestrians_pskel&);

      void
      busdrivers_parser (::sim_mob::conf::busdrivers_pskel&);

      void
      parsers (::sim_mob::conf::trip_chains_pskel& /* trip_chains */,
               ::sim_mob::conf::signals_pskel& /* signals */,
               ::sim_mob::conf::drivers_pskel& /* drivers */,
               ::sim_mob::conf::pedestrians_pskel& /* pedestrians */,
               ::sim_mob::conf::busdrivers_pskel& /* busdrivers */);

      // Constructor.
      //
      agents_pskel ();

      // Implementation.
      //
      protected:
      virtual bool
      _start_element_impl (const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string&,
                           const ::xml_schema::ro_string*);

      virtual bool
      _end_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&);

      protected:
      ::sim_mob::conf::trip_chains_pskel* trip_chains_parser_;
      ::sim_mob::conf::signals_pskel* signals_parser_;
      ::sim_mob::conf::drivers_pskel* drivers_parser_;
      ::sim_mob::conf::pedestrians_pskel* pedestrians_parser_;
      ::sim_mob::conf::busdrivers_pskel* busdrivers_parser_;
    };
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CONF1_PSKEL_HPP
