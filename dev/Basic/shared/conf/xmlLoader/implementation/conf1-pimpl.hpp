// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#pragma once

#include "../skeleton/conf1-pskel.hpp"

#include <string>

#include <boost/lexical_cast.hpp>

//TODO: These helper functions should eventually go somewhere else.
namespace {
//Converts, e.g., "driver" into "Car".
//TODO: We should be able to unify our terminology here; why not just use "driver" overall?
std::string translate_mode(const std::string& src) {
	     if (src=="driver")       { return "Car"; }
	else if (src=="pedestrian")   { return "Walk"; }
	else if (src=="busdriver")    { return "Bus"; }
	else if (src=="passenger")    { return "travel"; }
	else                          { return "Unknown"; }
}



//Takes "xxxx,yyyy" or "(xxxx,yyyy)" and returns the x's and y's in a pair.
//Ignores spaces (but not tabs/newlines)
std::pair<uint32_t, uint32_t> parse_point(const std::string& src) {
	std::pair<uint32_t, uint32_t> res;
	std::stringstream curr;
	for (std::string::const_iterator it=src.begin(); it!=src.end(); it++) {
		//Skip whitespace, parens
		const char c = *it;
		if (c==' ') { continue; }
		if (c=='(' && it==src.begin()) { continue; }
		if (c==')' && (it+1)==src.end()) { continue; }

		//Append digits?
		if (c>='0' && c<='9') {
			curr <<c;
			continue;
		}

		//Done with the X's?
		if (c==',') {
			if (curr.str().empty()) { throw std::runtime_error("Can't parse point; empty X"); }
			res.first = boost::lexical_cast<uint32_t>(curr.str());
			curr.str("");
		}
	}

	//Done with the Y's
	if (curr.str().empty()) { throw std::runtime_error("Can't parse point; empty Y"); }
	res.second = boost::lexical_cast<uint32_t>(curr.str());

	return res;
}

//Helper: Parse "1ms". Also accepts "1 ms", but not much else (for now)
uint32_t parse_start_time_ms(const std::string& src) {
	//Quick check: negative numbers
	if (src.find('-')<src.size()) {
		throw std::runtime_error("start_time can't be negative.");
	}

	//Split the "number" amount off of the start time
	size_t numStart = src.find_first_of("0123456789");
	size_t numEnd = src.find_first_not_of("0123456789");
	if (numStart==0 && numEnd<src.size()) {
		int amount = boost::lexical_cast<int>(src.substr(0, numEnd));
		numStart = src.find_first_not_of(" ", numEnd);
		std::string units = src.substr(numStart);
		if (units=="ms") {
			return amount;
		}
	}

	//Error state
	throw std::runtime_error("Couldn't parse start time ms");
}
}//End un-named namespace


namespace sim_mob {

class Config;

namespace conf {

class model_pimpl: public virtual model_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, std::string> post_model ();

	virtual void id (const ::std::string&);
	virtual void library (const ::std::string&);

private:
	std::pair<std::string, std::string> model;
};


class workgroup_pimpl: public virtual workgroup_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, sim_mob::WorkGroupFactory> post_workgroup ();

	virtual void id (const ::std::string&);
	virtual void workers (int);

private:
	std::string wgID;
	int numWorkers;
};

class distribution_pimpl: public virtual distribution_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, sim_mob::ReactionTimeDist*> post_distribution ();

	virtual void id (const ::std::string&);
	virtual void type (const ::std::string&);
	virtual void mean (int);
	virtual void stdev (int);

private:
	std::string distID;
	std::string distType;
	int distMean;
	int distStdev;
};

class db_connection_pimpl: public virtual db_connection_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, sim_mob::DatabaseConnection> post_db_connection ();

	virtual void param (const std::pair<std::string, std::string>&);
	virtual void id (const ::std::string&);
	virtual void dbtype (const ::std::string&);

private:
	std::string dbcID;
	std::string dbcType;
	std::map<std::string, std::string> dbcParams;
};

class db_param_pimpl: public virtual db_param_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, std::string> post_db_param ();

	virtual void name (const ::std::string&);
    virtual void value (const ::std::string&);

private:
    std::pair<std::string, std::string> model;
};


class db_proc_mapping_pimpl: public virtual db_proc_mapping_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, std::string> post_db_proc_mapping ();

	virtual void name (const ::std::string&);
	virtual void procedure (const ::std::string&);

private:
	std::pair<std::string, std::string> model;
};


class proc_map_pimpl: public virtual proc_map_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, sim_mob::StoredProcedureMap> post_proc_map ();

	virtual void mapping (const std::pair<std::string, std::string>&);
	virtual void id (const ::std::string&);
	virtual void format (const ::std::string&);

private:
	std::string pmID;
	std::string pmFormat;
	std::map<std::string, std::string> pmParams;
};


class default_model_pimpl: public virtual default_model_pskel{
public:
	virtual void pre ();
	virtual std::pair<std::string, std::string> post_default_model ();

	virtual void type (const ::std::string&);
	virtual void default_ (const ::std::string&);

private:
	std::pair<std::string, std::string> model;
};


class workgroup_mapping_pimpl: public virtual workgroup_mapping_pskel {
public:
	virtual void pre ();
	virtual std::string post_workgroup_mapping ();

	virtual void workgroup (const ::std::string&);

private:
	std::string model;
};


class gen_prop_pimpl: public virtual gen_prop_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, std::string> post_gen_prop ();

	virtual void key (const ::std::string&);
	virtual void value (const ::std::string&);

private:
	std::pair<std::string, std::string> model;
};


class val_units_pimpl: public virtual val_units_pskel {
public:
	virtual void pre ();
	virtual sim_mob::Granularity post_val_units ();

	virtual void value (int);
	virtual void units (const ::std::string&);

private:
	std::pair<int,std::string> model;
};


class dist_mapping_pimpl: public virtual dist_mapping_pskel {
public:
	virtual void pre ();
	virtual std::string post_dist_mapping ();

	virtual void dist (const ::std::string&);

private:
	std::string model;
};


class database_loader_pimpl: public virtual database_loader_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, std::string> post_database_loader ();

	virtual void connection (const ::std::string&);
	virtual void mappings (const ::std::string&);

private:
	std::pair<std::string,std::string> model;
};


class xml_loader_pimpl: public virtual xml_loader_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, std::string> post_xml_loader ();

	virtual void file (const ::std::string&);
	virtual void root_element (const ::std::string&);

private:
	std::pair<std::string, std::string> model;
};


class road_network_pimpl: public virtual road_network_pskel {
public:
	road_network_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_road_network ();

	virtual void database_loader (const std::pair<std::string, std::string>&);
	virtual void xml_loader (const std::pair<std::string, std::string>&);

private:
	Config* config;
};


class trip_chains_pimpl: public virtual trip_chains_pskel {
public:
	trip_chains_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_trip_chains ();

	virtual void database_loader (const std::pair<std::string, std::string>&);
	virtual void xml_loader (const std::pair<std::string, std::string>&);

private:
	Config* config;
};


class signals_pimpl: public virtual signals_pskel {
public:
	signals_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_signals ();

	virtual void database_loader (const std::pair<std::string, std::string>&);
	virtual void xml_loader (const std::pair<std::string, std::string>&);

private:
	Config* config;
};


class driver_explicit_pimpl: public virtual driver_explicit_pskel {
public:
	driver_explicit_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual sim_mob::AgentSpec post_driver_explicit ();

	virtual void property (const std::pair<std::string, std::string>&);
	virtual void originPos (const ::std::string&);
	virtual void destPos (const ::std::string&);
	virtual void startTime (const ::std::string&);
	virtual void startFrame (int);

private:
	Config* config;
	sim_mob::AgentSpec model;
};


class drivers_pimpl: public virtual drivers_pskel {
public:
	drivers_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_drivers ();

	virtual void database_loader (const std::pair<std::string, std::string>&);
	virtual void xml_loader (const std::pair<std::string, std::string>&);
	virtual void driver (const sim_mob::AgentSpec&);

private:
	Config* config;
};


class pedestrian_explicit_pimpl: public virtual pedestrian_explicit_pskel {
public:
	pedestrian_explicit_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual sim_mob::AgentSpec post_pedestrian_explicit ();

	virtual void property (const std::pair<std::string, std::string>&);
	virtual void originPos (const ::std::string&);
	virtual void destPos (const ::std::string&);
	virtual void startTime (const ::std::string&);
	virtual void startFrame (int);

private:
	Config* config;
	sim_mob::AgentSpec model;
};


class pedestrians_pimpl: public virtual pedestrians_pskel {
public:
	pedestrians_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_pedestrians ();

	virtual void database_loader (const std::pair<std::string, std::string>&);
	virtual void xml_loader (const std::pair<std::string, std::string>&);
	virtual void pedestrian (const sim_mob::AgentSpec&);

private:
	Config* config;
};


class busdrivers_pimpl: public virtual busdrivers_pskel {
public:
	busdrivers_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_busdrivers ();

	virtual void database_loader (const std::pair<std::string, std::string>&);
	virtual void xml_loader (const std::pair<std::string, std::string>&);

private:
	Config* config;
};


class constructs_pimpl: public virtual constructs_pskel {
public:
	constructs_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_constructs ();

	/*virtual void models ();
	virtual void workgroups ();
	virtual void distributions ();
	virtual void db_connections ();
	virtual void db_proc_groups ();*/

private:
	Config* config;
};


class system_pimpl: public virtual system_pskel {
public:
	virtual void pre ();
	virtual void post_system ();

	virtual void default_models ();
	virtual void workgroup_mappings ();
	virtual void generic_props ();
};


class simulation_pimpl: public virtual simulation_pskel {
public:
	simulation_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_simulation ();

	virtual void base_granularity (const sim_mob::Granularity&);
	virtual void total_runtime (const sim_mob::Granularity&);
	virtual void total_warmup (const sim_mob::Granularity&);
	virtual void start_time (const sim_mob::DailyTime&);
	virtual void granularities (const std::pair<sim_mob::Granularity, sim_mob::Granularity>&);
	virtual void react_times ();
	virtual void geospatial ();
	virtual void agents ();

private:
	Config* config;
};


class SimMobility_pimpl: public virtual SimMobility_pskel {
public:
	SimMobility_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_SimMobility ();

	virtual void single_threaded (bool);

	/*virtual void constructs ();
	virtual void system ();
	virtual void simulation ();*/

private:
	Config* config;
};


class models_pimpl: public virtual models_pskel {
public:
	models_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_models ();

	virtual void lane_changing (const std::pair<std::string, std::string>&);
	virtual void car_following (const std::pair<std::string, std::string>&);
	virtual void intersection_driving (const std::pair<std::string, std::string>&);
	virtual void sidewalk_movement (const std::pair<std::string, std::string>&);

private:
	Config* config;
};


class workgroups_pimpl: public virtual workgroups_pskel {
public:
	workgroups_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_workgroups ();

	virtual void workgroup (const std::pair<std::string, sim_mob::WorkGroupFactory>&);

private:
	Config* config;
};


class distributions_pimpl: public virtual distributions_pskel {
public:
	distributions_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_distributions ();

	virtual void dist (const std::pair<std::string, sim_mob::ReactionTimeDist*>&);

private:
	Config* config;
};


class db_connections_pimpl: public virtual db_connections_pskel {
public:
	db_connections_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_db_connections ();

	virtual void connection (const std::pair<std::string, sim_mob::DatabaseConnection>&);

private:
	Config* config;
};


class db_proc_groups_pimpl: public virtual db_proc_groups_pskel {
public:
	db_proc_groups_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_db_proc_groups ();

	virtual void proc_map (const std::pair<std::string, sim_mob::StoredProcedureMap>&);

private:
	Config* config;
};


class default_models_pimpl: public virtual default_models_pskel {
public:
	default_models_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_default_models ();

	virtual void model (const std::pair<std::string, std::string>&);

private:
	Config* config;
};


class workgroup_mappings_pimpl: public virtual workgroup_mappings_pskel {
public:
	workgroup_mappings_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_workgroup_mappings ();

	virtual void agents (const std::string&);
	virtual void signals (const std::string&);

private:
	Config* config;
};


class generic_props_pimpl: public virtual generic_props_pskel {
public:
	generic_props_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_generic_props ();

	virtual void property (const std::pair<std::string, std::string>&);

private:
	Config* config;
};


class start_time_pimpl: public virtual start_time_pskel {
public:
	virtual void pre ();
	virtual sim_mob::DailyTime post_start_time ();

	virtual void value (const ::std::string&);

private:
	std::string model;
};


class granularities_pimpl: public virtual granularities_pskel {
public:
	virtual void pre ();
	virtual std::pair<sim_mob::Granularity, sim_mob::Granularity> post_granularities ();

	virtual void agent (const sim_mob::Granularity&);
	virtual void signal (const sim_mob::Granularity&);

private:
	sim_mob::Granularity agentGran;
	sim_mob::Granularity signalGran;
};


class react_times_pimpl: public virtual react_times_pskel {
public:
	react_times_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_react_times ();

	virtual void leading_vehicle (const std::string&);
	virtual void subject_vehicle (const std::string&);
	virtual void vehicle_gap (const std::string&);

private:
	Config* config;
};


class geospatial_pimpl: public virtual geospatial_pskel {
public:
	virtual void pre ();
	virtual void post_geospatial ();

	virtual void road_network ();
};


class agents_pimpl: public virtual agents_pskel {
public:
	virtual void pre ();
	virtual void post_agents ();

	virtual void trip_chains ();
	virtual void signals ();
	virtual void drivers ();
	virtual void pedestrians ();
	virtual void busdrivers ();
};

}} //End namespace sim_mob::conf


