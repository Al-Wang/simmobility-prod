// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#pragma once

#include "../skeleton/conf1-pskel.hpp"

#include <string>

namespace sim_mob {

class Config;

namespace conf {

class model_pimpl: public virtual model_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, std::string> post_model ();

	virtual void id (const ::std::string&);
	virtual void library (const ::std::string&);

private:
	std::pair<std::string, std::string> model;
};


class workgroup_pimpl: public virtual workgroup_pskel {
public:
	virtual void pre ();
	virtual std::pair<std::string, sim_mob::WorkGroupFactory> post_workgroup ();

	virtual void id (const ::std::string&);
	virtual void workers (int);

private:
	std::string wgID;
	int numWorkers;
};

class distribution_pimpl: public virtual distribution_pskel {
public:
	virtual void pre ();
	virtual void post_distribution ();

	virtual void id (const ::std::string&);
	virtual void type (const ::std::string&);
	virtual void mean (int);
	virtual void stdev (int);
};

class db_connection_pimpl: public virtual db_connection_pskel {
public:
	virtual void pre ();
	virtual void post_db_connection ();

	virtual void param ();
	virtual void id (const ::std::string&);
	virtual void dbtype (const ::std::string&);
};

class db_param_pimpl: public virtual db_param_pskel {
public:
	virtual void pre ();
	virtual void post_db_param ();

	virtual void name (const ::std::string&);
    virtual void value (const ::std::string&);
};


class db_proc_mapping_pimpl: public virtual db_proc_mapping_pskel {
public:
	virtual void pre ();
	virtual void post_db_proc_mapping ();

	virtual void name (const ::std::string&);
	virtual void procedure (const ::std::string&);
};


class proc_map_pimpl: public virtual proc_map_pskel {
public:
	virtual void pre ();
	virtual void post_proc_map ();

	virtual void mapping ();
	virtual void id (const ::std::string&);
	virtual void format (const ::std::string&);
};


class default_model_pimpl: public virtual default_model_pskel{
public:
	virtual void pre ();
	virtual void post_default_model ();

	virtual void type (const ::std::string&);
	virtual void default_ (const ::std::string&);
};


class workgroup_mapping_pimpl: public virtual workgroup_mapping_pskel {
public:
	virtual void pre ();
	virtual void post_workgroup_mapping ();

	virtual void workgroup (const ::std::string&);
};


class gen_prop_pimpl: public virtual gen_prop_pskel {
public:
	virtual void pre ();
	virtual void post_gen_prop ();

	virtual void key (const ::std::string&);
	virtual void value (const ::std::string&);
};


class val_units_pimpl: public virtual val_units_pskel {
public:
	virtual void pre ();
	virtual void post_val_units ();

	virtual void value (int);
	virtual void units (const ::std::string&);
};


class dist_mapping_pimpl: public virtual dist_mapping_pskel {
public:
	virtual void pre ();
	virtual void post_dist_mapping ();

	virtual void dist (const ::std::string&);
};


class database_loader_pimpl: public virtual database_loader_pskel {
public:
	virtual void pre ();
	virtual void post_database_loader ();

	virtual void connection (const ::std::string&);
	virtual void mappings (const ::std::string&);
};


class xml_loader_pimpl: public virtual xml_loader_pskel {
public:
	virtual void pre ();
	virtual void post_xml_loader ();

	virtual void file (const ::std::string&);
	virtual void root_element (const ::std::string&);
};


class road_network_pimpl: public virtual road_network_pskel {
public:
	virtual void pre ();
	virtual void post_road_network ();

	virtual void database_loader ();
	virtual void xml_loader ();
};


class trip_chains_pimpl: public virtual trip_chains_pskel {
public:
	virtual void pre ();
	virtual void post_trip_chains ();

	virtual void database_loader ();
	virtual void xml_loader ();
};


class signals_pimpl: public virtual signals_pskel {
public:
	virtual void pre ();
	virtual void post_signals ();

	virtual void database_loader ();
	virtual void xml_loader ();
};


class driver_explicit_pimpl: public virtual driver_explicit_pskel {
public:
	virtual void pre ();
	virtual void post_driver_explicit ();

	virtual void property ();
	virtual void originPos (const ::std::string&);
	virtual void destPos (const ::std::string&);
	virtual void startTime (const ::std::string&);
	virtual void startFrame (int);
};


class drivers_pimpl: public virtual drivers_pskel {
public:
	virtual void pre ();
	virtual void post_drivers ();

	virtual void database_loader ();
	virtual void xml_loader ();
	virtual void driver ();
};


class pedestrian_explicit_pimpl: public virtual pedestrian_explicit_pskel {
public:
	virtual void pre ();
	virtual void post_pedestrian_explicit ();

	virtual void property ();
	virtual void originPos (const ::std::string&);
	virtual void destPos (const ::std::string&);
	virtual void startTime (const ::std::string&);
	virtual void startFrame (int);
};


class pedestrians_pimpl: public virtual pedestrians_pskel {
public:
	virtual void pre ();
	virtual void post_pedestrians ();

	virtual void database_loader ();
	virtual void xml_loader ();
	virtual void pedestrian ();
};


class busdrivers_pimpl: public virtual busdrivers_pskel {
public:
	virtual void pre ();
	virtual void post_busdrivers ();

	virtual void database_loader ();
	virtual void xml_loader ();
};


class constructs_pimpl: public virtual constructs_pskel {
public:
	constructs_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_constructs ();

	/*virtual void models ();
	virtual void workgroups ();
	virtual void distributions ();
	virtual void db_connections ();
	virtual void db_proc_groups ();*/

private:
	Config* config;
};


class system_pimpl: public virtual system_pskel {
public:
	virtual void pre ();
	virtual void post_system ();

	virtual void default_models ();
	virtual void workgroup_mappings ();
	virtual void generic_props ();
};


class simulation_pimpl: public virtual simulation_pskel {
public:
	virtual void pre ();
	virtual void post_simulation ();

	virtual void base_granularity ();
	virtual void total_runtime ();
	virtual void total_warmup ();
	virtual void start_time ();
	virtual void granularities ();
	virtual void react_times ();
	virtual void geospatial ();
	virtual void agents ();
};


class SimMobility_pimpl: public virtual SimMobility_pskel {
public:
	SimMobility_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_SimMobility ();

	virtual void single_threaded (bool);

	/*virtual void constructs ();
	virtual void system ();
	virtual void simulation ();*/

private:
	Config* config;
};


class models_pimpl: public virtual models_pskel {
public:
	models_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_models ();

	virtual void lane_changing (const std::pair<std::string, std::string>&);
	virtual void car_following (const std::pair<std::string, std::string>&);
	virtual void intersection_driving (const std::pair<std::string, std::string>&);
	virtual void sidewalk_movement (const std::pair<std::string, std::string>&);

private:
	Config* config;
};


class workgroups_pimpl: public virtual workgroups_pskel {
public:
	workgroups_pimpl(Config& config) : config(&config) {}

	virtual void pre ();
	virtual void post_workgroups ();

	virtual void workgroup (const std::pair<std::string, sim_mob::WorkGroupFactory>&);

private:
	Config* config;
};


class distributions_pimpl: public virtual distributions_pskel {
public:
	virtual void pre ();
	virtual void post_distributions ();

	virtual void dist ();
};


class db_connections_pimpl: public virtual db_connections_pskel {
public:
	virtual void pre ();
	virtual void post_db_connections ();

	virtual void connection ();
};


class db_proc_groups_pimpl: public virtual db_proc_groups_pskel {
public:
	virtual void pre ();
	virtual void post_db_proc_groups ();

	virtual void proc_map ();
};


class default_models_pimpl: public virtual default_models_pskel {
public:
	virtual void pre ();
	virtual void post_default_models ();

	virtual void model ();
};


class workgroup_mappings_pimpl: public virtual workgroup_mappings_pskel {
public:
	virtual void pre ();
	virtual void post_workgroup_mappings ();

	virtual void agents ();
	virtual void signals ();
};


class generic_props_pimpl: public virtual generic_props_pskel {
public:
	virtual void pre ();
	virtual void post_generic_props ();

	virtual void property ();
};


class start_time_pimpl: public virtual start_time_pskel {
public:
	virtual void pre ();
	virtual void post_start_time ();

	virtual void value (const ::std::string&);
};


class granularities_pimpl: public virtual granularities_pskel {
public:
	virtual void pre ();
	virtual void post_granularities ();

	virtual void agent ();
	virtual void signal ();
};


class react_times_pimpl: public virtual react_times_pskel {
public:
	virtual void pre ();
	virtual void post_react_times ();

	virtual void leading_vehicle ();
	virtual void subject_vehicle ();
	virtual void vehicle_gap ();
};


class geospatial_pimpl: public virtual geospatial_pskel {
public:
	virtual void pre ();
	virtual void post_geospatial ();

	virtual void road_network ();
};


class agents_pimpl: public virtual agents_pskel {
public:
	virtual void pre ();
	virtual void post_agents ();

	virtual void trip_chains ();
	virtual void signals ();
	virtual void drivers ();
	virtual void pedestrians ();
	virtual void busdrivers ();
};

}} //End namespace sim_mob::conf


