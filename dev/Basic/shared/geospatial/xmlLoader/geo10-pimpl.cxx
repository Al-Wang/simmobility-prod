// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "geo10-pimpl.hxx"

#include <iostream>

namespace geo
{
  // Point2D_t_pimpl
  //

  void Point2D_t_pimpl::
  pre ()
  {
  }

  void Point2D_t_pimpl::
  xPos (unsigned int xPos)
  {
    std::cout << "xPos: " << xPos << std::endl;
  }

  void Point2D_t_pimpl::
  yPos (unsigned int yPos)
  {
    std::cout << "yPos: " << yPos << std::endl;
  }

  sim_mob::Point2D Point2D_t_pimpl::
  post_Point2D_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // PolyPoint_t_pimpl
  //

  void PolyPoint_t_pimpl::
  pre ()
  {
  }

  void PolyPoint_t_pimpl::
  pointID (const ::std::string& pointID)
  {
    std::cout << "pointID: " << pointID << std::endl;
  }

  void PolyPoint_t_pimpl::
  location (sim_mob::Point2D location)
  {
    // TODO
    //
  }

  sim_mob::Point2D PolyPoint_t_pimpl::
  post_PolyPoint_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // PolyLine_t_pimpl
  //

  void PolyLine_t_pimpl::
  pre ()
  {
  }

  void PolyLine_t_pimpl::
  PolyPoint (sim_mob::Point2D PolyPoint)
  {
    // TODO
    //
  }

  std::vector<sim_mob::Point2D> PolyLine_t_pimpl::
  post_PolyLine_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // lane_t_pimpl
  //

  void lane_t_pimpl::
  pre ()
  {
  }

  void lane_t_pimpl::
  laneID (unsigned long long laneID)
  {
    std::cout << "laneID: " << laneID << std::endl;
  }

  void lane_t_pimpl::
  width (unsigned int width)
  {
    std::cout << "width: " << width << std::endl;
  }

  void lane_t_pimpl::
  can_go_straight (bool can_go_straight)
  {
    std::cout << "can_go_straight: " << can_go_straight << std::endl;
  }

  void lane_t_pimpl::
  can_turn_left (bool can_turn_left)
  {
    std::cout << "can_turn_left: " << can_turn_left << std::endl;
  }

  void lane_t_pimpl::
  can_turn_right (bool can_turn_right)
  {
    std::cout << "can_turn_right: " << can_turn_right << std::endl;
  }

  void lane_t_pimpl::
  can_turn_on_red_signal (bool can_turn_on_red_signal)
  {
    std::cout << "can_turn_on_red_signal: " << can_turn_on_red_signal << std::endl;
  }

  void lane_t_pimpl::
  can_change_lane_left (bool can_change_lane_left)
  {
    std::cout << "can_change_lane_left: " << can_change_lane_left << std::endl;
  }

  void lane_t_pimpl::
  can_change_lane_right (bool can_change_lane_right)
  {
    std::cout << "can_change_lane_right: " << can_change_lane_right << std::endl;
  }

  void lane_t_pimpl::
  is_road_shoulder (bool is_road_shoulder)
  {
    std::cout << "is_road_shoulder: " << is_road_shoulder << std::endl;
  }

  void lane_t_pimpl::
  is_bicycle_lane (bool is_bicycle_lane)
  {
    std::cout << "is_bicycle_lane: " << is_bicycle_lane << std::endl;
  }

  void lane_t_pimpl::
  is_pedestrian_lane (bool is_pedestrian_lane)
  {
    std::cout << "is_pedestrian_lane: " << is_pedestrian_lane << std::endl;
  }

  void lane_t_pimpl::
  is_vehicle_lane (bool is_vehicle_lane)
  {
    std::cout << "is_vehicle_lane: " << is_vehicle_lane << std::endl;
  }

  void lane_t_pimpl::
  is_standard_bus_lane (bool is_standard_bus_lane)
  {
    std::cout << "is_standard_bus_lane: " << is_standard_bus_lane << std::endl;
  }

  void lane_t_pimpl::
  is_whole_day_bus_lane (bool is_whole_day_bus_lane)
  {
    std::cout << "is_whole_day_bus_lane: " << is_whole_day_bus_lane << std::endl;
  }

  void lane_t_pimpl::
  is_high_occupancy_vehicle_lane (bool is_high_occupancy_vehicle_lane)
  {
    std::cout << "is_high_occupancy_vehicle_lane: " << is_high_occupancy_vehicle_lane << std::endl;
  }

  void lane_t_pimpl::
  can_freely_park_here (bool can_freely_park_here)
  {
    std::cout << "can_freely_park_here: " << can_freely_park_here << std::endl;
  }

  void lane_t_pimpl::
  can_stop_here (bool can_stop_here)
  {
    std::cout << "can_stop_here: " << can_stop_here << std::endl;
  }

  void lane_t_pimpl::
  is_u_turn_allowed (bool is_u_turn_allowed)
  {
    std::cout << "is_u_turn_allowed: " << is_u_turn_allowed << std::endl;
  }

  void lane_t_pimpl::
  PolyLine (std::vector<sim_mob::Point2D> PolyLine)
  {
    // TODO
    //
  }

  sim_mob::Lane* lane_t_pimpl::
  post_lane_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // connector_t_pimpl
  //

  void connector_t_pimpl::
  pre ()
  {
  }

  void connector_t_pimpl::
  laneFrom (unsigned long long laneFrom)
  {
    std::cout << "laneFrom: " << laneFrom << std::endl;
  }

  void connector_t_pimpl::
  laneTo (unsigned long long laneTo)
  {
    std::cout << "laneTo: " << laneTo << std::endl;
  }

  std::pair<unsigned long,unsigned long> connector_t_pimpl::
  post_connector_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // connectors_t_pimpl
  //

  void connectors_t_pimpl::
  pre ()
  {
  }

  void connectors_t_pimpl::
  Connector (std::pair<unsigned long,unsigned long> Connector)
  {
    // TODO
    //
  }

  std::set<std::pair<unsigned long,unsigned long> > connectors_t_pimpl::
  post_connectors_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // Multi_Connector_t_pimpl
  //

  void Multi_Connector_t_pimpl::
  pre ()
  {
  }

  void Multi_Connector_t_pimpl::
  RoadSegment (unsigned long long RoadSegment)
  {
    std::cout << "RoadSegment: " << RoadSegment << std::endl;
  }

  void Multi_Connector_t_pimpl::
  Connectors (std::set<std::pair<unsigned long,unsigned long> > Connectors)
  {
    // TODO
    //
  }

  std::pair<unsigned long,std::set<std::pair<unsigned long,unsigned long> > > Multi_Connector_t_pimpl::
  post_Multi_Connector_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // Multi_Connectors_t_pimpl
  //

  void Multi_Connectors_t_pimpl::
  pre ()
  {
  }

  void Multi_Connectors_t_pimpl::
  MultiConnectors (const std::pair<unsigned long,std::set<std::pair<unsigned long,unsigned long> > >& MultiConnectors)
  {
    // TODO
    //
  }

  std::map<unsigned long,std::set<std::pair<unsigned long,unsigned long> > > Multi_Connectors_t_pimpl::
  post_Multi_Connectors_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // fwdBckSegments_t_pimpl
  //

  void fwdBckSegments_t_pimpl::
  pre ()
  {
  }

  void fwdBckSegments_t_pimpl::
  Segment (sim_mob::RoadSegment* Segment)
  {
    // TODO
    //
  }

  std::vector<sim_mob::RoadSegment*> fwdBckSegments_t_pimpl::
  post_fwdBckSegments_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // RoadSegmentsAt_t_pimpl
  //

  void RoadSegmentsAt_t_pimpl::
  pre ()
  {
  }

  void RoadSegmentsAt_t_pimpl::
  segmentID (unsigned long long segmentID)
  {
    std::cout << "segmentID: " << segmentID << std::endl;
  }

  std::set<unsigned long> RoadSegmentsAt_t_pimpl::
  post_RoadSegmentsAt_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // segment_t_pimpl
  //

  void segment_t_pimpl::
  pre ()
  {
  }

  void segment_t_pimpl::
  segmentID (unsigned long long segmentID)
  {
    std::cout << "segmentID: " << segmentID << std::endl;
  }

  void segment_t_pimpl::
  startingNode (unsigned int startingNode)
  {
    std::cout << "startingNode: " << startingNode << std::endl;
  }

  void segment_t_pimpl::
  endingNode (unsigned int endingNode)
  {
    std::cout << "endingNode: " << endingNode << std::endl;
  }

  void segment_t_pimpl::
  maxSpeed (short maxSpeed)
  {
    std::cout << "maxSpeed: " << maxSpeed << std::endl;
  }

  void segment_t_pimpl::
  Length (unsigned int Length)
  {
    std::cout << "Length: " << Length << std::endl;
  }

  void segment_t_pimpl::
  Width (unsigned int Width)
  {
    std::cout << "Width: " << Width << std::endl;
  }

  void segment_t_pimpl::
  originalDB_ID (const ::std::string& originalDB_ID)
  {
    std::cout << "originalDB_ID: " << originalDB_ID << std::endl;
  }

  void segment_t_pimpl::
  polyline (std::vector<sim_mob::Point2D> polyline)
  {
    // TODO
    //
  }

  void segment_t_pimpl::
  Lanes (std::vector<sim_mob::Lane*> Lanes)
  {
    // TODO
    //
  }

  void segment_t_pimpl::
  Obstacles (std::map<sim_mob::centimeter_t,const RoadItem*> Obstacles)
  {
    // TODO
    //
  }

  void segment_t_pimpl::
  KurbLine (std::vector<sim_mob::Point2D> KurbLine)
  {
    // TODO
    //
  }

  sim_mob::RoadSegment* segment_t_pimpl::
  post_segment_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // link_t_pimpl
  //

  void link_t_pimpl::
  pre ()
  {
  }

  void link_t_pimpl::
  linkID (unsigned int linkID)
  {
    std::cout << "linkID: " << linkID << std::endl;
  }

  void link_t_pimpl::
  roadName (const ::std::string& roadName)
  {
    std::cout << "roadName: " << roadName << std::endl;
  }

  void link_t_pimpl::
  StartingNode (unsigned int StartingNode)
  {
    std::cout << "StartingNode: " << StartingNode << std::endl;
  }

  void link_t_pimpl::
  EndingNode (unsigned int EndingNode)
  {
    std::cout << "EndingNode: " << EndingNode << std::endl;
  }

  void link_t_pimpl::
  Segments (std::pair<std::vector<sim_mob::RoadSegment*>,std::vector<sim_mob::RoadSegment*> > Segments)
  {
    // TODO
    //
  }

  sim_mob::Link* link_t_pimpl::
  post_link_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // separator_t_pimpl
  //

  void separator_t_pimpl::
  pre ()
  {
  }

  void separator_t_pimpl::
  separator_ID (unsigned short separator_ID)
  {
    std::cout << "separator_ID: " << separator_ID << std::endl;
  }

  void separator_t_pimpl::
  separator_value (bool separator_value)
  {
    std::cout << "separator_value: " << separator_value << std::endl;
  }

  void separator_t_pimpl::
  post_separator_t ()
  {
  }

  // separators_t_pimpl
  //

  void separators_t_pimpl::
  pre ()
  {
  }

  void separators_t_pimpl::
  Separator ()
  {
  }

  void separators_t_pimpl::
  post_separators_t ()
  {
  }

  // DomainIsland_t_pimpl
  //

  void DomainIsland_t_pimpl::
  pre ()
  {
  }

  void DomainIsland_t_pimpl::
  domainIsland_ID (unsigned short domainIsland_ID)
  {
    std::cout << "domainIsland_ID: " << domainIsland_ID << std::endl;
  }

  void DomainIsland_t_pimpl::
  domainIsland_value (bool domainIsland_value)
  {
    std::cout << "domainIsland_value: " << domainIsland_value << std::endl;
  }

  void DomainIsland_t_pimpl::
  post_DomainIsland_t ()
  {
  }

  // DomainIslands_t_pimpl
  //

  void DomainIslands_t_pimpl::
  pre ()
  {
  }

  void DomainIslands_t_pimpl::
  domainIslands ()
  {
  }

  void DomainIslands_t_pimpl::
  post_DomainIslands_t ()
  {
  }

  // offset_t_pimpl
  //

  void offset_t_pimpl::
  pre ()
  {
  }

  void offset_t_pimpl::
  offset_ID (unsigned short offset_ID)
  {
    std::cout << "offset_ID: " << offset_ID << std::endl;
  }

  void offset_t_pimpl::
  offset_value (unsigned int offset_value)
  {
    std::cout << "offset_value: " << offset_value << std::endl;
  }

  void offset_t_pimpl::
  post_offset_t ()
  {
  }

  // offsets_t_pimpl
  //

  void offsets_t_pimpl::
  pre ()
  {
  }

  void offsets_t_pimpl::
  offset ()
  {
  }

  void offsets_t_pimpl::
  post_offsets_t ()
  {
  }

  // ChunkLength_t_pimpl
  //

  void ChunkLength_t_pimpl::
  pre ()
  {
  }

  void ChunkLength_t_pimpl::
  chunklength_ID (unsigned short chunklength_ID)
  {
    std::cout << "chunklength_ID: " << chunklength_ID << std::endl;
  }

  void ChunkLength_t_pimpl::
  chunklength_value (unsigned int chunklength_value)
  {
    std::cout << "chunklength_value: " << chunklength_value << std::endl;
  }

  void ChunkLength_t_pimpl::
  post_ChunkLength_t ()
  {
  }

  // ChunkLengths_t_pimpl
  //

  void ChunkLengths_t_pimpl::
  pre ()
  {
  }

  void ChunkLengths_t_pimpl::
  chunklength ()
  {
  }

  void ChunkLengths_t_pimpl::
  post_ChunkLengths_t ()
  {
  }

  // LanesVector_t_pimpl
  //

  void LanesVector_t_pimpl::
  pre ()
  {
  }

  void LanesVector_t_pimpl::
  laneID (unsigned long long laneID)
  {
    std::cout << "laneID: " << laneID << std::endl;
  }

  void LanesVector_t_pimpl::
  post_LanesVector_t ()
  {
  }

  // EntranceAngle_t_pimpl
  //

  void EntranceAngle_t_pimpl::
  pre ()
  {
  }

  void EntranceAngle_t_pimpl::
  entranceAngle_ID (unsigned short entranceAngle_ID)
  {
    std::cout << "entranceAngle_ID: " << entranceAngle_ID << std::endl;
  }

  void EntranceAngle_t_pimpl::
  entranceAngle_value (unsigned int entranceAngle_value)
  {
    std::cout << "entranceAngle_value: " << entranceAngle_value << std::endl;
  }

  void EntranceAngle_t_pimpl::
  post_EntranceAngle_t ()
  {
  }

  // EntranceAngles_t_pimpl
  //

  void EntranceAngles_t_pimpl::
  pre ()
  {
  }

  void EntranceAngles_t_pimpl::
  entranceAngle ()
  {
  }

  void EntranceAngles_t_pimpl::
  post_EntranceAngles_t ()
  {
  }

  // Node_t_pimpl
  //

  void Node_t_pimpl::
  pre ()
  {
  }

  void Node_t_pimpl::
  nodeID (unsigned int nodeID)
  {
    std::cout << "nodeID: " << nodeID << std::endl;
  }

  void Node_t_pimpl::
  location (sim_mob::Point2D location)
  {
    // TODO
    //
  }

  void Node_t_pimpl::
  linkLoc (unsigned long long linkLoc)
  {
    std::cout << "linkLoc: " << linkLoc << std::endl;
  }

  void Node_t_pimpl::
  originalDB_ID (const ::std::string& originalDB_ID)
  {
    std::cout << "originalDB_ID: " << originalDB_ID << std::endl;
  }

  sim_mob::Node* Node_t_pimpl::
  post_Node_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // UniNode_t_pimpl
  //

  void UniNode_t_pimpl::
  pre ()
  {
  }

  void UniNode_t_pimpl::
  Connectors (std::set<std::pair<unsigned long,unsigned long> > Connectors)
  {
    // TODO
    //
  }

  sim_mob::UniNode* UniNode_t_pimpl::
  post_UniNode_t ()
  {
    sim_mob::Node* v (post_Node_t ());

    // TODO
    //
    // return ... ;
  }

  // roundabout_t_pimpl
  //

  void roundabout_t_pimpl::
  pre ()
  {
  }

  void roundabout_t_pimpl::
  roadSegmentsAt (std::set<unsigned long> roadSegmentsAt)
  {
    // TODO
    //
  }

  void roundabout_t_pimpl::
  Connectors (const std::map<unsigned long,std::set<std::pair<unsigned long,unsigned long> > >& Connectors)
  {
    // TODO
    //
  }

  void roundabout_t_pimpl::
  ChunkLengths ()
  {
  }

  void roundabout_t_pimpl::
  Offsets ()
  {
  }

  void roundabout_t_pimpl::
  Separators ()
  {
  }

  void roundabout_t_pimpl::
  addDominantLane ()
  {
  }

  void roundabout_t_pimpl::
  roundaboutDominantIslands (float roundaboutDominantIslands)
  {
    std::cout << "roundaboutDominantIslands: " << roundaboutDominantIslands << std::endl;
  }

  void roundabout_t_pimpl::
  roundaboutNumberOfLanes (int roundaboutNumberOfLanes)
  {
    std::cout << "roundaboutNumberOfLanes: " << roundaboutNumberOfLanes << std::endl;
  }

  void roundabout_t_pimpl::
  entranceAngles ()
  {
  }

  sim_mob::MultiNode* roundabout_t_pimpl::
  post_roundabout_t ()
  {
    sim_mob::Node* v (post_Node_t ());

    // TODO
    //
    // return ... ;
  }

  // intersection_t_pimpl
  //

  void intersection_t_pimpl::
  pre ()
  {
  }

  void intersection_t_pimpl::
  roadSegmentsAt (std::set<unsigned long> roadSegmentsAt)
  {
    // TODO
    //
  }

  void intersection_t_pimpl::
  Connectors (const std::map<unsigned long,std::set<std::pair<unsigned long,unsigned long> > >& Connectors)
  {
    // TODO
    //
  }

  void intersection_t_pimpl::
  ChunkLengths ()
  {
  }

  void intersection_t_pimpl::
  Offsets ()
  {
  }

  void intersection_t_pimpl::
  Separators ()
  {
  }

  void intersection_t_pimpl::
  additionalDominantLanes ()
  {
  }

  void intersection_t_pimpl::
  additionalSubdominantLanes ()
  {
  }

  void intersection_t_pimpl::
  domainIslands ()
  {
  }

  sim_mob::MultiNode* intersection_t_pimpl::
  post_intersection_t ()
  {
    sim_mob::Node* v (post_Node_t ());

    // TODO
    //
    // return ... ;
  }

  // RoadItem_t_pimpl
  //

  void RoadItem_t_pimpl::
  pre ()
  {
  }

  void RoadItem_t_pimpl::
  Offset (unsigned short Offset)
  {
    std::cout << "Offset: " << Offset << std::endl;
  }

  void RoadItem_t_pimpl::
  start (sim_mob::Point2D start)
  {
    // TODO
    //
  }

  void RoadItem_t_pimpl::
  end (sim_mob::Point2D end)
  {
    // TODO
    //
  }

  std::pair<unsigned int,sim_mob::RoadItem*> RoadItem_t_pimpl::
  post_RoadItem_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // BusStop_t_pimpl
  //

  void BusStop_t_pimpl::
  pre ()
  {
  }

  void BusStop_t_pimpl::
  busStopID (const ::std::string& busStopID)
  {
    std::cout << "busStopID: " << busStopID << std::endl;
  }

  void BusStop_t_pimpl::
  lane_location (const ::std::string& lane_location)
  {
    std::cout << "lane_location: " << lane_location << std::endl;
  }

  void BusStop_t_pimpl::
  is_Terminal (bool is_Terminal)
  {
    std::cout << "is_Terminal: " << is_Terminal << std::endl;
  }

  void BusStop_t_pimpl::
  is_Bay (bool is_Bay)
  {
    std::cout << "is_Bay: " << is_Bay << std::endl;
  }

  void BusStop_t_pimpl::
  has_shelter (bool has_shelter)
  {
    std::cout << "has_shelter: " << has_shelter << std::endl;
  }

  void BusStop_t_pimpl::
  busCapacityAsLength (unsigned int busCapacityAsLength)
  {
    std::cout << "busCapacityAsLength: " << busCapacityAsLength << std::endl;
  }

  void BusStop_t_pimpl::
  post_BusStop_t ()
  {
    std::pair<unsigned long,sim_mob::RoadItem*> v (post_RoadItem_t ());

    // TODO
    //
  }

  // ERP_Gantry_t_pimpl
  //

  void ERP_Gantry_t_pimpl::
  pre ()
  {
  }

  void ERP_Gantry_t_pimpl::
  ERP_GantryID (const ::std::string& ERP_GantryID)
  {
    std::cout << "ERP_GantryID: " << ERP_GantryID << std::endl;
  }

  void ERP_Gantry_t_pimpl::
  post_ERP_Gantry_t ()
  {
    std::pair<unsigned long,sim_mob::RoadItem*> v (post_RoadItem_t ());

    // TODO
    //
  }

  // FormType_pimpl
  //

  void FormType_pimpl::
  pre ()
  {
  }

  void FormType_pimpl::
  TextBox (int TextBox)
  {
    std::cout << "TextBox: " << TextBox << std::endl;
  }

  void FormType_pimpl::
  TextArea (int TextArea)
  {
    std::cout << "TextArea: " << TextArea << std::endl;
  }

  void FormType_pimpl::
  Header (int Header)
  {
    std::cout << "Header: " << Header << std::endl;
  }

  void FormType_pimpl::
  post_FormType ()
  {
  }

  // PointPair_t_pimpl
  //

  void PointPair_t_pimpl::
  pre ()
  {
  }

  void PointPair_t_pimpl::
  first (sim_mob::Point2D first)
  {
    // TODO
    //
  }

  void PointPair_t_pimpl::
  second (sim_mob::Point2D second)
  {
    // TODO
    //
  }

  std::pair<sim_mob::Point2D,sim_mob::Point2D> PointPair_t_pimpl::
  post_PointPair_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // crossing_t_pimpl
  //

  void crossing_t_pimpl::
  pre ()
  {
  }

  void crossing_t_pimpl::
  crossingID (const ::std::string& crossingID)
  {
    std::cout << "crossingID: " << crossingID << std::endl;
  }

  void crossing_t_pimpl::
  nearLine (std::pair<sim_mob::Point2D,sim_mob::Point2D> nearLine)
  {
    // TODO
    //
  }

  void crossing_t_pimpl::
  farLine (std::pair<sim_mob::Point2D,sim_mob::Point2D> farLine)
  {
    // TODO
    //
  }

  std::pair<unsigned int,sim_mob::Crossing*> crossing_t_pimpl::
  post_crossing_t ()
  {
    std::pair<unsigned long,sim_mob::RoadItem*> v (post_RoadItem_t ());

    // TODO
    //
    // return ... ;
  }

  // RoadBump_t_pimpl
  //

  void RoadBump_t_pimpl::
  pre ()
  {
  }

  void RoadBump_t_pimpl::
  roadBumpID (const ::std::string& roadBumpID)
  {
    std::cout << "roadBumpID: " << roadBumpID << std::endl;
  }

  void RoadBump_t_pimpl::
  segmentID (unsigned long long segmentID)
  {
    std::cout << "segmentID: " << segmentID << std::endl;
  }

  void RoadBump_t_pimpl::
  post_RoadBump_t ()
  {
    std::pair<unsigned long,sim_mob::RoadItem*> v (post_RoadItem_t ());

    // TODO
    //
  }

  // RoadNetwork_t_pimpl
  //

  void RoadNetwork_t_pimpl::
  pre ()
  {
  }

  void RoadNetwork_t_pimpl::
  Nodes ()
  {
  }

  void RoadNetwork_t_pimpl::
  Links (std::vector<sim_mob::Link*> Links)
  {
    // TODO
    //
  }

  void RoadNetwork_t_pimpl::
  post_RoadNetwork_t ()
  {
  }

  // RoadItems_t_pimpl
  //

  void RoadItems_t_pimpl::
  pre ()
  {
  }

  void RoadItems_t_pimpl::
  BusStop ()
  {
  }

  void RoadItems_t_pimpl::
  ERP_Gantry ()
  {
  }

  void RoadItems_t_pimpl::
  Crossing (std::pair<unsigned int,sim_mob::Crossing*> Crossing)
  {
    // TODO
    //
  }

  void RoadItems_t_pimpl::
  RoadBump ()
  {
  }

  std::map<sim_mob::centimeter_t,const RoadItem*> RoadItems_t_pimpl::
  post_RoadItems_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // DailyTime_t_pimpl
  //

  void DailyTime_t_pimpl::
  pre ()
  {
  }

  void DailyTime_t_pimpl::
  timeValue (unsigned int timeValue)
  {
    std::cout << "timeValue: " << timeValue << std::endl;
  }

  void DailyTime_t_pimpl::
  base (unsigned int base)
  {
    std::cout << "base: " << base << std::endl;
  }

  sim_mob::DailyTime DailyTime_t_pimpl::
  post_DailyTime_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // TripchainItemType_pimpl
  //

  void TripchainItemType_pimpl::
  pre ()
  {
  }

  std::string TripchainItemType_pimpl::
  post_TripchainItemType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
    // return ... ;
  }

  // TripchainItemLocationType_pimpl
  //

  void TripchainItemLocationType_pimpl::
  pre ()
  {
  }

  std::string TripchainItemLocationType_pimpl::
  post_TripchainItemLocationType ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
    // return ... ;
  }

  // TripChainItem_t_pimpl
  //

  void TripChainItem_t_pimpl::
  pre ()
  {
  }

  void TripChainItem_t_pimpl::
  personID (long long personID)
  {
    std::cout << "personID: " << personID << std::endl;
  }

  void TripChainItem_t_pimpl::
  itemType (std::string itemType)
  {
    // TODO
    //
  }

  void TripChainItem_t_pimpl::
  sequenceNumber (unsigned int sequenceNumber)
  {
    std::cout << "sequenceNumber: " << sequenceNumber << std::endl;
  }

  void TripChainItem_t_pimpl::
  startTime (const ::std::string& startTime)
  {
    std::cout << "startTime: " << startTime << std::endl;
  }

  void TripChainItem_t_pimpl::
  endTime (const ::std::string& endTime)
  {
    std::cout << "endTime: " << endTime << std::endl;
  }

  sim_mob::TripChainItem* TripChainItem_t_pimpl::
  post_TripChainItem_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // Trip_t_pimpl
  //

  void Trip_t_pimpl::
  pre ()
  {
  }

  void Trip_t_pimpl::
  tripID (long long tripID)
  {
    std::cout << "tripID: " << tripID << std::endl;
  }

  void Trip_t_pimpl::
  fromLocation (unsigned int fromLocation)
  {
    std::cout << "fromLocation: " << fromLocation << std::endl;
  }

  void Trip_t_pimpl::
  fromLocationType (std::string fromLocationType)
  {
    // TODO
    //
  }

  void Trip_t_pimpl::
  toLocation (unsigned int toLocation)
  {
    std::cout << "toLocation: " << toLocation << std::endl;
  }

  void Trip_t_pimpl::
  toLocationType (std::string toLocationType)
  {
    // TODO
    //
  }

  void Trip_t_pimpl::
  subTrips (std::vector<sim_mob::SubTrip> subTrips)
  {
    // TODO
    //
  }

  sim_mob::TripChainItem* Trip_t_pimpl::
  post_Trip_t ()
  {
    return post_TripChainItem_t ();
  }

  // SubTrip_t_pimpl
  //

  void SubTrip_t_pimpl::
  pre ()
  {
  }

  void SubTrip_t_pimpl::
  mode (const ::std::string& mode)
  {
    std::cout << "mode: " << mode << std::endl;
  }

  void SubTrip_t_pimpl::
  isPrimaryMode (bool isPrimaryMode)
  {
    std::cout << "isPrimaryMode: " << isPrimaryMode << std::endl;
  }

  void SubTrip_t_pimpl::
  ptLineId (const ::std::string& ptLineId)
  {
    std::cout << "ptLineId: " << ptLineId << std::endl;
  }

  sim_mob::SubTrip SubTrip_t_pimpl::
  post_SubTrip_t ()
  {
    sim_mob::TripChainItem* v (post_Trip_t ());

    // TODO
    //
    // return ... ;
  }

  // SubTrips_t_pimpl
  //

  void SubTrips_t_pimpl::
  pre ()
  {
  }

  void SubTrips_t_pimpl::
  subTrip (sim_mob::SubTrip subTrip)
  {
    // TODO
    //
  }

  std::vector<sim_mob::SubTrip> SubTrips_t_pimpl::
  post_SubTrips_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // Activity_t_pimpl
  //

  void Activity_t_pimpl::
  pre ()
  {
  }

  void Activity_t_pimpl::
  description (const ::std::string& description)
  {
    std::cout << "description: " << description << std::endl;
  }

  void Activity_t_pimpl::
  location (unsigned int location)
  {
    std::cout << "location: " << location << std::endl;
  }

  void Activity_t_pimpl::
  locationType (std::string locationType)
  {
    // TODO
    //
  }

  void Activity_t_pimpl::
  isPrimary (bool isPrimary)
  {
    std::cout << "isPrimary: " << isPrimary << std::endl;
  }

  void Activity_t_pimpl::
  isFlexible (bool isFlexible)
  {
    std::cout << "isFlexible: " << isFlexible << std::endl;
  }

  void Activity_t_pimpl::
  isMandatory (bool isMandatory)
  {
    std::cout << "isMandatory: " << isMandatory << std::endl;
  }

  sim_mob::TripChainItem* Activity_t_pimpl::
  post_Activity_t ()
  {
    return post_TripChainItem_t ();
  }

  // TripChain_t_pimpl
  //

  void TripChain_t_pimpl::
  pre ()
  {
  }

  void TripChain_t_pimpl::
  personID (long long personID)
  {
    std::cout << "personID: " << personID << std::endl;
  }

  void TripChain_t_pimpl::
  Trip (sim_mob::TripChainItem* Trip)
  {
    // TODO
    //
  }

  void TripChain_t_pimpl::
  Activity (sim_mob::TripChainItem* Activity)
  {
    // TODO
    //
  }

  std::pair<unsigned long,sim_mob::TripChainItem*> TripChain_t_pimpl::
  post_TripChain_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // TripChains_t_pimpl
  //

  void TripChains_t_pimpl::
  pre ()
  {
  }

  void TripChains_t_pimpl::
  TripChain (std::pair<unsigned long,sim_mob::TripChainItem*> TripChain)
  {
    // TODO
    //
  }

  void TripChains_t_pimpl::
  post_TripChains_t ()
  {
  }

  // linkAndCrossing_t_pimpl
  //

  void linkAndCrossing_t_pimpl::
  pre ()
  {
  }

  void linkAndCrossing_t_pimpl::
  ID (unsigned char ID)
  {
    std::cout << "ID: " << static_cast<unsigned short> (ID) << std::endl;
  }

  void linkAndCrossing_t_pimpl::
  linkID (unsigned int linkID)
  {
    std::cout << "linkID: " << linkID << std::endl;
  }

  void linkAndCrossing_t_pimpl::
  crossingID (unsigned int crossingID)
  {
    std::cout << "crossingID: " << crossingID << std::endl;
  }

  void linkAndCrossing_t_pimpl::
  angle (unsigned char angle)
  {
    std::cout << "angle: " << static_cast<unsigned short> (angle) << std::endl;
  }

  sim_mob::LinkAndCrossing linkAndCrossing_t_pimpl::
  post_linkAndCrossing_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // linkAndCrossings_t_pimpl
  //

  void linkAndCrossings_t_pimpl::
  pre ()
  {
  }

  void linkAndCrossings_t_pimpl::
  linkAndCrossing (sim_mob::LinkAndCrossing linkAndCrossing)
  {
    // TODO
    //
  }

  sim_mob::LinkAndCrossingC linkAndCrossings_t_pimpl::
  post_linkAndCrossings_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // signalAlgorithm_t_pimpl
  //

  void signalAlgorithm_t_pimpl::
  pre ()
  {
  }

  void signalAlgorithm_t_pimpl::
  post_signalAlgorithm_t ()
  {
    const ::std::string& v (post_string ());

    std::cout << "signalAlgorithm_t: " << v << std::endl;
  }

  // Plan_t_pimpl
  //

  void Plan_t_pimpl::
  pre ()
  {
  }

  void Plan_t_pimpl::
  planID (unsigned char planID)
  {
    std::cout << "planID: " << static_cast<unsigned short> (planID) << std::endl;
  }

  void Plan_t_pimpl::
  PhasePercentage (double PhasePercentage)
  {
    std::cout << "PhasePercentage: " << PhasePercentage << std::endl;
  }

  void Plan_t_pimpl::
  post_Plan_t ()
  {
  }

  // Plans_t_pimpl
  //

  void Plans_t_pimpl::
  pre ()
  {
  }

  void Plans_t_pimpl::
  Plan ()
  {
  }

  void Plans_t_pimpl::
  post_Plans_t ()
  {
  }

  // TrafficColor_t_pimpl
  //

  void TrafficColor_t_pimpl::
  pre ()
  {
  }

  void TrafficColor_t_pimpl::
  post_TrafficColor_t ()
  {
    const ::std::string& v (post_string ());

    std::cout << "TrafficColor_t: " << v << std::endl;
  }

  // ColorDuration_t_pimpl
  //

  void ColorDuration_t_pimpl::
  pre ()
  {
  }

  void ColorDuration_t_pimpl::
  TrafficColor ()
  {
  }

  void ColorDuration_t_pimpl::
  Duration (unsigned char Duration)
  {
    std::cout << "Duration: " << static_cast<unsigned short> (Duration) << std::endl;
  }

  std::pair<sim_mob::TrafficColor,std::size_t> ColorDuration_t_pimpl::
  post_ColorDuration_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // ColorSequence_t_pimpl
  //

  void ColorSequence_t_pimpl::
  pre ()
  {
  }

  void ColorSequence_t_pimpl::
  TrafficLightType (const ::std::string& TrafficLightType)
  {
    std::cout << "TrafficLightType: " << TrafficLightType << std::endl;
  }

  void ColorSequence_t_pimpl::
  ColorDuration (std::pair<sim_mob::TrafficColor,std::size_t> ColorDuration)
  {
    // TODO
    //
  }

  std::pair<std::string,std::vector<std::pair<TrafficColor,std::size_t> > > ColorSequence_t_pimpl::
  post_ColorSequence_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // links_maps_t_pimpl
  //

  void links_maps_t_pimpl::
  pre ()
  {
  }

  void links_maps_t_pimpl::
  links_map (std::pair<sim_mob::Link*,sim_mob::linkToLink> links_map)
  {
    // TODO
    //
  }

  std::multimap<sim_mob::Link*,sim_mob::linkToLink> links_maps_t_pimpl::
  post_links_maps_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // links_map_t_pimpl
  //

  void links_map_t_pimpl::
  pre ()
  {
  }

  void links_map_t_pimpl::
  linkFrom (unsigned int linkFrom)
  {
    std::cout << "linkFrom: " << linkFrom << std::endl;
  }

  void links_map_t_pimpl::
  linkTo (unsigned int linkTo)
  {
    std::cout << "linkTo: " << linkTo << std::endl;
  }

  void links_map_t_pimpl::
  SegmentFrom (unsigned int SegmentFrom)
  {
    std::cout << "SegmentFrom: " << SegmentFrom << std::endl;
  }

  void links_map_t_pimpl::
  SegmentTo (unsigned int SegmentTo)
  {
    std::cout << "SegmentTo: " << SegmentTo << std::endl;
  }

  void links_map_t_pimpl::
  ColorSequence (std::pair<std::string,std::vector<std::pair<TrafficColor,std::size_t> > > ColorSequence)
  {
    // TODO
    //
  }

  std::pair<sim_mob::Link*,sim_mob::linkToLink> links_map_t_pimpl::
  post_links_map_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // Phase_t_pimpl
  //

  void Phase_t_pimpl::
  pre ()
  {
  }

  void Phase_t_pimpl::
  phaseID (unsigned char phaseID)
  {
    std::cout << "phaseID: " << static_cast<unsigned short> (phaseID) << std::endl;
  }

  void Phase_t_pimpl::
  name (const ::std::string& name)
  {
    std::cout << "name: " << name << std::endl;
  }

  void Phase_t_pimpl::
  links_map (std::multimap<sim_mob::Link*,sim_mob::linkToLink> links_map)
  {
    // TODO
    //
  }

  void Phase_t_pimpl::
  post_Phase_t ()
  {
  }

  // Phases_t_pimpl
  //

  void Phases_t_pimpl::
  pre ()
  {
  }

  void Phases_t_pimpl::
  Phase ()
  {
  }

  void Phases_t_pimpl::
  post_Phases_t ()
  {
  }

  // SplitPlan_t_pimpl
  //

  void SplitPlan_t_pimpl::
  pre ()
  {
  }

  void SplitPlan_t_pimpl::
  splitplanID (unsigned int splitplanID)
  {
    std::cout << "splitplanID: " << splitplanID << std::endl;
  }

  void SplitPlan_t_pimpl::
  signalAlgorithm ()
  {
  }

  void SplitPlan_t_pimpl::
  cycleLength (unsigned char cycleLength)
  {
    std::cout << "cycleLength: " << static_cast<unsigned short> (cycleLength) << std::endl;
  }

  void SplitPlan_t_pimpl::
  offset (unsigned char offset)
  {
    std::cout << "offset: " << static_cast<unsigned short> (offset) << std::endl;
  }

  void SplitPlan_t_pimpl::
  ChoiceSet ()
  {
  }

  void SplitPlan_t_pimpl::
  Phases ()
  {
  }

  sim_mob::SplitPlan SplitPlan_t_pimpl::
  post_SplitPlan_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // Signal_t_pimpl
  //

  void Signal_t_pimpl::
  pre ()
  {
  }

  void Signal_t_pimpl::
  signalID (unsigned char signalID)
  {
    std::cout << "signalID: " << static_cast<unsigned short> (signalID) << std::endl;
  }

  void Signal_t_pimpl::
  nodeID (unsigned int nodeID)
  {
    std::cout << "nodeID: " << nodeID << std::endl;
  }

  void Signal_t_pimpl::
  signalAlgorithm ()
  {
  }

  void Signal_t_pimpl::
  linkAndCrossings (sim_mob::LinkAndCrossingC linkAndCrossings)
  {
    // TODO
    //
  }

  void Signal_t_pimpl::
  SplitPlan (sim_mob::SplitPlan SplitPlan)
  {
    // TODO
    //
  }

  sim_mob::Signal* Signal_t_pimpl::
  post_Signal_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // Signals_t_pimpl
  //

  void Signals_t_pimpl::
  pre ()
  {
  }

  void Signals_t_pimpl::
  signal (sim_mob::Signal* signal)
  {
    // TODO
    //
  }

  void Signals_t_pimpl::
  post_Signals_t ()
  {
  }

  // GeoSpatial_t_pimpl
  //

  void GeoSpatial_t_pimpl::
  pre ()
  {
  }

  void GeoSpatial_t_pimpl::
  RoadNetwork ()
  {
  }

  void GeoSpatial_t_pimpl::
  post_GeoSpatial_t ()
  {
  }

  // SimMobility_t_pimpl
  //

  void SimMobility_t_pimpl::
  pre ()
  {
  }

  void SimMobility_t_pimpl::
  GeoSpatial ()
  {
  }

  void SimMobility_t_pimpl::
  TripChains ()
  {
  }

  void SimMobility_t_pimpl::
  Signals ()
  {
  }

  void SimMobility_t_pimpl::
  post_SimMobility_t ()
  {
  }

  // Lanes_pimpl
  //

  void Lanes_pimpl::
  pre ()
  {
  }

  void Lanes_pimpl::
  Lane (sim_mob::Lane* Lane)
  {
    // TODO
    //
  }

  std::vector<sim_mob::Lane*> Lanes_pimpl::
  post_Lanes ()
  {
    // TODO
    //
    // return ... ;
  }

  // Segments_pimpl
  //

  void Segments_pimpl::
  pre ()
  {
  }

  void Segments_pimpl::
  FWDSegments (std::vector<sim_mob::RoadSegment*> FWDSegments)
  {
    // TODO
    //
  }

  void Segments_pimpl::
  BKDSegments (std::vector<sim_mob::RoadSegment*> BKDSegments)
  {
    // TODO
    //
  }

  std::pair<std::vector<sim_mob::RoadSegment*>,std::vector<sim_mob::RoadSegment*> > Segments_pimpl::
  post_Segments ()
  {
    // TODO
    //
    // return ... ;
  }

  // Nodes_pimpl
  //

  void Nodes_pimpl::
  pre ()
  {
  }

  void Nodes_pimpl::
  UniNodes (std::set<sim_mob::UniNode*>& UniNodes)
  {
    // TODO
    //
  }

  void Nodes_pimpl::
  Intersections (std::vector<sim_mob::MultiNode*>& Intersections)
  {
    // TODO
    //
  }

  void Nodes_pimpl::
  roundabouts (std::vector<sim_mob::MultiNode*>& roundabouts)
  {
    // TODO
    //
  }

  void Nodes_pimpl::
  post_Nodes ()
  {
  }

  // Links_pimpl
  //

  void Links_pimpl::
  pre ()
  {
  }

  void Links_pimpl::
  Link (sim_mob::Link* Link)
  {
    // TODO
    //
  }

  std::vector<sim_mob::Link*> Links_pimpl::
  post_Links ()
  {
    // TODO
    //
    // return ... ;
  }

  // UniNodes_pimpl
  //

  void UniNodes_pimpl::
  pre ()
  {
  }

  void UniNodes_pimpl::
  UniNode (sim_mob::UniNode* UniNode)
  {
    // TODO
    //
  }

  std::set<sim_mob::UniNode*>& UniNodes_pimpl::
  post_UniNodes ()
  {
    // TODO
    //
    // return ... ;
  }

  // Intersections_pimpl
  //

  void Intersections_pimpl::
  pre ()
  {
  }

  void Intersections_pimpl::
  Intersection (sim_mob::MultiNode* Intersection)
  {
    // TODO
    //
  }

  std::vector<sim_mob::MultiNode*>& Intersections_pimpl::
  post_Intersections ()
  {
    // TODO
    //
    // return ... ;
  }

  // roundabouts_pimpl
  //

  void roundabouts_pimpl::
  pre ()
  {
  }

  void roundabouts_pimpl::
  roundabout (sim_mob::MultiNode* roundabout)
  {
    // TODO
    //
  }

  std::vector<sim_mob::MultiNode*>& roundabouts_pimpl::
  post_roundabouts ()
  {
    // TODO
    //
    // return ... ;
  }
}

