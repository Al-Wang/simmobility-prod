// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#pragma once

//NOTE: This is a rare example of when relative path lookup is acceptable. ~Seth
#include "../skeleton/geo10-pskel.hpp"

#include "conf/simpleconf.hpp"
#include "geospatial/Point2D.hpp"

#include "geo10-pimpl-primary.hpp"
#include "geo10-pimpl-secondary.hpp"


namespace sim_mob {
namespace xml {

//Note: Do NOT write constructors for these classes, since we don't want to risk C++'s finnicky constructor
// chaining mechanism. Instead, initialize all your private variables in the pre() function.

//TODO: Once the contents of geo10-pimpl.cpp have been moved into their own classes, consider grouping the header files here
//      into relevant, smaller header files. E.g., all the top-level stuff (Nodes, Links, Segments) can go in one, and the
//      supporting definitions can go in another. ~Seth

///Helper namespace: contains typedefs for particularly verbose items
namespace helper {

//Was: geo_UniNode_Connectors_type
typedef std::set<std::pair<unsigned long,unsigned long> > UniNodeConnectors;

//Was: geo_MultiNode_Connectors_type
typedef std::map<unsigned long, helper::UniNodeConnectors > MultiNodeConnectors;

} //End helper namespace




class roundabout_t_pimpl: public virtual roundabout_t_pskel,
  public ::sim_mob::xml::Node_t_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  roadSegmentsAt (std::set<unsigned long>);

  virtual void
  Connectors (const std::map<unsigned long,std::set<std::pair<unsigned long,unsigned long> > >&);

  virtual void
  ChunkLengths ();

  virtual void
  Offsets ();

  virtual void
  Separators ();

  virtual void
  addDominantLane ();

  virtual void
  roundaboutDominantIslands (float);

  virtual void
  roundaboutNumberOfLanes (int);

  virtual void
  entranceAngles ();

  virtual sim_mob::MultiNode*
  post_roundabout_t ();
};




class RoadItem_t_pimpl: public virtual RoadItem_t_pskel
{
	  unsigned long id_;
	  unsigned short Offset_;
	  sim_mob::Point2D start_,end_;
  public:
  virtual void
  pre ();

  virtual void
  id (unsigned long long);

  virtual void
  Offset (unsigned short);

  virtual void
  start (sim_mob::Point2D);

  virtual void
  end (sim_mob::Point2D);

  virtual std::pair<unsigned long,sim_mob::RoadItem*>
  post_RoadItem_t ();
};

class BusStop_t_pimpl: public virtual BusStop_t_pskel,
  public ::sim_mob::xml::RoadItem_t_pimpl
{
	  sim_mob::BusStop *bs;

  public:
  virtual void
  pre ();

  virtual void
  xPos (double);

  virtual void
  yPos (double);

  virtual void
  lane_location (unsigned long long);

  virtual void
  is_terminal (bool);

  virtual void
  is_bay (bool);

  virtual void
  has_shelter (bool);

  virtual void
  busCapacityAsLength (unsigned int);

  virtual void
  busstopno (const ::std::string&);

  virtual std::pair<unsigned long,sim_mob::BusStop*>
  post_BusStop_t ();
};

class ERP_Gantry_t_pimpl: public virtual ERP_Gantry_t_pskel,
  public ::sim_mob::xml::RoadItem_t_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  ERP_GantryID (const ::std::string&);

  virtual void
  post_ERP_Gantry_t ();
};

class FormType_pimpl: public virtual FormType_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  TextBox (int);

  virtual void
  TextArea (int);

  virtual void
  Header (int);

  virtual void
  post_FormType ();
};

class PointPair_t_pimpl: public virtual PointPair_t_pskel
{
	  std::pair<sim_mob::Point2D,sim_mob::Point2D> pointPair;
  public:
  virtual void
  pre ();

  virtual void
  first (sim_mob::Point2D);

  virtual void
  second (sim_mob::Point2D);

  virtual std::pair<sim_mob::Point2D,sim_mob::Point2D>
  post_PointPair_t ();
};

class crossing_t_pimpl: public virtual crossing_t_pskel,
  public ::sim_mob::xml::RoadItem_t_pimpl
{
	  sim_mob::Crossing *crossing;
  public:
  virtual void
  pre ();

  virtual void
  nearLine (std::pair<sim_mob::Point2D,sim_mob::Point2D>);

  virtual void
  farLine (std::pair<sim_mob::Point2D,sim_mob::Point2D>);

  virtual std::pair<unsigned long,sim_mob::Crossing*>
  post_crossing_t ();
};

class RoadBump_t_pimpl: public virtual RoadBump_t_pskel,
  public ::sim_mob::xml::RoadItem_t_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  roadBumpID (const ::std::string&);

  virtual void
  segmentID (unsigned long long);

  virtual void
  post_RoadBump_t ();
};

class RoadNetwork_t_pimpl: public virtual RoadNetwork_t_pskel
{
	  sim_mob::RoadNetwork &rn;
  public:
	  RoadNetwork_t_pimpl();
  virtual void
  pre ();

  virtual void
  Nodes ();

  virtual void
  Links (std::vector<sim_mob::Link*>);

  virtual void
  post_RoadNetwork_t ();
};

class RoadItems_t_pimpl: public virtual RoadItems_t_pskel
{
	  std::map<centimeter_t,const RoadItem*> RoadItems;
  public:
  virtual void
  pre ();

  virtual void
  BusStop (std::pair<unsigned long,sim_mob::BusStop*>);

  virtual void
  ERP_Gantry ();

  virtual void
  Crossing (std::pair<unsigned long,sim_mob::Crossing*>);

  virtual void
  RoadBump ();

  virtual std::map<sim_mob::centimeter_t,const RoadItem*>
  post_RoadItems_t ();
};

class TripchainItemType_pimpl: public virtual TripchainItemType_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual std::string
  post_TripchainItemType ();
};

class TripchainItemLocationType_pimpl: public virtual TripchainItemLocationType_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual std::string
  post_TripchainItemLocationType ();
};

class TripChainItem_t_pimpl: public virtual TripChainItem_t_pskel
{
	  std::string itemType_;
	  long personID_;
	  unsigned int sequenceNumber_;
	  std::string startTime_,endTime_;
	  sim_mob::TripChainItem *tcItem;
  public:
  virtual void
  pre ();

  virtual void
  personID (long long);

  virtual void
  itemType (std::string);

  virtual void
  sequenceNumber (unsigned int);

  virtual void
  startTime (const ::std::string&);

  virtual void
  endTime (const ::std::string&);

  virtual sim_mob::TripChainItem*
  post_TripChainItem_t ();
};

class Trip_t_pimpl: public virtual Trip_t_pskel,
  public ::sim_mob::xml::TripChainItem_t_pimpl
{
	  sim_mob::Trip * trip;
  public:
  virtual void
  pre ();

  virtual void
  tripID (long long);

  virtual void
  fromLocation (unsigned int);

  virtual void
  fromLocationType (std::string);

  virtual void
  toLocation (unsigned int);

  virtual void
  toLocationType (std::string);

  virtual void
  subTrips (std::vector<sim_mob::SubTrip>);

  virtual sim_mob::TripChainItem*
  post_Trip_t ();
};

class SubTrip_t_pimpl: public virtual SubTrip_t_pskel,
  public ::sim_mob::xml::Trip_t_pimpl
{
	  sim_mob::SubTrip subTrip;
  public:
  virtual void
  pre ();

  virtual void
  mode (const ::std::string&);

  virtual void
  isPrimaryMode (bool);

  virtual void
  ptLineId (const ::std::string&);

  virtual sim_mob::SubTrip
  post_SubTrip_t ();
};

class SubTrips_t_pimpl: public virtual SubTrips_t_pskel
{
	  std::vector<sim_mob::SubTrip> subTrips;
  public:
  virtual void
  pre ();

  virtual void
  subTrip (sim_mob::SubTrip);

  virtual std::vector<sim_mob::SubTrip>
  post_SubTrips_t ();
};

class Activity_t_pimpl: public virtual Activity_t_pskel,
  public ::sim_mob::xml::TripChainItem_t_pimpl
{
	  sim_mob::Activity *activity;
  public:
  virtual void
  pre ();

  virtual void
  description (const ::std::string&);

  virtual void
  location (unsigned int);

  virtual void
  locationType (std::string);

  virtual void
  isPrimary (bool);

  virtual void
  isFlexible (bool);

  virtual void
  isMandatory (bool);

  virtual sim_mob::TripChainItem*
  post_Activity_t ();
};

class TripChain_t_pimpl: public virtual TripChain_t_pskel
{
	  std::pair<unsigned long, std::vector<sim_mob::TripChainItem*> > personID_Tripchain_Pair;
  public:
  virtual void
  pre ();

  virtual void
  personID (long long);

  virtual void
  Trip (sim_mob::TripChainItem*);

  virtual void
  Activity (sim_mob::TripChainItem*);

  virtual std::pair<unsigned long, std::vector<sim_mob::TripChainItem*> >
  post_TripChain_t ();
};

class TripChains_t_pimpl: public virtual TripChains_t_pskel
{
	  std::map<unsigned int, std::vector<sim_mob::TripChainItem*> > tripchains;
  public:
  virtual void
  pre ();

  virtual void
  TripChain (std::pair<unsigned long, std::vector<sim_mob::TripChainItem*> >);

  virtual void
  post_TripChains_t ();
};

class linkAndCrossing_t_pimpl: public virtual linkAndCrossing_t_pskel
{
	  struct LinkAndCrossing LAC;
  public:
  virtual void
  pre ();

  virtual void
  ID (unsigned char);

  virtual void
  linkID (unsigned int);

  virtual void
  crossingID (unsigned int);

  virtual void
  angle (unsigned char);

  virtual sim_mob::LinkAndCrossing
  post_linkAndCrossing_t ();
};

class linkAndCrossings_t_pimpl: public virtual linkAndCrossings_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  linkAndCrossing (sim_mob::LinkAndCrossing);

  virtual sim_mob::LinkAndCrossingC
  post_linkAndCrossings_t ();
};

class signalAlgorithm_t_pimpl: public virtual signalAlgorithm_t_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  post_signalAlgorithm_t ();
};

class Plan_t_pimpl: public virtual Plan_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  planID (unsigned char);

  virtual void
  PhasePercentage (double);

  virtual void
  post_Plan_t ();
};

class Plans_t_pimpl: public virtual Plans_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  Plan ();

  virtual void
  post_Plans_t ();
};

class TrafficColor_t_pimpl: public virtual TrafficColor_t_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual void
  post_TrafficColor_t ();
};

class ColorDuration_t_pimpl: public virtual ColorDuration_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  TrafficColor ();

  virtual void
  Duration (unsigned char);

  virtual std::pair<sim_mob::TrafficColor,std::size_t>
  post_ColorDuration_t ();
};

class ColorSequence_t_pimpl: public virtual ColorSequence_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  TrafficLightType (const ::std::string&);

  virtual void
  ColorDuration (std::pair<sim_mob::TrafficColor,std::size_t>);

  virtual std::pair<std::string,std::vector<std::pair<TrafficColor,std::size_t> > >
  post_ColorSequence_t ();
};

class links_maps_t_pimpl: public virtual links_maps_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  links_map (std::pair<sim_mob::Link*,sim_mob::linkToLink>);

  virtual std::multimap<sim_mob::Link*,sim_mob::linkToLink>
  post_links_maps_t ();
};

class links_map_t_pimpl: public virtual links_map_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  linkFrom (unsigned int);

  virtual void
  linkTo (unsigned int);

  virtual void
  SegmentFrom (unsigned int);

  virtual void
  SegmentTo (unsigned int);

  virtual void
  ColorSequence (std::pair<std::string,std::vector<std::pair<TrafficColor,std::size_t> > >);

  virtual std::pair<sim_mob::Link*,sim_mob::linkToLink>
  post_links_map_t ();
};

class Phase_t_pimpl: public virtual Phase_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  phaseID (unsigned char);

  virtual void
  name (const ::std::string&);

  virtual void
  links_map (std::multimap<sim_mob::Link*,sim_mob::linkToLink>);

  virtual void
  post_Phase_t ();
};

class Phases_t_pimpl: public virtual Phases_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  Phase ();

  virtual void
  post_Phases_t ();
};

class SplitPlan_t_pimpl: public virtual SplitPlan_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  splitplanID (unsigned int);

  virtual void
  signalAlgorithm ();

  virtual void
  cycleLength (unsigned char);

  virtual void
  offset (unsigned char);

  virtual void
  ChoiceSet ();

  virtual void
  Phases ();

  virtual sim_mob::SplitPlan
  post_SplitPlan_t ();
};

class Signal_t_pimpl: public virtual Signal_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  signalID (unsigned char);

  virtual void
  nodeID (unsigned int);

  virtual void
  signalAlgorithm ();

  virtual void
  linkAndCrossings (sim_mob::LinkAndCrossingC);

  virtual void
  SplitPlan (sim_mob::SplitPlan);

  virtual sim_mob::Signal*
  post_Signal_t ();
};

class Signals_t_pimpl: public virtual Signals_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  signal (sim_mob::Signal*);

  virtual void
  post_Signals_t ();
};




class SimMobility_t_pimpl: public virtual SimMobility_t_pskel
{
  public:
  virtual void
  pre ();

  virtual void
  GeoSpatial ();

  virtual void
  TripChains ();

  virtual void
  Signals ();

  virtual void
  post_SimMobility_t ();
};





class UniNodes_pimpl: public virtual UniNodes_pskel
{
	  std::set<sim_mob::UniNode*> uniNodes;
  public:
  virtual void
  pre ();

  virtual void
  UniNode (sim_mob::UniNode*);

  virtual std::set<sim_mob::UniNode*>&
  post_UniNodes ();
};

class Intersections_pimpl: public virtual Intersections_pskel
{
	  std::vector<sim_mob::MultiNode*> intersections;
  public:
  virtual void
  pre ();

  virtual void
  Intersection (sim_mob::MultiNode*);

  virtual std::vector<sim_mob::MultiNode*>&
  post_Intersections ();
};

class roundabouts_pimpl: public virtual roundabouts_pskel
{
	  std::vector<sim_mob::MultiNode*> roundabouts;
  public:
  virtual void
  pre ();

  virtual void
  roundabout (sim_mob::MultiNode*);

  virtual std::vector<sim_mob::MultiNode*>&
  post_roundabouts ();
};


}} //End namespace sim_mob::xml

