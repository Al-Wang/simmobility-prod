// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#pragma once

//NOTE: This is a rare example of when relative path lookup is acceptable. ~Seth
#include "../skeleton/geo10-pskel.hpp"

#include "conf/simpleconf.hpp"
#include "geospatial/Point2D.hpp"

#include "geo10-pimpl-primary.hpp"
#include "geo10-pimpl-secondary.hpp"


namespace sim_mob {
namespace xml {

//Note: Do NOT write constructors for these classes, since we don't want to risk C++'s finnicky constructor
// chaining mechanism. Instead, initialize all your private variables in the pre() function.

//TODO: Once the contents of geo10-pimpl.cpp have been moved into their own classes, consider grouping the header files here
//      into relevant, smaller header files. E.g., all the top-level stuff (Nodes, Links, Segments) can go in one, and the
//      supporting definitions can go in another. ~Seth









class TripchainItemType_pimpl: public virtual TripchainItemType_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual std::string
  post_TripchainItemType ();
};

class TripchainItemLocationType_pimpl: public virtual TripchainItemLocationType_pskel,
  public ::xml_schema::string_pimpl
{
  public:
  virtual void
  pre ();

  virtual std::string
  post_TripchainItemLocationType ();
};

class TripChainItem_t_pimpl: public virtual TripChainItem_t_pskel
{
	  std::string itemType_;
	  long personID_;
	  unsigned int sequenceNumber_;
	  std::string startTime_,endTime_;
	  sim_mob::TripChainItem *tcItem;
  public:
  virtual void
  pre ();

  virtual void
  personID (long long);

  virtual void
  itemType (std::string);

  virtual void
  sequenceNumber (unsigned int);

  virtual void
  startTime (const ::std::string&);

  virtual void
  endTime (const ::std::string&);

  virtual sim_mob::TripChainItem*
  post_TripChainItem_t ();
};

class Trip_t_pimpl: public virtual Trip_t_pskel,
  public ::sim_mob::xml::TripChainItem_t_pimpl
{
	  sim_mob::Trip * trip;
  public:
  virtual void
  pre ();

  virtual void
  tripID (long long);

  virtual void
  fromLocation (unsigned int);

  virtual void
  fromLocationType (std::string);

  virtual void
  toLocation (unsigned int);

  virtual void
  toLocationType (std::string);

  virtual void
  subTrips (std::vector<sim_mob::SubTrip>);

  virtual sim_mob::TripChainItem*
  post_Trip_t ();
};

class SubTrip_t_pimpl: public virtual SubTrip_t_pskel,
  public ::sim_mob::xml::Trip_t_pimpl
{
	  sim_mob::SubTrip subTrip;
  public:
  virtual void
  pre ();

  virtual void
  mode (const ::std::string&);

  virtual void
  isPrimaryMode (bool);

  virtual void
  ptLineId (const ::std::string&);

  virtual sim_mob::SubTrip
  post_SubTrip_t ();
};

class SubTrips_t_pimpl: public virtual SubTrips_t_pskel
{
	  std::vector<sim_mob::SubTrip> subTrips;
  public:
  virtual void
  pre ();

  virtual void
  subTrip (sim_mob::SubTrip);

  virtual std::vector<sim_mob::SubTrip>
  post_SubTrips_t ();
};

class Activity_t_pimpl: public virtual Activity_t_pskel,
  public ::sim_mob::xml::TripChainItem_t_pimpl
{
	  sim_mob::Activity *activity;
  public:
  virtual void
  pre ();

  virtual void
  description (const ::std::string&);

  virtual void
  location (unsigned int);

  virtual void
  locationType (std::string);

  virtual void
  isPrimary (bool);

  virtual void
  isFlexible (bool);

  virtual void
  isMandatory (bool);

  virtual sim_mob::TripChainItem*
  post_Activity_t ();
};

class TripChain_t_pimpl: public virtual TripChain_t_pskel
{
	  std::pair<unsigned long, std::vector<sim_mob::TripChainItem*> > personID_Tripchain_Pair;
  public:
  virtual void
  pre ();

  virtual void
  personID (long long);

  virtual void
  Trip (sim_mob::TripChainItem*);

  virtual void
  Activity (sim_mob::TripChainItem*);

  virtual std::pair<unsigned long, std::vector<sim_mob::TripChainItem*> >
  post_TripChain_t ();
};

class TripChains_t_pimpl: public virtual TripChains_t_pskel
{
	  std::map<unsigned int, std::vector<sim_mob::TripChainItem*> > tripchains;
  public:
  virtual void
  pre ();

  virtual void
  TripChain (std::pair<unsigned long, std::vector<sim_mob::TripChainItem*> >);

  virtual void
  post_TripChains_t ();
};



}} //End namespace sim_mob::xml

