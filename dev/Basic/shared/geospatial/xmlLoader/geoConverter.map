namespace http://www.smart.mit.edu/geo  {
 include "geospatial/Link.hpp";
 include "geospatial/RoadItem.hpp";
 include "geospatial/RoadNetwork.hpp";
 include "geospatial/Roundabout.hpp";
 include "geospatial/MultiNode.hpp";
 include "geospatial/Intersection.hpp";
 include "geospatial/Lane.hpp";
 include "geospatial/LaneConnector.hpp";
 include "geospatial/Crossing.hpp";
 include "geospatial/UniNode.hpp";
 include "metrics/Length.hpp";
 include "util/DailyTime.hpp";
 include "entities/misc/TripChain.hpp";
 include "entities/signal/Signal.hpp";
 
Links std::vector<sim_mob::Link*> std::vector<sim_mob::Link*>;
link_t sim_mob::Link* sim_mob::Link*;

Segments  "std::pair<std::vector<sim_mob::RoadSegment*>,std::vector<sim_mob::RoadSegment*> >"   "std::pair<std::vector<sim_mob::RoadSegment*>,std::vector<sim_mob::RoadSegment*> >";
fwdBckSegments_t std::vector<sim_mob::RoadSegment*> std::vector<sim_mob::RoadSegment*>;
segment_t sim_mob::RoadSegment* sim_mob::RoadSegment*;
SegmentType_t std::string std::string;

RoadItem_t  "std::pair<unsigned long,sim_mob::RoadItem*>"  "std::pair<unsigned long,sim_mob::RoadItem*>"; 
crossing_t  "std::pair<unsigned long,sim_mob::Crossing*>"  "std::pair<unsigned long,sim_mob::Crossing*>";  
BusStop_t  "std::pair<unsigned long,sim_mob::BusStop*>"  "std::pair<unsigned long,sim_mob::BusStop*>";  
RoadItems_t  "std::map<sim_mob::centimeter_t,const RoadItem*>"  "std::map<sim_mob::centimeter_t,const RoadItem*>"; 

#double-check and then remove it
obstacle_t  sim_mob::RoadItem*;

lane_t sim_mob::Lane* sim_mob::Lane*;
Lanes std::vector<sim_mob::Lane*> std::vector<sim_mob::Lane*>;

connector_t   "std::pair<unsigned long,unsigned long>"  "std::pair<unsigned long,unsigned long>";
connectors_t  "std::set<std::pair<unsigned long,unsigned long> >"  "std::set<std::pair<unsigned long,unsigned long> >";

#connectors_t  "std::set<std::pair<std::string,std::string> >"  "std::set<std::pair<std::string,std::string> >";
#Multi_Connector_t   "std::pair<std::string,std::set<sim_mob::LaneConnector*> >";
#Multi_Connectors_t  "std::map<std::string,std::set<sim_mob::LaneConnector*> >";

Multi_Connector_t   "std::pair<unsigned long,std::set<std::pair<unsigned long,unsigned long> > >";
Multi_Connectors_t  "std::map<unsigned long,std::set<std::pair<unsigned long,unsigned long> > >";

PolyLine_t std::vector<sim_mob::Point2D> std::vector<sim_mob::Point2D>;
PolyPoint_t sim_mob::Point2D sim_mob::Point2D;
Point2D_t sim_mob::Point2D sim_mob::Point2D;
PointPair_t std::pair<sim_mob::Point2D,sim_mob::Point2D> std::pair<sim_mob::Point2D,sim_mob::Point2D>;
laneEdgePolyline_cached_t "std::pair<short,std::vector<sim_mob::Point2D> >" "std::pair<short,std::vector<sim_mob::Point2D> >";
laneEdgePolylines_cached_t "std::vector<std::vector<sim_mob::Point2D> >" "std::vector<std::vector<sim_mob::Point2D> >";

Node_t sim_mob::Node* sim_mob::Node*;

UniNodes std::set<sim_mob::UniNode*>& std::set<sim_mob::UniNode*>&;
UniNode_t sim_mob::UniNode* sim_mob::UniNode*;
temp_Segmetair_t "std::pair<unsigned long,unsigned long>" "std::pair<unsigned long,unsigned long>" ;

Intersections std::vector<sim_mob::MultiNode*>& std::vector<sim_mob::MultiNode*>&;
intersection_t sim_mob::MultiNode* sim_mob::MultiNode*;
#RoadSegmentsAt_t std::set<sim_mob::RoadSegment*>  std::set<sim_mob::RoadSegment*>;
RoadSegmentsAt_t "std::set<unsigned long>"  "std::set<unsigned long>";
roundabouts std::vector<sim_mob::MultiNode*>& std::vector<sim_mob::MultiNode*>&;
roundabout_t sim_mob::MultiNode* sim_mob::MultiNode*;




linkAndCrossing_t sim_mob::LinkAndCrossing sim_mob::LinkAndCrossing;
linkAndCrossings_t sim_mob::LinkAndCrossingC sim_mob::LinkAndCrossingC;
signalTimingMode_t int int;
SplitPlan_t sim_mob::SplitPlan  sim_mob::SplitPlan;
Plan_t "std::pair<short,std::vector<double> >"  "std::pair<short,std::vector<double> >";
Plans_t "std::vector<std::vector<double> >" "std::vector<std::vector<double> >";
TrafficColor_t sim_mob::TrafficColor sim_mob::TrafficColor;
ColorDuration_t std::pair<sim_mob::TrafficColor,std::size_t>  std::pair<sim_mob::TrafficColor,std::size_t>;
ColorSequence_t "std::pair<sim_mob::TrafficLightType, std::vector<std::pair<TrafficColor,std::size_t> > >" "std::pair<sim_mob::TrafficLightType, std::vector<std::pair<TrafficColor,std::size_t> > >";
links_map_t "std::pair<sim_mob::Link*,sim_mob::linkToLink>"  "std::pair<sim_mob::Link*,sim_mob::linkToLink>";
links_maps_t "std::multimap<sim_mob::Link*,sim_mob::linkToLink>"  "std::multimap<sim_mob::Link*,sim_mob::linkToLink>";
crossings_maps_t "std::map<sim_mob::Crossing *, sim_mob::Crossings>" "std::map<sim_mob::Crossing *, sim_mob::Crossings>";
crossings_map_t  "std::pair<sim_mob::Crossing *, sim_mob::Crossings>" "std::pair<sim_mob::Crossing *, sim_mob::Crossings>";
Phase_t sim_mob::Phase  sim_mob::Phase;
Phases_t sim_mob::phases sim_mob::phases;
#SCATS_t SCATS_Info SCATS_Info;
Signal_t sim_mob::Signal* sim_mob::Signal*;
Signals_t sim_mob::Signal::All_Signals sim_mob::Signal::All_Signals;



TripChainItem_t  sim_mob::TripChainItem*  sim_mob::TripChainItem*;
TripChain_t "std::pair<unsigned long, std::vector<sim_mob::TripChainItem*> >"  "std::pair<unsigned long, std::vector<sim_mob::TripChainItem*> >";
Trip_t sim_mob::TripChainItem*  sim_mob::TripChainItem*;
Activity_t sim_mob::TripChainItem*  sim_mob::TripChainItem*;
#DailyTime_t sim_mob::DailyTime sim_mob::DailyTime;
TripchainItemLocationType  std::string std::string;
TripchainItemType std::string std::string;
SubTrips_t std::vector<sim_mob::SubTrip> std::vector<sim_mob::SubTrip>;
SubTrip_t sim_mob::SubTrip sim_mob::SubTrip;

}








