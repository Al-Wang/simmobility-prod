namespace http://www.smart.mit.edu/geo  {
 include "geospatial/Link.hpp";
 include "geospatial/RoadItem.hpp";
 include "geospatial/RoadNetwork.hpp";
 include "geospatial/Roundabout.hpp";
 include "geospatial/MultiNode.hpp";
 include "geospatial/Intersection.hpp";
 include "geospatial/Lane.hpp";
 include "geospatial/LaneConnector.hpp";
 include "geospatial/Crossing.hpp";
 include "geospatial/UniNode.hpp";
Links std::vector<sim_mob::Link*> std::vector<sim_mob::Link*>;
link_t sim_mob::Link* sim_mob::Link*;

Segments std::pair<std::vector<sim_mob::RoadSegment*>,std::vector<sim_mob::RoadSegment*>>   std::pair<std::vector<sim_mob::RoadSegment*>,std::vector<sim_mob::RoadSegment*>>;
fwdBckSegments_t std::vector<sim_mob::RoadSegment*> std::vector<sim_mob::RoadSegment*>;
segment_t sim_mob::RoadSegment* sim_mob::RoadSegment*;
SegmentType_t std::string std::string;

RoadItem_t  sim_mob::RoadItem*; 
RoadItems_t  std::map<centimeter_t,const_RoadItem*> std::map<centimeter_t,const_RoadItem*>; 
obstacle_t  sim_mob::RoadItem*;
obstacles_t std::map<centimeter_t,RoadItem_make_constant*> std::map<centimeter_t,RoadItem_make_constant*>;

lane_t sim_mob::Lane* sim_mob::Lane*;
Lanes std::vector<sim_mob::Lane*> std::vector<sim_mob::Lane*>;

#connector_t sim_mob::LaneConnector* sim_mob::LaneConnector*;
#connectors_t std::set<sim_mob::LaneConnector*> std::set<sim_mob::LaneConnector*>;

connector_t std::pair<std::string,std::string> std::pair<std::string,std::string>;
connectors_t std::set<std::pair<std::string,std::string>> std::set<std::pair<std::string,std::string>>;
 
#Multi_Connector_t std::pair<std::string,std::set<sim_mob::LaneConnector*>>;
#Multi_Connectors_t std::map<std::string,std::set<sim_mob::LaneConnector*>>;

Multi_Connector_t std::pair<std::string,std::set<std::pair<std::string,std::string>>>;
Multi_Connectors_t std::map<std::string,std::set<std::pair<std::string,std::string>>>;

PolyLine_t std::vector<sim_mob::Point2D> std::vector<sim_mob::Point2D>;
PolyPoint_t sim_mob::Point2D sim_mob::Point2D;
Point2D_t sim_mob::Point2D sim_mob::Point2D;
PointPair_t std::pair<sim_mob::Point2D,sim_mob::Point2D> std::pair<sim_mob::Point2D,sim_mob::Point2D>;

UniNodes std::set<sim_mob::UniNode*>& std::set<sim_mob::UniNode*>&;
UniNode_t sim_mob::UniNode* sim_mob::UniNode*;

Intersections std::vector<sim_mob::MultiNode*>& std::vector<sim_mob::MultiNode*>&;
intersection_t sim_mob::MultiNode* sim_mob::MultiNode*;
#RoadSegmentsAt_t std::set<sim_mob::RoadSegment*>  std::set<sim_mob::RoadSegment*>;
RoadSegmentsAt_t std::set<std::string>  std::set<std::string>;
roundabouts std::vector<sim_mob::MultiNode*>& std::vector<sim_mob::MultiNode*>&;
roundabout_t sim_mob::MultiNode* sim_mob::MultiNode*;

crossing_t sim_mob::Crossing* sim_mob::Crossing*; 

TripChain_t std::pair<unsigned_int,sim_mob::TripChainItem*>  std::pair<unsigned-int,sim_mob::TripChainItem*>;
Trip_t sim_mob::TripChainItem*  sim_mob::TripChainItem*;
Activity_t sim_mob::TripChainItem*  sim_mob::TripChainItem*;
DailyTime_t sim_mob::DailyTime sim_mob::DailyTime;
TripchainItemLocationType sim_mob::TripChainItem::LocationType sim_mob::TripChainItem::LocationType;
SubTrips_t std::vector<sim_mob::SubTrip> std::vector<sim_mob::SubTrip>;
SubTrip_t sim_mob::SubTrip sim_mob::SubTrip;

}








