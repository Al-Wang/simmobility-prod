// Not copyrighted - public domain.
//
// This sample parser implementation was generated by CodeSynthesis XSD,
// an XML Schema to C++ data binding compiler. You may use it in your
// programs without any restrictions.
//

#include "geo5-pimpl.hpp"

namespace geo
{
  // SegmentType_t_pimpl
  //

  void SegmentType_t_pimpl::
  pre ()
  {
  }

  std::string SegmentType_t_pimpl::
  post_SegmentType_t ()
  {
    const ::std::string& v (post_string ());

    // TODO
    //
    // return ... ;
  }

  // ObstacleType_t_pimpl
  //

  void ObstacleType_t_pimpl::
  pre ()
  {
  }

  void ObstacleType_t_pimpl::
  post_ObstacleType_t ()
  {
    const ::std::string& v (post_string ());

    std::cout << "ObstacleType_t: " << v << std::endl;
  }

  // LaneType_t_pimpl
  //

  void LaneType_t_pimpl::
  pre ()
  {
  }

  void LaneType_t_pimpl::
  post_LaneType_t ()
  {
    const ::std::string& v (post_string ());

    std::cout << "LaneType_t: " << v << std::endl;
  }

  // obstacle_t_pimpl
  //

  void obstacle_t_pimpl::
  pre ()
  {
  }

  void obstacle_t_pimpl::
  obstacleID (const ::std::string& obstacleID)
  {
    std::cout << "obstacleID: " << obstacleID << std::endl;
  }

  void obstacle_t_pimpl::
  obstacleType ()
  {
  }

  sim_mob::RoadItem* obstacle_t_pimpl::
  post_obstacle_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // obstacles_t_pimpl
  //

  void obstacles_t_pimpl::
  pre ()
  {
  }

  void obstacles_t_pimpl::
  obstacle (sim_mob::RoadItem* obstacle)
  {
    // TODO
    //
  }

  std::vector<sim_mob::RoadItem> obstacles_t_pimpl::
  post_obstacles_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // Point2D_t_pimpl
  //

  void Point2D_t_pimpl::
  pre ()
  {
  }

  void Point2D_t_pimpl::
  xPos (unsigned long long xPos)
  {
  }

  void Point2D_t_pimpl::
  yPos (unsigned long long yPos)
  {
  }

  void Point2D_t_pimpl::
  post_Point2D_t ()
  {
  }

  // PolyPoint_t_pimpl
  //

  void PolyPoint_t_pimpl::
  pre ()
  {
  }

  void PolyPoint_t_pimpl::
  pointID (const ::std::string& pointID)
  {
    std::cout << "pointID: " << pointID << std::endl;
  }

  void PolyPoint_t_pimpl::
  location ()
  {
  }

  void PolyPoint_t_pimpl::
  post_PolyPoint_t ()
  {
  }

  // PolyLine_t_pimpl
  //

  void PolyLine_t_pimpl::
  pre ()
  {
  }

  void PolyLine_t_pimpl::
  PolyPoint ()
  {
  }

  std::vector<sim_mob::Point2D> PolyLine_t_pimpl::
  post_PolyLine_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // lane_t_pimpl
  //

  void lane_t_pimpl::
  pre ()
  {
	  lne = new sim_mob::Lane;
  }

  void lane_t_pimpl::
  laneID (const ::std::string& laneID)
  {
  }

  void lane_t_pimpl::
  laneType ()
  {
  }

  void lane_t_pimpl::
  Width (unsigned long long Width)
  {
  }

  void lane_t_pimpl::
  PolyLine (std::vector<sim_mob::Point2D> PolyLine)
  {
    // TODO
    //
  }

  void lane_t_pimpl::
  can_go_straight (bool can_go_straight)
  {
    std::cout << "can_go_straight: " << can_go_straight << std::endl;
  }

  void lane_t_pimpl::
  can_turn_left (bool can_turn_left)
  {
    std::cout << "can_turn_left: " << can_turn_left << std::endl;
  }

  void lane_t_pimpl::
  can_turn_right (bool can_turn_right)
  {
    std::cout << "can_turn_right: " << can_turn_right << std::endl;
  }

  void lane_t_pimpl::
  can_turn_on_red_signal (bool can_turn_on_red_signal)
  {
    std::cout << "can_turn_on_red_signal: " << can_turn_on_red_signal << std::endl;
  }

  void lane_t_pimpl::
  can_change_lane_left (bool can_change_lane_left)
  {
    std::cout << "can_change_lane_left: " << can_change_lane_left << std::endl;
  }

  void lane_t_pimpl::
  can_change_lane_right (bool can_change_lane_right)
  {
    std::cout << "can_change_lane_right: " << can_change_lane_right << std::endl;
  }

  void lane_t_pimpl::
  is_road_shoulder (bool is_road_shoulder)
  {
    std::cout << "is_road_shoulder: " << is_road_shoulder << std::endl;
  }

  void lane_t_pimpl::
  is_bicycle_lane (bool is_bicycle_lane)
  {
    std::cout << "is_bicycle_lane: " << is_bicycle_lane << std::endl;
  }

  void lane_t_pimpl::
  is_pedestrian_lane (bool is_pedestrian_lane)
  {
    std::cout << "is_pedestrian_lane: " << is_pedestrian_lane << std::endl;
  }

  void lane_t_pimpl::
  is_vehicle_lane (bool is_vehicle_lane)
  {
    std::cout << "is_vehicle_lane: " << is_vehicle_lane << std::endl;
  }

  void lane_t_pimpl::
  is_standard_bus_lane (bool is_standard_bus_lane)
  {
    std::cout << "is_standard_bus_lane: " << is_standard_bus_lane << std::endl;
  }

  void lane_t_pimpl::
  is_whole_day_bus_lane (bool is_whole_day_bus_lane)
  {
    std::cout << "is_whole_day_bus_lane: " << is_whole_day_bus_lane << std::endl;
  }

  void lane_t_pimpl::
  is_high_occupancy_vehicle_lane (bool is_high_occupancy_vehicle_lane)
  {
    std::cout << "is_high_occupancy_vehicle_lane: " << is_high_occupancy_vehicle_lane << std::endl;
  }

  void lane_t_pimpl::
  can_freely_park_here (bool can_freely_park_here)
  {
    std::cout << "can_freely_park_here: " << can_freely_park_here << std::endl;
  }

  void lane_t_pimpl::
  can_stop_here (bool can_stop_here)
  {
    std::cout << "can_stop_here: " << can_stop_here << std::endl;
  }

  void lane_t_pimpl::
  is_u_turn_allowed (bool is_u_turn_allowed)
  {
    std::cout << "is_u_turn_allowed: " << is_u_turn_allowed << std::endl;
  }

  sim_mob::Lane* lane_t_pimpl::
  post_lane_t ()
  {
    // TODO
    //
    // return ... ;
	  return lne;
  }

  // connector_t_pimpl
  //

  void connector_t_pimpl::
  pre ()
  {
  }

  void connector_t_pimpl::
  laneFrom (const ::std::string& laneFrom)
  {
    std::cout << "laneFrom: " << laneFrom << std::endl;
  }

  void connector_t_pimpl::
  laneTo (const ::std::string& laneTo)
  {
    std::cout << "laneTo: " << laneTo << std::endl;
  }

  sim_mob::LaneConnector* connector_t_pimpl::
  post_connector_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // connectors_t_pimpl
  //

  void connectors_t_pimpl::
  pre ()
  {
  }

  void connectors_t_pimpl::
  Connector (sim_mob::LaneConnector* Connector)
  {
    // TODO
    //
  }

  void connectors_t_pimpl::
  post_connectors_t ()
  {
  }

  // fwdBckSegments_t_pimpl
  //

  void fwdBckSegments_t_pimpl::
  pre ()
  {
  }

  void fwdBckSegments_t_pimpl::
  segment (sim_mob::RoadSegment* segment)
  {
	  rs.push_back(segment);
  }

  std::vector<sim_mob::RoadSegment*> fwdBckSegments_t_pimpl::
  post_fwdBckSegments_t ()
  {
    // TODO
    //
    // return ... ;
	  return rs;
  }

  // RoadSegmentsAt_t_pimpl
  //

  void RoadSegmentsAt_t_pimpl::
  pre ()
  {
  }

  void RoadSegmentsAt_t_pimpl::
  segmentID (const ::std::string& segmentID)
  {
  }

  void RoadSegmentsAt_t_pimpl::
  post_RoadSegmentsAt_t ()
  {
  }

  // segment_t_pimpl
  //

  void segment_t_pimpl::
  pre ()
  {
	  sim_mob::RoadSegment *seg_=new sim_mob::RoadSegment;
  }

  void segment_t_pimpl::
  segmentID (const ::std::string& segmentID)
  {
  }

  void segment_t_pimpl::
  segmentType (std::string segmentType)
  {
    // TODO
    //
  }

  void segment_t_pimpl::
  parentLink (const ::std::string& parentLink)
  {
    std::cout << "parentLink: " << parentLink << std::endl;
  }

  void segment_t_pimpl::
  StartingNode (const ::std::string& StartingNode)
  {
  }

  void segment_t_pimpl::
  EndingNode (const ::std::string& EndingNode)
  {
  }

  void segment_t_pimpl::
  Maxspeed (short Maxspeed)
  {
  }

  void segment_t_pimpl::
  LanesLeftOfDivider (unsigned long long LanesLeftOfDivider)
  {
    std::cout << "LanesLeftOfDivider: " << LanesLeftOfDivider << std::endl;
  }

  void segment_t_pimpl::
  Lanes (std::vector<sim_mob::Lane*> Lanes)
  {
	  seg_->setLanes(Lanes);
    // TODO
    //
  }

  void segment_t_pimpl::
  KurbLine (std::vector<sim_mob::Point2D> KurbLine)
  {
    // TODO
    //
  }

  sim_mob::RoadSegment* segment_t_pimpl::
  post_segment_t ()
  {
	  return seg_;
  }

  // link_t_pimpl
  //

  void link_t_pimpl::
  pre ()
  {
	  ln=new sim_mob::Link;
  }

  void link_t_pimpl::
  linkID (const ::std::string& linkID)
  {
	  ln->linkID=linkID;
    // TODO
    //
  }

  void link_t_pimpl::
  roadName (const ::std::string& roadName)
  {
    ln->roadName=roadName;
  }

  void link_t_pimpl::
  StartingNode (const ::std::string& StartingNode)
  {
//	  ln->start=new sim_mob::Node;
//	  ln->start->
  }

  void link_t_pimpl::
  EndingNode (const ::std::string& EndingNode)
  {
  }

  void link_t_pimpl::
  Segments (std::pair<std::vector<sim_mob::RoadSegment*>,std::vector<sim_mob::RoadSegment*> > Segments)
  {
    // TODO
    //
  }

  sim_mob::Link* link_t_pimpl::
  post_link_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // separator_t_pimpl
  //

  void separator_t_pimpl::
  pre ()
  {
  }

  void separator_t_pimpl::
  separator_ID (unsigned short separator_ID)
  {
    std::cout << "separator_ID: " << separator_ID << std::endl;
  }

  void separator_t_pimpl::
  separator_value (bool separator_value)
  {
    std::cout << "separator_value: " << separator_value << std::endl;
  }

  void separator_t_pimpl::
  post_separator_t ()
  {
  }

  // separators_t_pimpl
  //

  void separators_t_pimpl::
  pre ()
  {
  }

  void separators_t_pimpl::
  Separator ()
  {
  }

  void separators_t_pimpl::
  post_separators_t ()
  {
  }

  // DomainIsland_t_pimpl
  //

  void DomainIsland_t_pimpl::
  pre ()
  {
  }

  void DomainIsland_t_pimpl::
  domainIsland_ID (unsigned short domainIsland_ID)
  {
    std::cout << "domainIsland_ID: " << domainIsland_ID << std::endl;
  }

  void DomainIsland_t_pimpl::
  domainIsland_value (bool domainIsland_value)
  {
    std::cout << "domainIsland_value: " << domainIsland_value << std::endl;
  }

  void DomainIsland_t_pimpl::
  post_DomainIsland_t ()
  {
  }

  // DomainIslands_t_pimpl
  //

  void DomainIslands_t_pimpl::
  pre ()
  {
  }

  void DomainIslands_t_pimpl::
  domainIslands ()
  {
  }

  void DomainIslands_t_pimpl::
  post_DomainIslands_t ()
  {
  }

  // offset_t_pimpl
  //

  void offset_t_pimpl::
  pre ()
  {
  }

  void offset_t_pimpl::
  offset_ID (unsigned short offset_ID)
  {
    std::cout << "offset_ID: " << offset_ID << std::endl;
  }

  void offset_t_pimpl::
  offset_value (unsigned long long offset_value)
  {
    std::cout << "offset_value: " << offset_value << std::endl;
  }

  void offset_t_pimpl::
  post_offset_t ()
  {
  }

  // offsets_t_pimpl
  //

  void offsets_t_pimpl::
  pre ()
  {
  }

  void offsets_t_pimpl::
  offset ()
  {
  }

  void offsets_t_pimpl::
  post_offsets_t ()
  {
  }

  // ChunkLength_t_pimpl
  //

  void ChunkLength_t_pimpl::
  pre ()
  {
  }

  void ChunkLength_t_pimpl::
  chunklength_ID (unsigned short chunklength_ID)
  {
    std::cout << "chunklength_ID: " << chunklength_ID << std::endl;
  }

  void ChunkLength_t_pimpl::
  chunklength_value (unsigned long long chunklength_value)
  {
    std::cout << "chunklength_value: " << chunklength_value << std::endl;
  }

  void ChunkLength_t_pimpl::
  post_ChunkLength_t ()
  {
  }

  // ChunkLengths_t_pimpl
  //

  void ChunkLengths_t_pimpl::
  pre ()
  {
  }

  void ChunkLengths_t_pimpl::
  chunklength ()
  {
  }

  void ChunkLengths_t_pimpl::
  post_ChunkLengths_t ()
  {
  }

  // LanesVector_t_pimpl
  //

  void LanesVector_t_pimpl::
  pre ()
  {
  }

  void LanesVector_t_pimpl::
  laneID (const ::std::string& laneID)
  {
  }

  void LanesVector_t_pimpl::
  post_LanesVector_t ()
  {
  }

  // EntranceAngle_t_pimpl
  //

  void EntranceAngle_t_pimpl::
  pre ()
  {
  }

  void EntranceAngle_t_pimpl::
  entranceAngle_ID (unsigned short entranceAngle_ID)
  {
    std::cout << "entranceAngle_ID: " << entranceAngle_ID << std::endl;
  }

  void EntranceAngle_t_pimpl::
  entranceAngle_value (unsigned long long entranceAngle_value)
  {
    std::cout << "entranceAngle_value: " << entranceAngle_value << std::endl;
  }

  void EntranceAngle_t_pimpl::
  post_EntranceAngle_t ()
  {
  }

  // EntranceAngles_t_pimpl
  //

  void EntranceAngles_t_pimpl::
  pre ()
  {
  }

  void EntranceAngles_t_pimpl::
  entranceAngle ()
  {
  }

  void EntranceAngles_t_pimpl::
  post_EntranceAngles_t ()
  {
  }

  // UniNode_t_pimpl
  //

  void UniNode_t_pimpl::
  pre ()
  {
  }

  void UniNode_t_pimpl::
  nodeID (const ::std::string& nodeID)
  {
  }

  void UniNode_t_pimpl::
  location ()
  {
  }

  void UniNode_t_pimpl::
  Conectors ()
  {
  }

  sim_mob::UniNode* UniNode_t_pimpl::
  post_UniNode_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // roundabout_t_pimpl
  //

  void roundabout_t_pimpl::
  pre ()
  {
  }

  void roundabout_t_pimpl::
  nodeID (const ::std::string& nodeID)
  {
  }

  void roundabout_t_pimpl::
  location ()
  {
  }

  void roundabout_t_pimpl::
  roadSegmentsAt ()
  {
  }

  void roundabout_t_pimpl::
  Conectors ()
  {
  }

  void roundabout_t_pimpl::
  ChunkLengths ()
  {
  }

  void roundabout_t_pimpl::
  Offsets ()
  {
  }

  void roundabout_t_pimpl::
  Separators ()
  {
  }

  void roundabout_t_pimpl::
  addDominantLane ()
  {
  }

  void roundabout_t_pimpl::
  roundaboutDominantIslands (float roundaboutDominantIslands)
  {
    std::cout << "roundaboutDominantIslands: " << roundaboutDominantIslands << std::endl;
  }

  void roundabout_t_pimpl::
  roundaboutNumberOfLanes (int roundaboutNumberOfLanes)
  {
    std::cout << "roundaboutNumberOfLanes: " << roundaboutNumberOfLanes << std::endl;
  }

  void roundabout_t_pimpl::
  entranceAngles ()
  {
  }

  void roundabout_t_pimpl::
  obstacles (std::vector<sim_mob::RoadItem> obstacles)
  {
    // TODO
    //
  }

  sim_mob::MultiNode* roundabout_t_pimpl::
  post_roundabout_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // intersection_t_pimpl
  //

  void intersection_t_pimpl::
  pre ()
  {
  }

  void intersection_t_pimpl::
  nodeID (const ::std::string& nodeID)
  {
  }

  void intersection_t_pimpl::
  location ()
  {
  }

  void intersection_t_pimpl::
  roadSegmentsAt ()
  {
  }

  void intersection_t_pimpl::
  Conectors ()
  {
  }

  void intersection_t_pimpl::
  ChunkLengths ()
  {
  }

  void intersection_t_pimpl::
  Offsets ()
  {
  }

  void intersection_t_pimpl::
  Separators ()
  {
  }

  void intersection_t_pimpl::
  additionalDominantLanes ()
  {
  }

  void intersection_t_pimpl::
  additionalSubdominantLanes ()
  {
  }

  void intersection_t_pimpl::
  domainIslands ()
  {
  }

  void intersection_t_pimpl::
  obstacles (std::vector<sim_mob::RoadItem> obstacles)
  {
    // TODO
    //
  }

  sim_mob::MultiNode* intersection_t_pimpl::
  post_intersection_t ()
  {
    // TODO
    //
    // return ... ;
  }
  // RoadItem_t_pimpl
  //

  void RoadItem_t_pimpl::
  pre ()
  {
  }

  void RoadItem_t_pimpl::
  start ()
  {
  }

  void RoadItem_t_pimpl::
  end ()
  {
  }

  sim_mob::RoadItem* RoadItem_t_pimpl::
  post_RoadItem_t ()
  {
    // TODO
    //
    // return ... ;
  }

  // BusStop_t_pimpl
  //

  void BusStop_t_pimpl::
  pre ()
  {
  }

  void BusStop_t_pimpl::
  busStopID (const ::std::string& busStopID)
  {
    std::cout << "busStopID: " << busStopID << std::endl;
  }

  void BusStop_t_pimpl::
  lane_location (const ::std::string& lane_location)
  {
    std::cout << "lane_location: " << lane_location << std::endl;
  }

  void BusStop_t_pimpl::
  is_Terminal (bool is_Terminal)
  {
    std::cout << "is_Terminal: " << is_Terminal << std::endl;
  }

  void BusStop_t_pimpl::
  is_Bay (bool is_Bay)
  {
    std::cout << "is_Bay: " << is_Bay << std::endl;
  }

  void BusStop_t_pimpl::
  has_shelter (bool has_shelter)
  {
    std::cout << "has_shelter: " << has_shelter << std::endl;
  }

  void BusStop_t_pimpl::
  busCapacityAsLength (unsigned int busCapacityAsLength)
  {
    std::cout << "busCapacityAsLength: " << busCapacityAsLength << std::endl;
  }

  void BusStop_t_pimpl::
  post_BusStop_t ()
  {
    sim_mob::RoadItem* v (post_RoadItem_t ());

    // TODO
    //
  }

  // ERP_Gantry_t_pimpl
  //

  void ERP_Gantry_t_pimpl::
  pre ()
  {
  }

  void ERP_Gantry_t_pimpl::
  ERP_GantryID (const ::std::string& ERP_GantryID)
  {
    std::cout << "ERP_GantryID: " << ERP_GantryID << std::endl;
  }

  void ERP_Gantry_t_pimpl::
  post_ERP_Gantry_t ()
  {
    sim_mob::RoadItem* v (post_RoadItem_t ());

    // TODO
    //
  }

  // PointPair_t_pimpl
  //

  void PointPair_t_pimpl::
  pre ()
  {
  }

  void PointPair_t_pimpl::
  First ()
  {
  }

  void PointPair_t_pimpl::
  Second ()
  {
  }

  void PointPair_t_pimpl::
  post_PointPair_t ()
  {
  }

  // crossing_t_pimpl
  //

  void crossing_t_pimpl::
  pre ()
  {
  }

  void crossing_t_pimpl::
  crossingID (const ::std::string& crossingID)
  {
    std::cout << "crossingID: " << crossingID << std::endl;
  }

  void crossing_t_pimpl::
  nearLine ()
  {
  }

  void crossing_t_pimpl::
  farLine ()
  {
  }

  sim_mob::Crossing* crossing_t_pimpl::
  post_crossing_t ()
  {
    sim_mob::RoadItem* v (post_RoadItem_t ());

    // TODO
    //
    // return ... ;
  }

  // RoadBump_t_pimpl
  //

  void RoadBump_t_pimpl::
  pre ()
  {
  }

  void RoadBump_t_pimpl::
  roadBumpID (const ::std::string& roadBumpID)
  {
    std::cout << "roadBumpID: " << roadBumpID << std::endl;
  }

  void RoadBump_t_pimpl::
  segmentID (const ::std::string& segmentID)
  {
  }

  void RoadBump_t_pimpl::
  post_RoadBump_t ()
  {
    sim_mob::RoadItem* v (post_RoadItem_t ());

    // TODO
    //
  }

  // RoadNetwork_t_pimpl
  //

  void RoadNetwork_t_pimpl::
  pre ()
  {
  }

  void RoadNetwork_t_pimpl::
  Links (std::vector<sim_mob::Link*> Links)
  {
    // TODO
    //
  }

  void RoadNetwork_t_pimpl::
  Nodes ()
  {
  }

  void RoadNetwork_t_pimpl::
  post_RoadNetwork_t ()
  {
  }

  // RoadItems_t_pimpl
  //

  void RoadItems_t_pimpl::
  pre ()
  {
  }

  void RoadItems_t_pimpl::
  BusStops ()
  {
  }

  void RoadItems_t_pimpl::
  ERP_Gantries ()
  {
  }

  void RoadItems_t_pimpl::
  Crossings ()
  {
  }

  void RoadItems_t_pimpl::
  RoadBumps ()
  {
  }

  void RoadItems_t_pimpl::
  post_RoadItems_t ()
  {
  }

  // GeoSpatial_t_pimpl
  //

  void GeoSpatial_t_pimpl::
  pre ()
  {
  }

  void GeoSpatial_t_pimpl::
  RoadNetwork ()
  {
  }

  void GeoSpatial_t_pimpl::
  RoadItems ()
  {
  }

  void GeoSpatial_t_pimpl::
  post_GeoSpatial_t ()
  {
  }

  // SimMobility_t_pimpl
  //

  void SimMobility_t_pimpl::
  pre ()
  {
  }

  void SimMobility_t_pimpl::
  GeoSpatial ()
  {
  }

  void SimMobility_t_pimpl::
  post_SimMobility_t ()
  {
  }

  // Lanes_pimpl
  //

  void Lanes_pimpl::
  pre ()
  {
  }

  void Lanes_pimpl::
  Lane (sim_mob::Lane* Lane)
  {
	  lnes.push_back(Lane);
  }

  std::vector<sim_mob::Lane*> Lanes_pimpl::
  post_Lanes ()
  {
    return lnes;
  }

  // Segments_pimpl
  //

  void Segments_pimpl::
  pre ()
  {
  }

  void Segments_pimpl::
  FWDSegments (std::vector<sim_mob::RoadSegment*> FWDSegments)
  {
	  fwd = FWDSegments;
    // TODO
    //
  }

  void Segments_pimpl::
  BKDSegments (std::vector<sim_mob::RoadSegment*> BKDSegments)
  {
	  bkd = BKDSegments;
    // TODO
    //
  }

  std::pair<std::vector<sim_mob::RoadSegment*>,std::vector<sim_mob::RoadSegment*> > Segments_pimpl::
  post_Segments ()
  {
    // TODO
    //
    // return ... ;
  }

  // Links_pimpl
  //

  void Links_pimpl::
  pre ()
  {

  }

  void Links_pimpl::
  Link (sim_mob::Link* Link)
  {
    // TODO
    //
  }

  std::vector<sim_mob::Link*> Links_pimpl::
  post_Links ()
  {
    // TODO
    //
    // return ... ;
  }

  // Nodes_pimpl
  //

  void Nodes_pimpl::
  pre ()
  {
  }

  void Nodes_pimpl::
  UniNodes (std::set<sim_mob::UniNode*> UniNodes)
  {
    // TODO
    //
  }

  void Nodes_pimpl::
  Intersections (std::vector<sim_mob::MultiNode*> Intersections)
  {
    // TODO
    //
  }

  void Nodes_pimpl::
  roundabouts (std::vector<sim_mob::MultiNode*> roundabouts)
  {
    // TODO
    //
  }

  void Nodes_pimpl::
  post_Nodes ()
  {
  }

  // BusStops_pimpl
  //

  void BusStops_pimpl::
  pre ()
  {
  }

  void BusStops_pimpl::
  BusStop ()
  {
  }

  void BusStops_pimpl::
  post_BusStops ()
  {
  }

  // ERP_Gantries_pimpl
  //

  void ERP_Gantries_pimpl::
  pre ()
  {
  }

  void ERP_Gantries_pimpl::
  ERP_Gantry ()
  {
  }

  void ERP_Gantries_pimpl::
  post_ERP_Gantries ()
  {
  }

  // Crossings_pimpl
  //

  void Crossings_pimpl::
  pre ()
  {
  }

  void Crossings_pimpl::
  Crossing (sim_mob::Crossing* Crossing)
  {
    // TODO
    //
  }

  void Crossings_pimpl::
  post_Crossings ()
  {
  }

  // RoadBumps_pimpl
  //

  void RoadBumps_pimpl::
  pre ()
  {
  }

  void RoadBumps_pimpl::
  RoadBump ()
  {
  }

  void RoadBumps_pimpl::
  post_RoadBumps ()
  {
  }

  // UniNodes_pimpl
  //

  void UniNodes_pimpl::
  pre ()
  {
  }

  void UniNodes_pimpl::
  UniNode (sim_mob::UniNode* UniNode)
  {
    // TODO
    //
  }

  std::set<sim_mob::UniNode*> UniNodes_pimpl::
  post_UniNodes ()
  {
    // TODO
    //
    // return ... ;
  }

  // Intersections_pimpl
  //

  void Intersections_pimpl::
  pre ()
  {
  }

  void Intersections_pimpl::
  Intersection (sim_mob::MultiNode* Intersection)
  {
    // TODO
    //
  }

  std::vector<sim_mob::MultiNode*> Intersections_pimpl::
  post_Intersections ()
  {
    // TODO
    //
    // return ... ;
  }

  // roundabouts_pimpl
  //

  void roundabouts_pimpl::
  pre ()
  {
  }

  void roundabouts_pimpl::
  roundabout (sim_mob::MultiNode* roundabout)
  {
    // TODO
    //
  }

  std::vector<sim_mob::MultiNode*> roundabouts_pimpl::
  post_roundabouts ()
  {
    // TODO
    //
    // return ... ;
  }
}

