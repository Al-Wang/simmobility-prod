// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GEO7_PSKEL_HXX
#define GEO7_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace geo
{
  class SegmentType_t_pskel;
  class ObstacleType_t_pskel;
  class LaneType_t_pskel;
  class obstacle_t_pskel;
  class obstacles_t_pskel;
  class Point2D_t_pskel;
  class PolyPoint_t_pskel;
  class PolyLine_t_pskel;
  class lane_t_pskel;
  class connector_t_pskel;
  class connectors_t_pskel;
  class fwdBckSegments_t_pskel;
  class RoadSegmentsAt_t_pskel;
  class segment_t_pskel;
  class link_t_pskel;
  class separator_t_pskel;
  class separators_t_pskel;
  class DomainIsland_t_pskel;
  class DomainIslands_t_pskel;
  class offset_t_pskel;
  class offsets_t_pskel;
  class ChunkLength_t_pskel;
  class ChunkLengths_t_pskel;
  class LanesVector_t_pskel;
  class EntranceAngle_t_pskel;
  class EntranceAngles_t_pskel;
  class UniNode_t_pskel;
  class roundabout_t_pskel;
  class intersection_t_pskel;
  class RoadItem_t_pskel;
  class BusStop_t_pskel;
  class ERP_Gantry_t_pskel;
  class PointPair_t_pskel;
  class crossing_t_pskel;
  class RoadBump_t_pskel;
  class RoadNetwork_t_pskel;
  class RoadItems_t_pskel;
  class GeoSpatial_t_pskel;
  class SimMobility_t_pskel;
  class Lanes_pskel;
  class Segments_pskel;
  class Links_pskel;
  class Nodes_pskel;
  class BusStops_pskel;
  class ERP_Gantries_pskel;
  class Crossings_pskel;
  class RoadBumps_pskel;
  class UniNodes_pskel;
  class Intersections_pskel;
  class roundabouts_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/non-validating/parser.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

#include "Roundabout.hpp"
#include "RoadNetwork.hpp"
#include "RoadItem.hpp"
#include "MultiNode.hpp"
#include "Link.hpp"
#include "LaneConnector.hpp"
#include "Lane.hpp"
#include "Intersection.hpp"
#include "Crossing.hpp"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::non_validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::non_validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::non_validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::non_validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::non_validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::non_validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::non_validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::non_validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::non_validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::non_validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::non_validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::non_validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::non_validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::non_validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::non_validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::non_validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::non_validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::non_validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::non_validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::non_validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::non_validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::non_validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::non_validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::non_validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::non_validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::non_validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::non_validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::non_validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::non_validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::non_validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::non_validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::non_validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::non_validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::non_validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::non_validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::non_validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::non_validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

namespace geo
{
  class SegmentType_t_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual std::string
    post_SegmentType_t () = 0;
  };

  class ObstacleType_t_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ObstacleType_t ();
  };

  class LaneType_t_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_LaneType_t ();
  };

  class obstacle_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    obstacleID (const ::std::string&);

    virtual void
    obstacleType ();

    virtual sim_mob::RoadItem*
    post_obstacle_t () = 0;

    // Parser construction API.
    //
    void
    obstacleID_parser (::xml_schema::string_pskel&);

    void
    obstacleType_parser (::geo::ObstacleType_t_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* obstacleID */,
             ::geo::ObstacleType_t_pskel& /* obstacleType */);

    // Constructor.
    //
    obstacle_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* obstacleID_parser_;
    ::geo::ObstacleType_t_pskel* obstacleType_parser_;
  };

  class obstacles_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    obstacle (sim_mob::RoadItem*);

    virtual std::vector<sim_mob::RoadItem>
    post_obstacles_t () = 0;

    // Parser construction API.
    //
    void
    obstacle_parser (::geo::obstacle_t_pskel&);

    void
    parsers (::geo::obstacle_t_pskel& /* obstacle */);

    // Constructor.
    //
    obstacles_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::obstacle_t_pskel* obstacle_parser_;
  };

  class Point2D_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    xPos (unsigned long long);

    virtual void
    yPos (unsigned long long);

    virtual void
    post_Point2D_t ();

    // Parser construction API.
    //
    void
    xPos_parser (::xml_schema::positive_integer_pskel&);

    void
    yPos_parser (::xml_schema::positive_integer_pskel&);

    void
    parsers (::xml_schema::positive_integer_pskel& /* xPos */,
             ::xml_schema::positive_integer_pskel& /* yPos */);

    // Constructor.
    //
    Point2D_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::positive_integer_pskel* xPos_parser_;
    ::xml_schema::positive_integer_pskel* yPos_parser_;
  };

  class PolyPoint_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pointID (const ::std::string&);

    virtual void
    location ();

    virtual void
    post_PolyPoint_t ();

    // Parser construction API.
    //
    void
    pointID_parser (::xml_schema::string_pskel&);

    void
    location_parser (::geo::Point2D_t_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* pointID */,
             ::geo::Point2D_t_pskel& /* location */);

    // Constructor.
    //
    PolyPoint_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* pointID_parser_;
    ::geo::Point2D_t_pskel* location_parser_;
  };

  class PolyLine_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    PolyPoint ();

    virtual std::vector<sim_mob::Point2D>
    post_PolyLine_t () = 0;

    // Parser construction API.
    //
    void
    PolyPoint_parser (::geo::PolyPoint_t_pskel&);

    void
    parsers (::geo::PolyPoint_t_pskel& /* PolyPoint */);

    // Constructor.
    //
    PolyLine_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::PolyPoint_t_pskel* PolyPoint_parser_;
  };

  class lane_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    laneID (const ::std::string&);

    virtual void
    laneType ();

    virtual void
    Width (unsigned long long);

    virtual void
    PolyLine (std::vector<sim_mob::Point2D>);

    virtual void
    can_go_straight (bool);

    virtual void
    can_turn_left (bool);

    virtual void
    can_turn_right (bool);

    virtual void
    can_turn_on_red_signal (bool);

    virtual void
    can_change_lane_left (bool);

    virtual void
    can_change_lane_right (bool);

    virtual void
    is_road_shoulder (bool);

    virtual void
    is_bicycle_lane (bool);

    virtual void
    is_pedestrian_lane (bool);

    virtual void
    is_vehicle_lane (bool);

    virtual void
    is_standard_bus_lane (bool);

    virtual void
    is_whole_day_bus_lane (bool);

    virtual void
    is_high_occupancy_vehicle_lane (bool);

    virtual void
    can_freely_park_here (bool);

    virtual void
    can_stop_here (bool);

    virtual void
    is_u_turn_allowed (bool);

    virtual sim_mob::Lane*
    post_lane_t () = 0;

    // Parser construction API.
    //
    void
    laneID_parser (::xml_schema::string_pskel&);

    void
    laneType_parser (::geo::LaneType_t_pskel&);

    void
    Width_parser (::xml_schema::positive_integer_pskel&);

    void
    PolyLine_parser (::geo::PolyLine_t_pskel&);

    void
    can_go_straight_parser (::xml_schema::boolean_pskel&);

    void
    can_turn_left_parser (::xml_schema::boolean_pskel&);

    void
    can_turn_right_parser (::xml_schema::boolean_pskel&);

    void
    can_turn_on_red_signal_parser (::xml_schema::boolean_pskel&);

    void
    can_change_lane_left_parser (::xml_schema::boolean_pskel&);

    void
    can_change_lane_right_parser (::xml_schema::boolean_pskel&);

    void
    is_road_shoulder_parser (::xml_schema::boolean_pskel&);

    void
    is_bicycle_lane_parser (::xml_schema::boolean_pskel&);

    void
    is_pedestrian_lane_parser (::xml_schema::boolean_pskel&);

    void
    is_vehicle_lane_parser (::xml_schema::boolean_pskel&);

    void
    is_standard_bus_lane_parser (::xml_schema::boolean_pskel&);

    void
    is_whole_day_bus_lane_parser (::xml_schema::boolean_pskel&);

    void
    is_high_occupancy_vehicle_lane_parser (::xml_schema::boolean_pskel&);

    void
    can_freely_park_here_parser (::xml_schema::boolean_pskel&);

    void
    can_stop_here_parser (::xml_schema::boolean_pskel&);

    void
    is_u_turn_allowed_parser (::xml_schema::boolean_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* laneID */,
             ::geo::LaneType_t_pskel& /* laneType */,
             ::xml_schema::positive_integer_pskel& /* Width */,
             ::geo::PolyLine_t_pskel& /* PolyLine */,
             ::xml_schema::boolean_pskel& /* can_go_straight */,
             ::xml_schema::boolean_pskel& /* can_turn_left */,
             ::xml_schema::boolean_pskel& /* can_turn_right */,
             ::xml_schema::boolean_pskel& /* can_turn_on_red_signal */,
             ::xml_schema::boolean_pskel& /* can_change_lane_left */,
             ::xml_schema::boolean_pskel& /* can_change_lane_right */,
             ::xml_schema::boolean_pskel& /* is_road_shoulder */,
             ::xml_schema::boolean_pskel& /* is_bicycle_lane */,
             ::xml_schema::boolean_pskel& /* is_pedestrian_lane */,
             ::xml_schema::boolean_pskel& /* is_vehicle_lane */,
             ::xml_schema::boolean_pskel& /* is_standard_bus_lane */,
             ::xml_schema::boolean_pskel& /* is_whole_day_bus_lane */,
             ::xml_schema::boolean_pskel& /* is_high_occupancy_vehicle_lane */,
             ::xml_schema::boolean_pskel& /* can_freely_park_here */,
             ::xml_schema::boolean_pskel& /* can_stop_here */,
             ::xml_schema::boolean_pskel& /* is_u_turn_allowed */);

    // Constructor.
    //
    lane_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* laneID_parser_;
    ::geo::LaneType_t_pskel* laneType_parser_;
    ::xml_schema::positive_integer_pskel* Width_parser_;
    ::geo::PolyLine_t_pskel* PolyLine_parser_;
    ::xml_schema::boolean_pskel* can_go_straight_parser_;
    ::xml_schema::boolean_pskel* can_turn_left_parser_;
    ::xml_schema::boolean_pskel* can_turn_right_parser_;
    ::xml_schema::boolean_pskel* can_turn_on_red_signal_parser_;
    ::xml_schema::boolean_pskel* can_change_lane_left_parser_;
    ::xml_schema::boolean_pskel* can_change_lane_right_parser_;
    ::xml_schema::boolean_pskel* is_road_shoulder_parser_;
    ::xml_schema::boolean_pskel* is_bicycle_lane_parser_;
    ::xml_schema::boolean_pskel* is_pedestrian_lane_parser_;
    ::xml_schema::boolean_pskel* is_vehicle_lane_parser_;
    ::xml_schema::boolean_pskel* is_standard_bus_lane_parser_;
    ::xml_schema::boolean_pskel* is_whole_day_bus_lane_parser_;
    ::xml_schema::boolean_pskel* is_high_occupancy_vehicle_lane_parser_;
    ::xml_schema::boolean_pskel* can_freely_park_here_parser_;
    ::xml_schema::boolean_pskel* can_stop_here_parser_;
    ::xml_schema::boolean_pskel* is_u_turn_allowed_parser_;
  };

  class connector_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    laneFrom (const ::std::string&);

    virtual void
    laneTo (const ::std::string&);

    virtual sim_mob::LaneConnector*
    post_connector_t () = 0;

    // Parser construction API.
    //
    void
    laneFrom_parser (::xml_schema::string_pskel&);

    void
    laneTo_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* laneFrom */,
             ::xml_schema::string_pskel& /* laneTo */);

    // Constructor.
    //
    connector_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* laneFrom_parser_;
    ::xml_schema::string_pskel* laneTo_parser_;
  };

  class connectors_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Connector (sim_mob::LaneConnector*);

    virtual void
    post_connectors_t ();

    // Parser construction API.
    //
    void
    Connector_parser (::geo::connector_t_pskel&);

    void
    parsers (::geo::connector_t_pskel& /* Connector */);

    // Constructor.
    //
    connectors_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::connector_t_pskel* Connector_parser_;
  };

  class fwdBckSegments_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    segment (sim_mob::RoadSegment*);

    virtual std::vector<sim_mob::RoadSegment*>
    post_fwdBckSegments_t () = 0;

    // Parser construction API.
    //
    void
    segment_parser (::geo::segment_t_pskel&);

    void
    parsers (::geo::segment_t_pskel& /* segment */);

    // Constructor.
    //
    fwdBckSegments_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::segment_t_pskel* segment_parser_;
  };

  class RoadSegmentsAt_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    segmentID (const ::std::string&);

    virtual void
    post_RoadSegmentsAt_t ();

    // Parser construction API.
    //
    void
    segmentID_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* segmentID */);

    // Constructor.
    //
    RoadSegmentsAt_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* segmentID_parser_;
  };

  class segment_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    segmentID (const ::std::string&);

    virtual void
    segmentType (std::string);

    virtual void
    parentLink (const ::std::string&);

    virtual void
    StartingNode (const ::std::string&);

    virtual void
    EndingNode (const ::std::string&);

    virtual void
    Maxspeed (short);

    virtual void
    LanesLeftOfDivider (unsigned long long);

    virtual void
    Lanes (std::vector<sim_mob::Lane*>);

    virtual void
    KurbLine (std::vector<sim_mob::Point2D>);

    virtual sim_mob::RoadSegment*
    post_segment_t () = 0;

    // Parser construction API.
    //
    void
    segmentID_parser (::xml_schema::string_pskel&);

    void
    segmentType_parser (::geo::SegmentType_t_pskel&);

    void
    parentLink_parser (::xml_schema::string_pskel&);

    void
    StartingNode_parser (::xml_schema::string_pskel&);

    void
    EndingNode_parser (::xml_schema::string_pskel&);

    void
    Maxspeed_parser (::xml_schema::short_pskel&);

    void
    LanesLeftOfDivider_parser (::xml_schema::positive_integer_pskel&);

    void
    Lanes_parser (::geo::Lanes_pskel&);

    void
    KurbLine_parser (::geo::PolyLine_t_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* segmentID */,
             ::geo::SegmentType_t_pskel& /* segmentType */,
             ::xml_schema::string_pskel& /* parentLink */,
             ::xml_schema::string_pskel& /* StartingNode */,
             ::xml_schema::string_pskel& /* EndingNode */,
             ::xml_schema::short_pskel& /* Maxspeed */,
             ::xml_schema::positive_integer_pskel& /* LanesLeftOfDivider */,
             ::geo::Lanes_pskel& /* Lanes */,
             ::geo::PolyLine_t_pskel& /* KurbLine */);

    // Constructor.
    //
    segment_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* segmentID_parser_;
    ::geo::SegmentType_t_pskel* segmentType_parser_;
    ::xml_schema::string_pskel* parentLink_parser_;
    ::xml_schema::string_pskel* StartingNode_parser_;
    ::xml_schema::string_pskel* EndingNode_parser_;
    ::xml_schema::short_pskel* Maxspeed_parser_;
    ::xml_schema::positive_integer_pskel* LanesLeftOfDivider_parser_;
    ::geo::Lanes_pskel* Lanes_parser_;
    ::geo::PolyLine_t_pskel* KurbLine_parser_;
  };

  class link_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    linkID (const ::std::string&);

    virtual void
    roadName (const ::std::string&);

    virtual void
    StartingNode (const ::std::string&);

    virtual void
    EndingNode (const ::std::string&);

    virtual void
    Segments (std::pair<std::vector<sim_mob::RoadSegment*>,std::vector<sim_mob::RoadSegment*>>);

    virtual sim_mob::Link*
    post_link_t () = 0;

    // Parser construction API.
    //
    void
    linkID_parser (::xml_schema::string_pskel&);

    void
    roadName_parser (::xml_schema::string_pskel&);

    void
    StartingNode_parser (::xml_schema::string_pskel&);

    void
    EndingNode_parser (::xml_schema::string_pskel&);

    void
    Segments_parser (::geo::Segments_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* linkID */,
             ::xml_schema::string_pskel& /* roadName */,
             ::xml_schema::string_pskel& /* StartingNode */,
             ::xml_schema::string_pskel& /* EndingNode */,
             ::geo::Segments_pskel& /* Segments */);

    // Constructor.
    //
    link_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* linkID_parser_;
    ::xml_schema::string_pskel* roadName_parser_;
    ::xml_schema::string_pskel* StartingNode_parser_;
    ::xml_schema::string_pskel* EndingNode_parser_;
    ::geo::Segments_pskel* Segments_parser_;
  };

  class separator_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    separator_ID (unsigned short);

    virtual void
    separator_value (bool);

    virtual void
    post_separator_t ();

    // Parser construction API.
    //
    void
    separator_ID_parser (::xml_schema::unsigned_short_pskel&);

    void
    separator_value_parser (::xml_schema::boolean_pskel&);

    void
    parsers (::xml_schema::unsigned_short_pskel& /* separator_ID */,
             ::xml_schema::boolean_pskel& /* separator_value */);

    // Constructor.
    //
    separator_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::unsigned_short_pskel* separator_ID_parser_;
    ::xml_schema::boolean_pskel* separator_value_parser_;
  };

  class separators_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Separator ();

    virtual void
    post_separators_t ();

    // Parser construction API.
    //
    void
    Separator_parser (::geo::separator_t_pskel&);

    void
    parsers (::geo::separator_t_pskel& /* Separator */);

    // Constructor.
    //
    separators_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::separator_t_pskel* Separator_parser_;
  };

  class DomainIsland_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    domainIsland_ID (unsigned short);

    virtual void
    domainIsland_value (bool);

    virtual void
    post_DomainIsland_t ();

    // Parser construction API.
    //
    void
    domainIsland_ID_parser (::xml_schema::unsigned_short_pskel&);

    void
    domainIsland_value_parser (::xml_schema::boolean_pskel&);

    void
    parsers (::xml_schema::unsigned_short_pskel& /* domainIsland_ID */,
             ::xml_schema::boolean_pskel& /* domainIsland_value */);

    // Constructor.
    //
    DomainIsland_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::unsigned_short_pskel* domainIsland_ID_parser_;
    ::xml_schema::boolean_pskel* domainIsland_value_parser_;
  };

  class DomainIslands_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    domainIslands ();

    virtual void
    post_DomainIslands_t ();

    // Parser construction API.
    //
    void
    domainIslands_parser (::geo::DomainIsland_t_pskel&);

    void
    parsers (::geo::DomainIsland_t_pskel& /* domainIslands */);

    // Constructor.
    //
    DomainIslands_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::DomainIsland_t_pskel* domainIslands_parser_;
  };

  class offset_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    offset_ID (unsigned short);

    virtual void
    offset_value (unsigned long long);

    virtual void
    post_offset_t ();

    // Parser construction API.
    //
    void
    offset_ID_parser (::xml_schema::unsigned_short_pskel&);

    void
    offset_value_parser (::xml_schema::positive_integer_pskel&);

    void
    parsers (::xml_schema::unsigned_short_pskel& /* offset_ID */,
             ::xml_schema::positive_integer_pskel& /* offset_value */);

    // Constructor.
    //
    offset_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::unsigned_short_pskel* offset_ID_parser_;
    ::xml_schema::positive_integer_pskel* offset_value_parser_;
  };

  class offsets_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    offset ();

    virtual void
    post_offsets_t ();

    // Parser construction API.
    //
    void
    offset_parser (::geo::offset_t_pskel&);

    void
    parsers (::geo::offset_t_pskel& /* offset */);

    // Constructor.
    //
    offsets_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::offset_t_pskel* offset_parser_;
  };

  class ChunkLength_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    chunklength_ID (unsigned short);

    virtual void
    chunklength_value (unsigned long long);

    virtual void
    post_ChunkLength_t ();

    // Parser construction API.
    //
    void
    chunklength_ID_parser (::xml_schema::unsigned_short_pskel&);

    void
    chunklength_value_parser (::xml_schema::positive_integer_pskel&);

    void
    parsers (::xml_schema::unsigned_short_pskel& /* chunklength_ID */,
             ::xml_schema::positive_integer_pskel& /* chunklength_value */);

    // Constructor.
    //
    ChunkLength_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::unsigned_short_pskel* chunklength_ID_parser_;
    ::xml_schema::positive_integer_pskel* chunklength_value_parser_;
  };

  class ChunkLengths_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    chunklength ();

    virtual void
    post_ChunkLengths_t ();

    // Parser construction API.
    //
    void
    chunklength_parser (::geo::ChunkLength_t_pskel&);

    void
    parsers (::geo::ChunkLength_t_pskel& /* chunklength */);

    // Constructor.
    //
    ChunkLengths_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::ChunkLength_t_pskel* chunklength_parser_;
  };

  class LanesVector_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    laneID (const ::std::string&);

    virtual void
    post_LanesVector_t ();

    // Parser construction API.
    //
    void
    laneID_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* laneID */);

    // Constructor.
    //
    LanesVector_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* laneID_parser_;
  };

  class EntranceAngle_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    entranceAngle_ID (unsigned short);

    virtual void
    entranceAngle_value (unsigned long long);

    virtual void
    post_EntranceAngle_t ();

    // Parser construction API.
    //
    void
    entranceAngle_ID_parser (::xml_schema::unsigned_short_pskel&);

    void
    entranceAngle_value_parser (::xml_schema::positive_integer_pskel&);

    void
    parsers (::xml_schema::unsigned_short_pskel& /* entranceAngle_ID */,
             ::xml_schema::positive_integer_pskel& /* entranceAngle_value */);

    // Constructor.
    //
    EntranceAngle_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::unsigned_short_pskel* entranceAngle_ID_parser_;
    ::xml_schema::positive_integer_pskel* entranceAngle_value_parser_;
  };

  class EntranceAngles_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    entranceAngle ();

    virtual void
    post_EntranceAngles_t ();

    // Parser construction API.
    //
    void
    entranceAngle_parser (::geo::EntranceAngle_t_pskel&);

    void
    parsers (::geo::EntranceAngle_t_pskel& /* entranceAngle */);

    // Constructor.
    //
    EntranceAngles_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::EntranceAngle_t_pskel* entranceAngle_parser_;
  };

  class UniNode_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    nodeID (const ::std::string&);

    virtual void
    location ();

    virtual void
    Conectors ();

    virtual sim_mob::UniNode*
    post_UniNode_t () = 0;

    // Parser construction API.
    //
    void
    nodeID_parser (::xml_schema::string_pskel&);

    void
    location_parser (::geo::Point2D_t_pskel&);

    void
    Conectors_parser (::geo::connectors_t_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* nodeID */,
             ::geo::Point2D_t_pskel& /* location */,
             ::geo::connectors_t_pskel& /* Conectors */);

    // Constructor.
    //
    UniNode_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* nodeID_parser_;
    ::geo::Point2D_t_pskel* location_parser_;
    ::geo::connectors_t_pskel* Conectors_parser_;
  };

  class roundabout_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    nodeID (const ::std::string&);

    virtual void
    location ();

    virtual void
    roadSegmentsAt ();

    virtual void
    Conectors ();

    virtual void
    ChunkLengths ();

    virtual void
    Offsets ();

    virtual void
    Separators ();

    virtual void
    addDominantLane ();

    virtual void
    roundaboutDominantIslands (float);

    virtual void
    roundaboutNumberOfLanes (int);

    virtual void
    entranceAngles ();

    virtual void
    obstacles (std::vector<sim_mob::RoadItem>);

    virtual sim_mob::MultiNode*
    post_roundabout_t () = 0;

    // Parser construction API.
    //
    void
    nodeID_parser (::xml_schema::string_pskel&);

    void
    location_parser (::geo::Point2D_t_pskel&);

    void
    roadSegmentsAt_parser (::geo::RoadSegmentsAt_t_pskel&);

    void
    Conectors_parser (::geo::connectors_t_pskel&);

    void
    ChunkLengths_parser (::geo::ChunkLengths_t_pskel&);

    void
    Offsets_parser (::geo::offsets_t_pskel&);

    void
    Separators_parser (::geo::separators_t_pskel&);

    void
    addDominantLane_parser (::geo::LanesVector_t_pskel&);

    void
    roundaboutDominantIslands_parser (::xml_schema::float_pskel&);

    void
    roundaboutNumberOfLanes_parser (::xml_schema::int_pskel&);

    void
    entranceAngles_parser (::geo::EntranceAngles_t_pskel&);

    void
    obstacles_parser (::geo::obstacles_t_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* nodeID */,
             ::geo::Point2D_t_pskel& /* location */,
             ::geo::RoadSegmentsAt_t_pskel& /* roadSegmentsAt */,
             ::geo::connectors_t_pskel& /* Conectors */,
             ::geo::ChunkLengths_t_pskel& /* ChunkLengths */,
             ::geo::offsets_t_pskel& /* Offsets */,
             ::geo::separators_t_pskel& /* Separators */,
             ::geo::LanesVector_t_pskel& /* addDominantLane */,
             ::xml_schema::float_pskel& /* roundaboutDominantIslands */,
             ::xml_schema::int_pskel& /* roundaboutNumberOfLanes */,
             ::geo::EntranceAngles_t_pskel& /* entranceAngles */,
             ::geo::obstacles_t_pskel& /* obstacles */);

    // Constructor.
    //
    roundabout_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* nodeID_parser_;
    ::geo::Point2D_t_pskel* location_parser_;
    ::geo::RoadSegmentsAt_t_pskel* roadSegmentsAt_parser_;
    ::geo::connectors_t_pskel* Conectors_parser_;
    ::geo::ChunkLengths_t_pskel* ChunkLengths_parser_;
    ::geo::offsets_t_pskel* Offsets_parser_;
    ::geo::separators_t_pskel* Separators_parser_;
    ::geo::LanesVector_t_pskel* addDominantLane_parser_;
    ::xml_schema::float_pskel* roundaboutDominantIslands_parser_;
    ::xml_schema::int_pskel* roundaboutNumberOfLanes_parser_;
    ::geo::EntranceAngles_t_pskel* entranceAngles_parser_;
    ::geo::obstacles_t_pskel* obstacles_parser_;
  };

  class intersection_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    nodeID (const ::std::string&);

    virtual void
    location ();

    virtual void
    roadSegmentsAt ();

    virtual void
    Conectors ();

    virtual void
    ChunkLengths ();

    virtual void
    Offsets ();

    virtual void
    Separators ();

    virtual void
    additionalDominantLanes ();

    virtual void
    additionalSubdominantLanes ();

    virtual void
    domainIslands ();

    virtual void
    obstacles (std::vector<sim_mob::RoadItem>);

    virtual sim_mob::MultiNode*
    post_intersection_t () = 0;

    // Parser construction API.
    //
    void
    nodeID_parser (::xml_schema::string_pskel&);

    void
    location_parser (::geo::Point2D_t_pskel&);

    void
    roadSegmentsAt_parser (::geo::RoadSegmentsAt_t_pskel&);

    void
    Conectors_parser (::geo::connectors_t_pskel&);

    void
    ChunkLengths_parser (::geo::ChunkLengths_t_pskel&);

    void
    Offsets_parser (::geo::offsets_t_pskel&);

    void
    Separators_parser (::geo::separators_t_pskel&);

    void
    additionalDominantLanes_parser (::geo::LanesVector_t_pskel&);

    void
    additionalSubdominantLanes_parser (::geo::LanesVector_t_pskel&);

    void
    domainIslands_parser (::geo::DomainIslands_t_pskel&);

    void
    obstacles_parser (::geo::obstacles_t_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* nodeID */,
             ::geo::Point2D_t_pskel& /* location */,
             ::geo::RoadSegmentsAt_t_pskel& /* roadSegmentsAt */,
             ::geo::connectors_t_pskel& /* Conectors */,
             ::geo::ChunkLengths_t_pskel& /* ChunkLengths */,
             ::geo::offsets_t_pskel& /* Offsets */,
             ::geo::separators_t_pskel& /* Separators */,
             ::geo::LanesVector_t_pskel& /* additionalDominantLanes */,
             ::geo::LanesVector_t_pskel& /* additionalSubdominantLanes */,
             ::geo::DomainIslands_t_pskel& /* domainIslands */,
             ::geo::obstacles_t_pskel& /* obstacles */);

    // Constructor.
    //
    intersection_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* nodeID_parser_;
    ::geo::Point2D_t_pskel* location_parser_;
    ::geo::RoadSegmentsAt_t_pskel* roadSegmentsAt_parser_;
    ::geo::connectors_t_pskel* Conectors_parser_;
    ::geo::ChunkLengths_t_pskel* ChunkLengths_parser_;
    ::geo::offsets_t_pskel* Offsets_parser_;
    ::geo::separators_t_pskel* Separators_parser_;
    ::geo::LanesVector_t_pskel* additionalDominantLanes_parser_;
    ::geo::LanesVector_t_pskel* additionalSubdominantLanes_parser_;
    ::geo::DomainIslands_t_pskel* domainIslands_parser_;
    ::geo::obstacles_t_pskel* obstacles_parser_;
  };

  class RoadItem_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    start ();

    virtual void
    end ();

    virtual sim_mob::RoadItem*
    post_RoadItem_t () = 0;

    // Parser construction API.
    //
    void
    start_parser (::geo::Point2D_t_pskel&);

    void
    end_parser (::geo::Point2D_t_pskel&);

    void
    parsers (::geo::Point2D_t_pskel& /* start */,
             ::geo::Point2D_t_pskel& /* end */);

    // Constructor.
    //
    RoadItem_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::Point2D_t_pskel* start_parser_;
    ::geo::Point2D_t_pskel* end_parser_;
  };

  class BusStop_t_pskel: public virtual ::geo::RoadItem_t_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    busStopID (const ::std::string&);

    virtual void
    lane_location (const ::std::string&);

    virtual void
    is_Terminal (bool);

    virtual void
    is_Bay (bool);

    virtual void
    has_shelter (bool);

    virtual void
    busCapacityAsLength (unsigned int);

    virtual void
    post_BusStop_t ();

    // Parser construction API.
    //
    void
    busStopID_parser (::xml_schema::string_pskel&);

    void
    lane_location_parser (::xml_schema::string_pskel&);

    void
    is_Terminal_parser (::xml_schema::boolean_pskel&);

    void
    is_Bay_parser (::xml_schema::boolean_pskel&);

    void
    has_shelter_parser (::xml_schema::boolean_pskel&);

    void
    busCapacityAsLength_parser (::xml_schema::unsigned_int_pskel&);

    void
    parsers (::geo::Point2D_t_pskel& /* start */,
             ::geo::Point2D_t_pskel& /* end */,
             ::xml_schema::string_pskel& /* busStopID */,
             ::xml_schema::string_pskel& /* lane_location */,
             ::xml_schema::boolean_pskel& /* is_Terminal */,
             ::xml_schema::boolean_pskel& /* is_Bay */,
             ::xml_schema::boolean_pskel& /* has_shelter */,
             ::xml_schema::unsigned_int_pskel& /* busCapacityAsLength */);

    // Constructor.
    //
    BusStop_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* busStopID_parser_;
    ::xml_schema::string_pskel* lane_location_parser_;
    ::xml_schema::boolean_pskel* is_Terminal_parser_;
    ::xml_schema::boolean_pskel* is_Bay_parser_;
    ::xml_schema::boolean_pskel* has_shelter_parser_;
    ::xml_schema::unsigned_int_pskel* busCapacityAsLength_parser_;
  };

  class ERP_Gantry_t_pskel: public virtual ::geo::RoadItem_t_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ERP_GantryID (const ::std::string&);

    virtual void
    post_ERP_Gantry_t ();

    // Parser construction API.
    //
    void
    ERP_GantryID_parser (::xml_schema::string_pskel&);

    void
    parsers (::geo::Point2D_t_pskel& /* start */,
             ::geo::Point2D_t_pskel& /* end */,
             ::xml_schema::string_pskel& /* ERP_GantryID */);

    // Constructor.
    //
    ERP_Gantry_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* ERP_GantryID_parser_;
  };

  class PointPair_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    First ();

    virtual void
    Second ();

    virtual void
    post_PointPair_t ();

    // Parser construction API.
    //
    void
    First_parser (::geo::Point2D_t_pskel&);

    void
    Second_parser (::geo::Point2D_t_pskel&);

    void
    parsers (::geo::Point2D_t_pskel& /* First */,
             ::geo::Point2D_t_pskel& /* Second */);

    // Constructor.
    //
    PointPair_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::Point2D_t_pskel* First_parser_;
    ::geo::Point2D_t_pskel* Second_parser_;
  };

  class crossing_t_pskel: public virtual ::geo::RoadItem_t_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    crossingID (const ::std::string&);

    virtual void
    nearLine ();

    virtual void
    farLine ();

    virtual sim_mob::Crossing*
    post_crossing_t () = 0;

    // Parser construction API.
    //
    void
    crossingID_parser (::xml_schema::string_pskel&);

    void
    nearLine_parser (::geo::PointPair_t_pskel&);

    void
    farLine_parser (::geo::PointPair_t_pskel&);

    void
    parsers (::geo::Point2D_t_pskel& /* start */,
             ::geo::Point2D_t_pskel& /* end */,
             ::xml_schema::string_pskel& /* crossingID */,
             ::geo::PointPair_t_pskel& /* nearLine */,
             ::geo::PointPair_t_pskel& /* farLine */);

    // Constructor.
    //
    crossing_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* crossingID_parser_;
    ::geo::PointPair_t_pskel* nearLine_parser_;
    ::geo::PointPair_t_pskel* farLine_parser_;
  };

  class RoadBump_t_pskel: public virtual ::geo::RoadItem_t_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    roadBumpID (const ::std::string&);

    virtual void
    segmentID (const ::std::string&);

    virtual void
    post_RoadBump_t ();

    // Parser construction API.
    //
    void
    roadBumpID_parser (::xml_schema::string_pskel&);

    void
    segmentID_parser (::xml_schema::string_pskel&);

    void
    parsers (::geo::Point2D_t_pskel& /* start */,
             ::geo::Point2D_t_pskel& /* end */,
             ::xml_schema::string_pskel& /* roadBumpID */,
             ::xml_schema::string_pskel& /* segmentID */);

    // Constructor.
    //
    RoadBump_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* roadBumpID_parser_;
    ::xml_schema::string_pskel* segmentID_parser_;
  };

  class RoadNetwork_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Links (std::vector<sim_mob::Link*>);

    virtual void
    Nodes ();

    virtual void
    post_RoadNetwork_t ();

    // Parser construction API.
    //
    void
    Links_parser (::geo::Links_pskel&);

    void
    Nodes_parser (::geo::Nodes_pskel&);

    void
    parsers (::geo::Links_pskel& /* Links */,
             ::geo::Nodes_pskel& /* Nodes */);

    // Constructor.
    //
    RoadNetwork_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::Links_pskel* Links_parser_;
    ::geo::Nodes_pskel* Nodes_parser_;
  };

  class RoadItems_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    BusStops ();

    virtual void
    ERP_Gantries ();

    virtual void
    Crossings ();

    virtual void
    RoadBumps ();

    virtual void
    post_RoadItems_t ();

    // Parser construction API.
    //
    void
    BusStops_parser (::geo::BusStops_pskel&);

    void
    ERP_Gantries_parser (::geo::ERP_Gantries_pskel&);

    void
    Crossings_parser (::geo::Crossings_pskel&);

    void
    RoadBumps_parser (::geo::RoadBumps_pskel&);

    void
    parsers (::geo::BusStops_pskel& /* BusStops */,
             ::geo::ERP_Gantries_pskel& /* ERP_Gantries */,
             ::geo::Crossings_pskel& /* Crossings */,
             ::geo::RoadBumps_pskel& /* RoadBumps */);

    // Constructor.
    //
    RoadItems_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::BusStops_pskel* BusStops_parser_;
    ::geo::ERP_Gantries_pskel* ERP_Gantries_parser_;
    ::geo::Crossings_pskel* Crossings_parser_;
    ::geo::RoadBumps_pskel* RoadBumps_parser_;
  };

  class GeoSpatial_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    RoadNetwork ();

    virtual void
    RoadItems ();

    virtual void
    post_GeoSpatial_t ();

    // Parser construction API.
    //
    void
    RoadNetwork_parser (::geo::RoadNetwork_t_pskel&);

    void
    RoadItems_parser (::geo::RoadItems_t_pskel&);

    void
    parsers (::geo::RoadNetwork_t_pskel& /* RoadNetwork */,
             ::geo::RoadItems_t_pskel& /* RoadItems */);

    // Constructor.
    //
    GeoSpatial_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::RoadNetwork_t_pskel* RoadNetwork_parser_;
    ::geo::RoadItems_t_pskel* RoadItems_parser_;
  };

  class SimMobility_t_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    GeoSpatial ();

    virtual void
    post_SimMobility_t ();

    // Parser construction API.
    //
    void
    GeoSpatial_parser (::geo::GeoSpatial_t_pskel&);

    void
    parsers (::geo::GeoSpatial_t_pskel& /* GeoSpatial */);

    // Constructor.
    //
    SimMobility_t_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::GeoSpatial_t_pskel* GeoSpatial_parser_;
  };

  class Lanes_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Lane (sim_mob::Lane*);

    virtual std::vector<sim_mob::Lane*>
    post_Lanes () = 0;

    // Parser construction API.
    //
    void
    Lane_parser (::geo::lane_t_pskel&);

    void
    parsers (::geo::lane_t_pskel& /* Lane */);

    // Constructor.
    //
    Lanes_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::lane_t_pskel* Lane_parser_;
  };

  class Segments_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    FWDSegments (std::vector<sim_mob::RoadSegment*>);

    virtual void
    BKDSegments (std::vector<sim_mob::RoadSegment*>);

    virtual std::pair<std::vector<sim_mob::RoadSegment*>,std::vector<sim_mob::RoadSegment*>>
    post_Segments () = 0;

    // Parser construction API.
    //
    void
    FWDSegments_parser (::geo::fwdBckSegments_t_pskel&);

    void
    BKDSegments_parser (::geo::fwdBckSegments_t_pskel&);

    void
    parsers (::geo::fwdBckSegments_t_pskel& /* FWDSegments */,
             ::geo::fwdBckSegments_t_pskel& /* BKDSegments */);

    // Constructor.
    //
    Segments_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::fwdBckSegments_t_pskel* FWDSegments_parser_;
    ::geo::fwdBckSegments_t_pskel* BKDSegments_parser_;
  };

  class Links_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Link (sim_mob::Link*);

    virtual std::vector<sim_mob::Link*>
    post_Links () = 0;

    // Parser construction API.
    //
    void
    Link_parser (::geo::link_t_pskel&);

    void
    parsers (::geo::link_t_pskel& /* Link */);

    // Constructor.
    //
    Links_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::link_t_pskel* Link_parser_;
  };

  class Nodes_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    UniNodes (std::set<sim_mob::UniNode*>);

    virtual void
    Intersections (std::vector<sim_mob::MultiNode*>);

    virtual void
    roundabouts (std::vector<sim_mob::MultiNode*>);

    virtual void
    post_Nodes ();

    // Parser construction API.
    //
    void
    UniNodes_parser (::geo::UniNodes_pskel&);

    void
    Intersections_parser (::geo::Intersections_pskel&);

    void
    roundabouts_parser (::geo::roundabouts_pskel&);

    void
    parsers (::geo::UniNodes_pskel& /* UniNodes */,
             ::geo::Intersections_pskel& /* Intersections */,
             ::geo::roundabouts_pskel& /* roundabouts */);

    // Constructor.
    //
    Nodes_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::UniNodes_pskel* UniNodes_parser_;
    ::geo::Intersections_pskel* Intersections_parser_;
    ::geo::roundabouts_pskel* roundabouts_parser_;
  };

  class BusStops_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    BusStop ();

    virtual void
    post_BusStops ();

    // Parser construction API.
    //
    void
    BusStop_parser (::geo::BusStop_t_pskel&);

    void
    parsers (::geo::BusStop_t_pskel& /* BusStop */);

    // Constructor.
    //
    BusStops_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::BusStop_t_pskel* BusStop_parser_;
  };

  class ERP_Gantries_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ERP_Gantry ();

    virtual void
    post_ERP_Gantries ();

    // Parser construction API.
    //
    void
    ERP_Gantry_parser (::geo::ERP_Gantry_t_pskel&);

    void
    parsers (::geo::ERP_Gantry_t_pskel& /* ERP_Gantry */);

    // Constructor.
    //
    ERP_Gantries_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::ERP_Gantry_t_pskel* ERP_Gantry_parser_;
  };

  class Crossings_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Crossing (sim_mob::Crossing*);

    virtual void
    post_Crossings ();

    // Parser construction API.
    //
    void
    Crossing_parser (::geo::crossing_t_pskel&);

    void
    parsers (::geo::crossing_t_pskel& /* Crossing */);

    // Constructor.
    //
    Crossings_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::crossing_t_pskel* Crossing_parser_;
  };

  class RoadBumps_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    RoadBump ();

    virtual void
    post_RoadBumps ();

    // Parser construction API.
    //
    void
    RoadBump_parser (::geo::RoadBump_t_pskel&);

    void
    parsers (::geo::RoadBump_t_pskel& /* RoadBump */);

    // Constructor.
    //
    RoadBumps_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::RoadBump_t_pskel* RoadBump_parser_;
  };

  class UniNodes_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    UniNode (sim_mob::UniNode*);

    virtual std::set<sim_mob::UniNode*>
    post_UniNodes () = 0;

    // Parser construction API.
    //
    void
    UniNode_parser (::geo::UniNode_t_pskel&);

    void
    parsers (::geo::UniNode_t_pskel& /* UniNode */);

    // Constructor.
    //
    UniNodes_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::UniNode_t_pskel* UniNode_parser_;
  };

  class Intersections_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    Intersection (sim_mob::MultiNode*);

    virtual std::vector<sim_mob::MultiNode*>
    post_Intersections () = 0;

    // Parser construction API.
    //
    void
    Intersection_parser (::geo::intersection_t_pskel&);

    void
    parsers (::geo::intersection_t_pskel& /* Intersection */);

    // Constructor.
    //
    Intersections_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::intersection_t_pskel* Intersection_parser_;
  };

  class roundabouts_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    roundabout (sim_mob::MultiNode*);

    virtual std::vector<sim_mob::MultiNode*>
    post_roundabouts () = 0;

    // Parser construction API.
    //
    void
    roundabout_parser (::geo::roundabout_t_pskel&);

    void
    parsers (::geo::roundabout_t_pskel& /* roundabout */);

    // Constructor.
    //
    roundabouts_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::geo::roundabout_t_pskel* roundabout_parser_;
  };
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GEO7_PSKEL_HXX
