#!/usr/bin/env python

import re, sys

if len(sys.argv) != 2:
    print "usage: %s sql-file" % sys.argv[0]
    sys.exit(1)

class Error(Exception):
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return self.value

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

locations = { 48732  : Point(37232859, 14308003),
              54758  : Point(37273805, 14362442),
              58944  : Point(37260341, 14366554),
              58950  : Point(37265277, 14372270),
              60896  : Point(37203363, 14316228),
              60978  : Point(37207327, 14321605),
              65120  : Point(37254988, 14351820),
              75792  : Point(37228714, 14347788),
              75846  : Point(37277897, 14386971),
              75808  : Point(37275470, 14384214),
              103046 : Point(37236345, 14337301),
              75956  : Point(37255424, 14360690),
              76548  : Point(37219598, 14319517),
              84882  : Point(37246069, 14349392),
              91144  : Point(37283798, 14374819),
              92370  : Point(37269835, 14357029),
              93730  : Point(37245506, 14359431),
              95146  : Point(37257272, 14381914),
              95374  : Point(37242841, 14345362),
              95940  : Point(37252241, 14376060),
              98852  : Point(37254052, 14336482),
              98856  : Point(37251673, 14333350),
              103708 : Point(37245085, 14367879),
              106946 : Point(37267718, 14354161),
              107736 : Point(37248527, 14329197),
              115418 : Point(37256237, 14339027),
              116724 : Point(37289787, 14381483) }

class Activity:
    def __init__(self, type, is_primary, is_flexible, location):
        self.type = type
        self.is_primary = is_primary
        self.is_flexible = is_flexible
        self.location = location

activity_spec_re = re.compile('INSERT INTO "Activity_Spec"\(.* VALUES\((\d+), (\d), (.*), (.*), (\d+)\);')
trip_chain_re = re.compile('INSERT INTO "Trip_Chains"\(.* VALUES\((\d+), (\d+), (\d), "([^"]+)"\);')

activities = dict()
f = open(sys.argv[1], 'r')
for line in f:
    mo = activity_spec_re.search(line)
    if not mo:
        break
    id = int(mo.group(1)) - 100
    type = int(mo.group(2))
    is_primary = True if mo.group(3) == "TRUE" else False
    is_flexible = True if mo.group(4) == "TRUE" else False
    location_id = int(mo.group(5))
    if id in activities:
        raise Error("%d already in activities" % id)
    if location_id not in locations:
        raise Error("%d is not a location id" % location_id)
    activities[id] = Activity(type, is_primary, is_flexible, locations[location_id])

class Trip:
    def __init__(self, start, end, start_time):
        self.start = start
        self.end = end
        self.start_time = start_time

trips_by_drivers = list()
flexible_trips_by_drivers = list()
trips_by_pedestrians = list()
flexible_trips_by_pedestrians = list()

for line in f:
    mo = trip_chain_re.search(line)
    if not mo:
        raise Error("unexpected line '%s'" % line)
    from_id = int(mo.group(1))
    to_id = int(mo.group(2))
    mode = int(mo.group(3))
    start_time = mo.group(4)
    if from_id not in activities or to_id not in activities:
        raise Error("%d or %d not in activities" % (from_id, to_id))
    if 1 == mode:
        from_location = activities[from_id].location
        to_location = activities[to_id].location
        trip = Trip(from_location, to_location, start_time)
        if activities[from_id].is_flexible or activities[to_id].is_flexible:
            flexible_trips_by_drivers.append(trip)
        else:
            trips_by_drivers.append(trip)
    elif 2 == mode:
        from_location = activities[from_id].location
        to_location = activities[to_id].location
        trip = Trip(from_location, to_location, start_time)
        if activities[from_id].is_flexible or activities[to_id].is_flexible:
            flexible_trips_by_pedestrians.append(trip)
        else:
            trips_by_pedestrians.append(trip)
    else:
        raise Error("not expecting mode %d" % mode)

print "<drivers>"
for trip in trips_by_drivers:
    print   '    <driver originPos="%d, %d" destPos="%d, %d" time="%s"/>' \
          % (trip.start.x, trip.start.y, trip.end.x, trip.end.y, trip.start_time)
print "<!-- The following trips by drivers are not primary but flexible activities, such as shopping -->"
for trip in flexible_trips_by_drivers:
    print   '    <driver originPos="%d, %d" destPos="%d, %d" time="%s"/>' \
          % (trip.start.x, trip.start.y, trip.end.x, trip.end.y, trip.start_time)
print "</drivers>"

print "<pedestrians> "
for trip in trips_by_drivers:
    print   '    <pedestrian originPos="%d, %d" destPos="%d, %d" time="%s"/>' \
          % (trip.start.x, trip.start.y, trip.end.x, trip.end.y, trip.start_time)
print "<!-- The following trips by pedestrians are not primary but flexible activities, such as shopping -->"
for trip in flexible_trips_by_drivers:
    print   '    <pedestrian originPos="%d, %d" destPos="%d, %d" time="%s"/>' \
          % (trip.start.x, trip.start.y, trip.end.x, trip.end.y, trip.start_time)
print "</pedestrians> "
